{"version":3,"file":"index.js","names":["c","_c","useLexicalComposerContext","$getNodeByKey","COMMAND_PRIORITY_EDITOR","React","useCallback","useEffect","useState","useLexicalListDrawer","$createRelationshipNode","INSERT_RELATIONSHIP_COMMAND","EnabledRelationshipsCondition","INSERT_RELATIONSHIP_WITH_DRAWER_COMMAND","insertRelationship","editor","relationTo","replaceNodeKey","value","dispatchCommand","update","node","replace","RelationshipDrawerComponent","t0","$","enabledCollectionSlugs","t1","selectedCollectionSlug","setReplaceNodeKey","t2","undefined","t3","collectionSlugs","selectedCollection","closeListDrawer","ListDrawer","openListDrawer","t4","t5","registerCommand","payload","nodeKey","t6","t7","collectionSlug","doc","id","onSelect","_jsx","RelationshipDrawer","props","length"],"sources":["../../../../../src/features/relationship/client/drawer/index.tsx"],"sourcesContent":["'use client'\nimport type { ListDrawerProps } from '@payloadcms/ui'\nimport type { LexicalEditor } from 'lexical'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext.js'\nimport { $getNodeByKey, COMMAND_PRIORITY_EDITOR } from 'lexical'\nimport React, { useCallback, useEffect, useState } from 'react'\n\nimport { useLexicalListDrawer } from '../../../../utilities/fieldsDrawer/useLexicalListDrawer.js'\nimport { $createRelationshipNode } from '../nodes/RelationshipNode.js'\nimport { INSERT_RELATIONSHIP_COMMAND } from '../plugins/index.js'\nimport { EnabledRelationshipsCondition } from '../utils/EnabledRelationshipsCondition.js'\nimport { INSERT_RELATIONSHIP_WITH_DRAWER_COMMAND } from './commands.js'\n\nconst insertRelationship = ({\n  editor,\n  relationTo,\n  replaceNodeKey,\n  value,\n}: {\n  editor: LexicalEditor\n  relationTo: string\n  replaceNodeKey: null | string\n  value: number | string\n}) => {\n  if (!replaceNodeKey) {\n    editor.dispatchCommand(INSERT_RELATIONSHIP_COMMAND, {\n      relationTo,\n      value,\n    })\n  } else {\n    editor.update(() => {\n      const node = $getNodeByKey(replaceNodeKey)\n      if (node) {\n        node.replace($createRelationshipNode({ relationTo, value }))\n      }\n    })\n  }\n}\n\ntype Props = {\n  enabledCollectionSlugs: null | string[]\n}\n\nconst RelationshipDrawerComponent: React.FC<Props> = ({ enabledCollectionSlugs }) => {\n  const [editor] = useLexicalComposerContext()\n  const [selectedCollectionSlug, setSelectedCollectionSlug] = useState(\n    () => enabledCollectionSlugs?.[0],\n  )\n  const [replaceNodeKey, setReplaceNodeKey] = useState<null | string>(null)\n\n  const { closeListDrawer, isListDrawerOpen, ListDrawer, openListDrawer } = useLexicalListDrawer({\n    collectionSlugs: enabledCollectionSlugs ? enabledCollectionSlugs : undefined,\n    selectedCollection: selectedCollectionSlug,\n  })\n\n  useEffect(() => {\n    return editor.registerCommand<{\n      replace: { nodeKey: string } | false\n    }>(\n      INSERT_RELATIONSHIP_WITH_DRAWER_COMMAND,\n      (payload) => {\n        setReplaceNodeKey(payload?.replace ? payload?.replace.nodeKey : null)\n        openListDrawer()\n        return true\n      },\n      COMMAND_PRIORITY_EDITOR,\n    )\n  }, [editor, openListDrawer])\n\n  const onSelect = useCallback<NonNullable<ListDrawerProps['onSelect']>>(\n    ({ collectionSlug, doc }) => {\n      insertRelationship({\n        editor,\n        relationTo: collectionSlug,\n        replaceNodeKey,\n        value: doc.id,\n      })\n      closeListDrawer()\n    },\n    [editor, closeListDrawer, replaceNodeKey],\n  )\n\n  return <ListDrawer onSelect={onSelect} />\n}\n\nexport const RelationshipDrawer = (props: Props): React.ReactNode => {\n  return (props?.enabledCollectionSlugs?.length ?? -1) > 0 ? ( // If enabledCollectionSlugs it overrides what EnabledRelationshipsCondition is doing\n    <RelationshipDrawerComponent {...props} />\n  ) : (\n    <EnabledRelationshipsCondition {...props}>\n      <RelationshipDrawerComponent {...props} />\n    </EnabledRelationshipsCondition>\n  )\n}\n"],"mappings":"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","ignoreList":[]}