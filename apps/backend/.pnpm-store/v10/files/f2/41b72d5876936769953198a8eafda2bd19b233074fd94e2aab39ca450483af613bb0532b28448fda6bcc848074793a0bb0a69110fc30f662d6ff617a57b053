{"version":3,"sources":["../../src/utilities/getEntity.ts"],"sourcesContent":["import type { Collection, SanitizedCollectionConfig, SanitizedGlobalConfig } from 'payload'\n\nimport { APIError } from 'payload'\n\nimport type { MongooseAdapter } from '../index.js'\nimport type { CollectionModel, GlobalModel } from '../types.js'\n\nexport const getCollection = ({\n  adapter,\n  collectionSlug,\n  versions = false,\n}: {\n  adapter: MongooseAdapter\n  collectionSlug: string\n  versions?: boolean\n}): {\n  collectionConfig: SanitizedCollectionConfig\n  customIDType: Collection['customIDType']\n\n  Model: CollectionModel\n} => {\n  const collection = adapter.payload.collections[collectionSlug]\n\n  if (!collection) {\n    throw new APIError(\n      `ERROR: Failed to retrieve collection with the slug \"${collectionSlug}\". Does not exist.`,\n    )\n  }\n\n  if (versions) {\n    const Model = adapter.versions[collectionSlug]\n\n    if (!Model) {\n      throw new APIError(\n        `ERROR: Failed to retrieve collection version model with the slug \"${collectionSlug}\". Does not exist.`,\n      )\n    }\n\n    return { collectionConfig: collection.config, customIDType: collection.customIDType, Model }\n  }\n\n  const Model = adapter.collections[collectionSlug]\n\n  if (!Model) {\n    throw new APIError(\n      `ERROR: Failed to retrieve collection model with the slug \"${collectionSlug}\". Does not exist.`,\n    )\n  }\n\n  return { collectionConfig: collection.config, customIDType: collection.customIDType, Model }\n}\n\ntype BaseGetGlobalArgs = {\n  adapter: MongooseAdapter\n  globalSlug: string\n}\n\ninterface GetGlobal {\n  (args: { versions?: false | undefined } & BaseGetGlobalArgs): {\n    globalConfig: SanitizedGlobalConfig\n    Model: GlobalModel\n  }\n  (args: { versions?: true } & BaseGetGlobalArgs): {\n    globalConfig: SanitizedGlobalConfig\n    Model: CollectionModel\n  }\n}\n\nexport const getGlobal: GetGlobal = ({ adapter, globalSlug, versions = false }) => {\n  const globalConfig = adapter.payload.config.globals.find((each) => each.slug === globalSlug)\n\n  if (!globalConfig) {\n    throw new APIError(\n      `ERROR: Failed to retrieve global with the slug \"${globalSlug}\". Does not exist.`,\n    )\n  }\n\n  if (versions) {\n    const Model = adapter.versions[globalSlug]\n\n    if (!Model) {\n      throw new APIError(\n        `ERROR: Failed to retrieve global version model with the slug \"${globalSlug}\". Does not exist.`,\n      )\n    }\n\n    return { globalConfig, Model }\n  }\n\n  return { globalConfig, Model: adapter.globals } as any\n}\n"],"names":["APIError","getCollection","adapter","collectionSlug","versions","collection","payload","collections","Model","collectionConfig","config","customIDType","getGlobal","globalSlug","globalConfig","globals","find","each","slug"],"mappings":"AAEA,SAASA,QAAQ,QAAQ,UAAS;AAKlC,OAAO,MAAMC,gBAAgB,CAAC,EAC5BC,OAAO,EACPC,cAAc,EACdC,WAAW,KAAK,EAKjB;IAMC,MAAMC,aAAaH,QAAQI,OAAO,CAACC,WAAW,CAACJ,eAAe;IAE9D,IAAI,CAACE,YAAY;QACf,MAAM,IAAIL,SACR,CAAC,oDAAoD,EAAEG,eAAe,kBAAkB,CAAC;IAE7F;IAEA,IAAIC,UAAU;QACZ,MAAMI,QAAQN,QAAQE,QAAQ,CAACD,eAAe;QAE9C,IAAI,CAACK,OAAO;YACV,MAAM,IAAIR,SACR,CAAC,kEAAkE,EAAEG,eAAe,kBAAkB,CAAC;QAE3G;QAEA,OAAO;YAAEM,kBAAkBJ,WAAWK,MAAM;YAAEC,cAAcN,WAAWM,YAAY;YAAEH;QAAM;IAC7F;IAEA,MAAMA,QAAQN,QAAQK,WAAW,CAACJ,eAAe;IAEjD,IAAI,CAACK,OAAO;QACV,MAAM,IAAIR,SACR,CAAC,0DAA0D,EAAEG,eAAe,kBAAkB,CAAC;IAEnG;IAEA,OAAO;QAAEM,kBAAkBJ,WAAWK,MAAM;QAAEC,cAAcN,WAAWM,YAAY;QAAEH;IAAM;AAC7F,EAAC;AAkBD,OAAO,MAAMI,YAAuB,CAAC,EAAEV,OAAO,EAAEW,UAAU,EAAET,WAAW,KAAK,EAAE;IAC5E,MAAMU,eAAeZ,QAAQI,OAAO,CAACI,MAAM,CAACK,OAAO,CAACC,IAAI,CAAC,CAACC,OAASA,KAAKC,IAAI,KAAKL;IAEjF,IAAI,CAACC,cAAc;QACjB,MAAM,IAAId,SACR,CAAC,gDAAgD,EAAEa,WAAW,kBAAkB,CAAC;IAErF;IAEA,IAAIT,UAAU;QACZ,MAAMI,QAAQN,QAAQE,QAAQ,CAACS,WAAW;QAE1C,IAAI,CAACL,OAAO;YACV,MAAM,IAAIR,SACR,CAAC,8DAA8D,EAAEa,WAAW,kBAAkB,CAAC;QAEnG;QAEA,OAAO;YAAEC;YAAcN;QAAM;IAC/B;IAEA,OAAO;QAAEM;QAAcN,OAAON,QAAQa,OAAO;IAAC;AAChD,EAAC"}