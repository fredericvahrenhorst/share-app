{"version":3,"file":"index.js","names":["useModal","qs","React","toast","fieldReducer","useConfig","useLocale","useServerFunctions","useTranslation","useUploadHandlers","hasSavePermission","getHasSavePermission","LoadingOverlay","useLoadingOverlay","useBulkUpload","createFormData","formsManagementReducer","Context","createContext","activeIndex","addFiles","Promise","resolve","bulkUpdateForm","collectionSlug","docPermissions","undefined","documentSlots","forms","getFormDataRef","current","hasPublishPermission","hasSubmitted","isInitializing","removeFile","saveAllDocs","setActiveIndex","setFormTotalErrorCount","totalErrorCount","updateUploadEdits","initialState","FormsManagerProvider","children","config","routes","api","serverURL","code","i18n","t","getDocumentSlots","getFormState","getUploadHandler","setDocumentSlots","useState","setHasSubmitted","setDocPermissions","setHasSavePermission","setHasPublishPermission","hasInitializedState","setHasInitializedState","hasInitializedDocPermissions","setHasInitializedDocPermissions","setIsInitializing","state","dispatch","useReducer","formsRef","useRef","toggleLoadingOverlay","closeModal","drawerSlug","initialFiles","onSuccess","setInitialFiles","isUploading","setIsUploading","loadingText","setLoadingText","hasInitializedWithFiles","initialStateRef","actionURL","initializeSharedDocPermissions","useCallback","params","locale","docAccessURL","res","fetch","stringify","credentials","headers","language","method","json","publishedAccessJSON","body","JSON","_status","then","isEditing","update","initializeSharedFormState","abortController","signal","abort","formStateWithoutFiles","docPreferences","fields","operation","renderAllFields","schemaPath","skipValidation","_err","index","currentFormsData","type","map","form","i","errorCount","formID","formState","uploadEdits","files","length","isLoading","key","count","overrides","currentForms","newDocs","total","actionURLWithParams","addQueryPrefix","req","status","doc","push","fieldErrors","nonFieldErrors","errors","reduce","fieldErrs","nonFieldErrs","err","newFieldErrs","newNonFieldErrs","message","Array","isArray","data","forEach","dataError","path","error","_","remainingForms","successCount","Math","max","success","acc","updatedFields","afterStateUpdate","Object","entries","value","newFormErrorCount","values","valid","resetUploadEdits","useEffect","_jsxs","_jsx","animationDuration","overlayType","show","useFormsManager","use"],"sources":["../../../../src/elements/BulkUpload/FormsManager/index.tsx"],"sourcesContent":["'use client'\n\nimport type {\n  Data,\n  DocumentSlots,\n  FormState,\n  SanitizedDocumentPermissions,\n  UploadEdits,\n} from 'payload'\n\nimport { useModal } from '@faceless-ui/modal'\nimport * as qs from 'qs-esm'\nimport React from 'react'\nimport { toast } from 'sonner'\n\nimport type { State } from './reducer.js'\n\nimport { fieldReducer } from '../../../forms/Form/fieldReducer.js'\nimport { useConfig } from '../../../providers/Config/index.js'\nimport { useLocale } from '../../../providers/Locale/index.js'\nimport { useServerFunctions } from '../../../providers/ServerFunctions/index.js'\nimport { useTranslation } from '../../../providers/Translation/index.js'\nimport { useUploadHandlers } from '../../../providers/UploadHandlers/index.js'\nimport { hasSavePermission as getHasSavePermission } from '../../../utilities/hasSavePermission.js'\nimport { LoadingOverlay } from '../../Loading/index.js'\nimport { useLoadingOverlay } from '../../LoadingOverlay/index.js'\nimport { useBulkUpload } from '../index.js'\nimport { createFormData } from './createFormData.js'\nimport { formsManagementReducer } from './reducer.js'\n\ntype FormsManagerContext = {\n  readonly activeIndex: State['activeIndex']\n  readonly addFiles: (filelist: FileList) => Promise<void>\n  readonly bulkUpdateForm: (\n    updatedFields: Record<string, unknown>,\n    afterStateUpdate?: () => void,\n  ) => Promise<void>\n  readonly collectionSlug: string\n  readonly docPermissions?: SanitizedDocumentPermissions\n  readonly documentSlots: DocumentSlots\n  readonly forms: State['forms']\n  getFormDataRef: React.RefObject<() => Data>\n  readonly hasPublishPermission: boolean\n  readonly hasSavePermission: boolean\n  readonly hasSubmitted: boolean\n  readonly isInitializing: boolean\n  readonly removeFile: (index: number) => void\n  readonly resetUploadEdits?: () => void\n  readonly saveAllDocs: ({ overrides }?: { overrides?: Record<string, unknown> }) => Promise<void>\n  readonly setActiveIndex: (index: number) => void\n  readonly setFormTotalErrorCount: ({\n    errorCount,\n    index,\n  }: {\n    errorCount: number\n    index: number\n  }) => void\n  readonly totalErrorCount?: number\n  readonly updateUploadEdits: (args: UploadEdits) => void\n}\n\nconst Context = React.createContext<FormsManagerContext>({\n  activeIndex: 0,\n  addFiles: () => Promise.resolve(),\n  bulkUpdateForm: () => null,\n  collectionSlug: '',\n  docPermissions: undefined,\n  documentSlots: {},\n  forms: [],\n  getFormDataRef: { current: () => ({}) },\n  hasPublishPermission: false,\n  hasSavePermission: false,\n  hasSubmitted: false,\n  isInitializing: false,\n  removeFile: () => {},\n  saveAllDocs: () => Promise.resolve(),\n  setActiveIndex: () => 0,\n  setFormTotalErrorCount: () => {},\n  totalErrorCount: 0,\n  updateUploadEdits: () => {},\n})\n\nconst initialState: State = {\n  activeIndex: 0,\n  forms: [],\n  totalErrorCount: 0,\n}\n\ntype FormsManagerProps = {\n  readonly children: React.ReactNode\n}\n\nexport function FormsManagerProvider({ children }: FormsManagerProps) {\n  const { config } = useConfig()\n  const {\n    routes: { api },\n    serverURL,\n  } = config\n  const { code } = useLocale()\n  const { i18n, t } = useTranslation()\n\n  const { getDocumentSlots, getFormState } = useServerFunctions()\n  const { getUploadHandler } = useUploadHandlers()\n\n  const [documentSlots, setDocumentSlots] = React.useState<DocumentSlots>({})\n  const [hasSubmitted, setHasSubmitted] = React.useState(false)\n  const [docPermissions, setDocPermissions] = React.useState<SanitizedDocumentPermissions>()\n  const [hasSavePermission, setHasSavePermission] = React.useState(false)\n  const [hasPublishPermission, setHasPublishPermission] = React.useState(false)\n  const [hasInitializedState, setHasInitializedState] = React.useState(false)\n  const [hasInitializedDocPermissions, setHasInitializedDocPermissions] = React.useState(false)\n  const [isInitializing, setIsInitializing] = React.useState(false)\n  const [state, dispatch] = React.useReducer(formsManagementReducer, initialState)\n  const { activeIndex, forms, totalErrorCount } = state\n\n  const formsRef = React.useRef(forms)\n  formsRef.current = forms\n\n  const { toggleLoadingOverlay } = useLoadingOverlay()\n  const { closeModal } = useModal()\n  const { collectionSlug, drawerSlug, initialFiles, onSuccess, setInitialFiles } = useBulkUpload()\n\n  const [isUploading, setIsUploading] = React.useState(false)\n  const [loadingText, setLoadingText] = React.useState('')\n\n  const hasInitializedWithFiles = React.useRef(false)\n  const initialStateRef = React.useRef<FormState>(null)\n  const getFormDataRef = React.useRef<() => Data>(() => ({}))\n\n  const actionURL = `${api}/${collectionSlug}`\n\n  const initializeSharedDocPermissions = React.useCallback(async () => {\n    const params = {\n      locale: code || undefined,\n    }\n\n    const docAccessURL = `/${collectionSlug}/access`\n    const res = await fetch(`${serverURL}${api}${docAccessURL}?${qs.stringify(params)}`, {\n      credentials: 'include',\n      headers: {\n        'Accept-Language': i18n.language,\n        'Content-Type': 'application/json',\n      },\n      method: 'post',\n    })\n\n    const json: SanitizedDocumentPermissions = await res.json()\n    const publishedAccessJSON = await fetch(\n      `${serverURL}${api}${docAccessURL}?${qs.stringify(params)}`,\n      {\n        body: JSON.stringify({\n          _status: 'published',\n        }),\n        credentials: 'include',\n        headers: {\n          'Accept-Language': i18n.language,\n          'Content-Type': 'application/json',\n        },\n        method: 'POST',\n      },\n    ).then((res) => res.json())\n\n    setDocPermissions(json)\n\n    setHasSavePermission(\n      getHasSavePermission({\n        collectionSlug,\n        docPermissions: json,\n        isEditing: false,\n      }),\n    )\n\n    setHasPublishPermission(publishedAccessJSON?.update)\n    setHasInitializedDocPermissions(true)\n  }, [api, code, collectionSlug, i18n.language, serverURL])\n\n  const initializeSharedFormState = React.useCallback(\n    async (abortController?: AbortController) => {\n      if (abortController?.signal) {\n        abortController.abort('aborting previous fetch for initial form state without files')\n      }\n\n      // FETCH AND SET THE DOCUMENT SLOTS HERE!\n      const documentSlots = await getDocumentSlots({ collectionSlug })\n      setDocumentSlots(documentSlots)\n\n      try {\n        const { state: formStateWithoutFiles } = await getFormState({\n          collectionSlug,\n          docPermissions,\n          docPreferences: { fields: {} },\n          locale: code,\n          operation: 'create',\n          renderAllFields: true,\n          schemaPath: collectionSlug,\n          skipValidation: true,\n        })\n        initialStateRef.current = formStateWithoutFiles\n        setHasInitializedState(true)\n      } catch (_err) {\n        // swallow error\n      }\n    },\n    [getDocumentSlots, collectionSlug, getFormState, docPermissions, code],\n  )\n\n  const setActiveIndex: FormsManagerContext['setActiveIndex'] = React.useCallback(\n    (index: number) => {\n      const currentFormsData = getFormDataRef.current()\n      dispatch({\n        type: 'REPLACE',\n        state: {\n          activeIndex: index,\n          forms: forms.map((form, i) => {\n            if (i === activeIndex) {\n              return {\n                errorCount: form.errorCount,\n                formID: form.formID,\n                formState: currentFormsData,\n                uploadEdits: form.uploadEdits,\n              }\n            }\n            return form\n          }),\n        },\n      })\n    },\n    [forms, activeIndex],\n  )\n\n  const addFiles = React.useCallback(\n    async (files: FileList) => {\n      if (forms.length) {\n        // save the state of the current form before adding new files\n        dispatch({\n          type: 'UPDATE_FORM',\n          errorCount: forms[activeIndex].errorCount,\n          formState: getFormDataRef.current(),\n          index: activeIndex,\n        })\n      }\n\n      toggleLoadingOverlay({ isLoading: true, key: 'addingDocs' })\n      if (!hasInitializedState) {\n        await initializeSharedFormState()\n      }\n      dispatch({ type: 'ADD_FORMS', files, initialState: initialStateRef.current })\n      toggleLoadingOverlay({ isLoading: false, key: 'addingDocs' })\n    },\n    [initializeSharedFormState, hasInitializedState, toggleLoadingOverlay, activeIndex, forms],\n  )\n\n  const removeFile: FormsManagerContext['removeFile'] = React.useCallback((index) => {\n    dispatch({ type: 'REMOVE_FORM', index })\n  }, [])\n\n  const setFormTotalErrorCount: FormsManagerContext['setFormTotalErrorCount'] = React.useCallback(\n    ({ errorCount, index }) => {\n      dispatch({\n        type: 'UPDATE_ERROR_COUNT',\n        count: errorCount,\n        index,\n      })\n    },\n    [],\n  )\n\n  const saveAllDocs: FormsManagerContext['saveAllDocs'] = React.useCallback(\n    async ({ overrides } = {}) => {\n      const currentFormsData = getFormDataRef.current()\n      const currentForms = [...forms]\n      currentForms[activeIndex] = {\n        errorCount: currentForms[activeIndex].errorCount,\n        formID: currentForms[activeIndex].formID,\n        formState: currentFormsData,\n        uploadEdits: currentForms[activeIndex].uploadEdits,\n      }\n      const newDocs = []\n\n      setIsUploading(true)\n\n      for (let i = 0; i < currentForms.length; i++) {\n        try {\n          const form = currentForms[i]\n\n          setLoadingText(t('general:uploadingBulk', { current: i + 1, total: currentForms.length }))\n\n          const actionURLWithParams = `${actionURL}${qs.stringify(\n            {\n              uploadEdits: form?.uploadEdits || undefined,\n            },\n            {\n              addQueryPrefix: true,\n            },\n          )}`\n\n          const req = await fetch(actionURLWithParams, {\n            body: await createFormData(\n              form.formState,\n              overrides,\n              collectionSlug,\n              getUploadHandler({ collectionSlug }),\n            ),\n            method: 'POST',\n          })\n\n          const json = await req.json()\n\n          if (req.status === 201 && json?.doc) {\n            newDocs.push(json.doc)\n          }\n\n          // should expose some sort of helper for this\n          const [fieldErrors, nonFieldErrors] = (json?.errors || []).reduce(\n            ([fieldErrs, nonFieldErrs], err) => {\n              const newFieldErrs: any[] = []\n              const newNonFieldErrs: any[] = []\n\n              if (err?.message) {\n                newNonFieldErrs.push(err)\n              }\n\n              if (Array.isArray(err?.data?.errors)) {\n                err.data?.errors.forEach((dataError) => {\n                  if (dataError?.path) {\n                    newFieldErrs.push(dataError)\n                  } else {\n                    newNonFieldErrs.push(dataError)\n                  }\n                })\n              }\n\n              return [\n                [...fieldErrs, ...newFieldErrs],\n                [...nonFieldErrs, ...newNonFieldErrs],\n              ]\n            },\n            [[], []],\n          )\n\n          currentForms[i] = {\n            errorCount: fieldErrors.length,\n            formID: currentForms[i].formID,\n            formState: fieldReducer(currentForms[i].formState, {\n              type: 'ADD_SERVER_ERRORS',\n              errors: fieldErrors,\n            }),\n          }\n\n          if (req.status === 413 || req.status === 400) {\n            // file too large\n            currentForms[i] = {\n              ...currentForms[i],\n              errorCount: currentForms[i].errorCount + 1,\n            }\n\n            toast.error(nonFieldErrors[0]?.message)\n          }\n        } catch (_) {\n          // swallow\n        }\n      }\n\n      setHasSubmitted(true)\n      setLoadingText('')\n      setIsUploading(false)\n\n      const remainingForms = []\n\n      currentForms.forEach(({ errorCount }, i) => {\n        if (errorCount) {\n          remainingForms.push(currentForms[i])\n        }\n      })\n\n      const successCount = Math.max(0, currentForms.length - remainingForms.length)\n      const errorCount = currentForms.length - successCount\n\n      if (successCount) {\n        toast.success(`Successfully saved ${successCount} files`)\n\n        if (typeof onSuccess === 'function') {\n          onSuccess(newDocs, errorCount)\n        }\n      }\n\n      if (errorCount) {\n        toast.error(`Failed to save ${errorCount} files`)\n      } else {\n        closeModal(drawerSlug)\n      }\n\n      dispatch({\n        type: 'REPLACE',\n        state: {\n          activeIndex: 0,\n          forms: remainingForms,\n          totalErrorCount: remainingForms.reduce((acc, { errorCount }) => acc + errorCount, 0),\n        },\n      })\n\n      if (remainingForms.length === 0) {\n        setInitialFiles(undefined)\n      }\n    },\n    [\n      setInitialFiles,\n      actionURL,\n      collectionSlug,\n      getUploadHandler,\n      t,\n      forms,\n      activeIndex,\n      closeModal,\n      drawerSlug,\n      onSuccess,\n    ],\n  )\n\n  const bulkUpdateForm = React.useCallback(\n    async (updatedFields: Record<string, unknown>, afterStateUpdate?: () => void) => {\n      for (let i = 0; i < forms.length; i++) {\n        Object.entries(updatedFields).forEach(([path, value]) => {\n          if (forms[i].formState[path]) {\n            forms[i].formState[path].value = value\n\n            dispatch({\n              type: 'UPDATE_FORM',\n              errorCount: forms[i].errorCount,\n              formState: forms[i].formState,\n              index: i,\n            })\n          }\n        })\n\n        if (typeof afterStateUpdate === 'function') {\n          afterStateUpdate()\n        }\n\n        if (hasSubmitted) {\n          const { state } = await getFormState({\n            collectionSlug,\n            docPermissions,\n            docPreferences: null,\n            formState: forms[i].formState,\n            operation: 'create',\n            schemaPath: collectionSlug,\n          })\n\n          const newFormErrorCount = Object.values(state).reduce(\n            (acc, value) => (value?.valid === false ? acc + 1 : acc),\n            0,\n          )\n\n          dispatch({\n            type: 'UPDATE_FORM',\n            errorCount: newFormErrorCount,\n            formState: state,\n            index: i,\n          })\n        }\n      }\n    },\n    [collectionSlug, docPermissions, forms, getFormState, hasSubmitted],\n  )\n\n  const updateUploadEdits = React.useCallback<FormsManagerContext['updateUploadEdits']>(\n    (uploadEdits) => {\n      dispatch({\n        type: 'UPDATE_FORM',\n        errorCount: forms[activeIndex].errorCount,\n        formState: forms[activeIndex].formState,\n        index: activeIndex,\n        uploadEdits,\n      })\n    },\n    [activeIndex, forms],\n  )\n\n  const resetUploadEdits = React.useCallback<FormsManagerContext['resetUploadEdits']>(() => {\n    dispatch({\n      type: 'REPLACE',\n      state: {\n        forms: forms.map((form) => ({\n          ...form,\n          uploadEdits: {},\n        })),\n      },\n    })\n  }, [forms])\n\n  React.useEffect(() => {\n    if (!collectionSlug) {\n      return\n    }\n    if (!hasInitializedState) {\n      void initializeSharedFormState()\n    }\n\n    if (!hasInitializedDocPermissions) {\n      void initializeSharedDocPermissions()\n    }\n\n    if (initialFiles) {\n      if (!hasInitializedState || !hasInitializedDocPermissions) {\n        setIsInitializing(true)\n      } else {\n        setIsInitializing(false)\n      }\n    }\n\n    if (hasInitializedState && initialFiles && !hasInitializedWithFiles.current) {\n      void addFiles(initialFiles)\n      hasInitializedWithFiles.current = true\n    }\n    return\n  }, [\n    addFiles,\n    initialFiles,\n    initializeSharedFormState,\n    initializeSharedDocPermissions,\n    collectionSlug,\n    hasInitializedState,\n    hasInitializedDocPermissions,\n  ])\n\n  return (\n    <Context\n      value={{\n        activeIndex: state.activeIndex,\n        addFiles,\n        bulkUpdateForm,\n        collectionSlug,\n        docPermissions,\n        documentSlots,\n        forms,\n        getFormDataRef,\n        hasPublishPermission,\n        hasSavePermission,\n        hasSubmitted,\n        isInitializing,\n        removeFile,\n        resetUploadEdits,\n        saveAllDocs,\n        setActiveIndex,\n        setFormTotalErrorCount,\n        totalErrorCount,\n        updateUploadEdits,\n      }}\n    >\n      {isUploading && (\n        <LoadingOverlay\n          animationDuration=\"250ms\"\n          loadingText={loadingText}\n          overlayType=\"fullscreen\"\n          show\n        />\n      )}\n      {children}\n    </Context>\n  )\n}\n\nexport function useFormsManager() {\n  return React.use(Context)\n}\n"],"mappings":"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","ignoreList":[]}