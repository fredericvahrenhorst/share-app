{"version":3,"file":"index.js","names":["c","_c","useDndMonitor","getTranslation","useRouter","formatAdminURL","React","Fragment","DroppableBreadcrumb","ColoredFolderIcon","CurrentFolderActions","DragOverlaySelection","SortByPill","ToggleViewButtons","Gutter","ListFolderPills","ListHeader","ListBulkUploadButton","ListCreateNewDocInFolderButton","NoListResults","SearchBar","useStepNav","useConfig","useEditDepth","FolderProvider","useFolder","usePreferences","useRouteCache","useRouteTransition","useTranslation","useWindowInfo","ListSelection","baseClass","DefaultCollectionFolderView","allCollectionFolderSlugs","folderCollectionSlugs","allowCreateCollectionSlugs","baseFolderPath","breadcrumbs","documents","folderFieldName","folderID","FolderResultsComponent","search","sort","subfolders","restOfProps","_jsx","CollectionFolderViewInContext","props","$","AfterFolderList","AfterFolderListTable","BeforeFolderList","BeforeFolderListTable","collectionSlug","Description","disableBulkDelete","disableBulkEdit","viewPreference","config","getEntityConfig","i18n","t","drawerDepth","setStepNav","setPreference","folderCollectionConfig","folderCollectionSlug","getSelectedItems","lastSelectedIndex","moveToFolder","refineFolderData","selectedItemKeys","setIsDragging","router","startRouteTransition","clearRouteCache","collectionConfig","labels","upload","isUploadCollection","Boolean","isBulkUploadEnabled","bulkUpload","breakpoints","t0","s","smallBreak","t1","event","over","data","current","type","itemsToMove","toFolderID","id","t2","error","console","onDragEnd","handleSetViewType","view","plural","t3","folders","routes","admin","useEffect","length","label","_jsxs","className","children","filter","join","onClick","push","adminRoute","path","slug","map","crumb","crumbIndex","name","totalDocsAndSubfolders","t4","search_0","query","updateURL","DndEventListener","Actions","viewType","AfterListHeaderContent","title","TitleActions","buttonLabel","collectionSlugs","onCreateSuccess","slugPrefix","hasCreatePermission","includes","activeView","setActiveView","onSearchChange","searchQueryParam","singular","toLowerCase","Message","allItems","lastSelected","selectedCount","size","onDragCancel","onDragStart"],"sources":["../../../src/views/CollectionFolder/index.tsx"],"sourcesContent":["'use client'\n\nimport type { DragEndEvent } from '@dnd-kit/core'\nimport type { FolderListViewClientProps } from 'payload'\n\nimport { useDndMonitor } from '@dnd-kit/core'\nimport { getTranslation } from '@payloadcms/translations'\nimport { useRouter } from 'next/navigation.js'\nimport { formatAdminURL } from 'payload/shared'\nimport React, { Fragment } from 'react'\n\nimport { DroppableBreadcrumb } from '../../elements/FolderView/Breadcrumbs/index.js'\nimport { ColoredFolderIcon } from '../../elements/FolderView/ColoredFolderIcon/index.js'\nimport { CurrentFolderActions } from '../../elements/FolderView/CurrentFolderActions/index.js'\nimport { DragOverlaySelection } from '../../elements/FolderView/DragOverlaySelection/index.js'\nimport { SortByPill } from '../../elements/FolderView/SortByPill/index.js'\nimport { ToggleViewButtons } from '../../elements/FolderView/ToggleViewButtons/index.js'\nimport { Gutter } from '../../elements/Gutter/index.js'\nimport { ListFolderPills } from '../../elements/ListFolderPills/index.js'\nimport { ListHeader } from '../../elements/ListHeader/index.js'\nimport {\n  ListBulkUploadButton,\n  ListCreateNewDocInFolderButton,\n} from '../../elements/ListHeader/TitleActions/index.js'\nimport { NoListResults } from '../../elements/NoListResults/index.js'\nimport { SearchBar } from '../../elements/SearchBar/index.js'\nimport { useStepNav } from '../../elements/StepNav/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useEditDepth } from '../../providers/EditDepth/index.js'\nimport { FolderProvider, useFolder } from '../../providers/Folders/index.js'\nimport { usePreferences } from '../../providers/Preferences/index.js'\nimport { useRouteCache } from '../../providers/RouteCache/index.js'\nimport { useRouteTransition } from '../../providers/RouteTransition/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { useWindowInfo } from '../../providers/WindowInfo/index.js'\nimport { ListSelection } from './ListSelection/index.js'\nimport './index.scss'\n\nconst baseClass = 'collection-folder-list'\n\nexport function DefaultCollectionFolderView({\n  allCollectionFolderSlugs: folderCollectionSlugs,\n  allowCreateCollectionSlugs,\n  baseFolderPath,\n  breadcrumbs,\n  documents,\n  folderFieldName,\n  folderID,\n  FolderResultsComponent,\n  search,\n  sort,\n  subfolders,\n  ...restOfProps\n}: FolderListViewClientProps) {\n  return (\n    <FolderProvider\n      allCollectionFolderSlugs={folderCollectionSlugs}\n      allowCreateCollectionSlugs={allowCreateCollectionSlugs}\n      baseFolderPath={baseFolderPath}\n      breadcrumbs={breadcrumbs}\n      documents={documents}\n      folderFieldName={folderFieldName}\n      folderID={folderID}\n      FolderResultsComponent={FolderResultsComponent}\n      search={search}\n      sort={sort}\n      subfolders={subfolders}\n    >\n      <CollectionFolderViewInContext {...restOfProps} />\n    </FolderProvider>\n  )\n}\n\ntype CollectionFolderViewInContextProps = Omit<\n  FolderListViewClientProps,\n  | 'allCollectionFolderSlugs'\n  | 'allowCreateCollectionSlugs'\n  | 'baseFolderPath'\n  | 'breadcrumbs'\n  | 'documents'\n  | 'folderFieldName'\n  | 'folderID'\n  | 'FolderResultsComponent'\n  | 'subfolders'\n>\n\nfunction CollectionFolderViewInContext(props: CollectionFolderViewInContextProps) {\n  const {\n    AfterFolderList,\n    AfterFolderListTable,\n    BeforeFolderList,\n    BeforeFolderListTable,\n    collectionSlug,\n    Description,\n    disableBulkDelete,\n    disableBulkEdit,\n    search,\n    viewPreference,\n  } = props\n\n  const { config, getEntityConfig } = useConfig()\n  const { i18n, t } = useTranslation()\n  const drawerDepth = useEditDepth()\n  const { setStepNav } = useStepNav()\n  const { setPreference } = usePreferences()\n  const {\n    allowCreateCollectionSlugs,\n    breadcrumbs,\n    documents,\n    folderCollectionConfig,\n    folderCollectionSlug,\n    FolderResultsComponent,\n    getSelectedItems,\n    lastSelectedIndex,\n    moveToFolder,\n    refineFolderData,\n    selectedItemKeys,\n    setIsDragging,\n    subfolders,\n  } = useFolder()\n\n  const router = useRouter()\n  const { startRouteTransition } = useRouteTransition()\n  const { clearRouteCache } = useRouteCache()\n\n  const collectionConfig = getEntityConfig({ collectionSlug })\n\n  const { labels, upload } = collectionConfig\n  const isUploadCollection = Boolean(upload)\n  const isBulkUploadEnabled = isUploadCollection && collectionConfig.upload.bulkUpload\n\n  const {\n    breakpoints: { s: smallBreak },\n  } = useWindowInfo()\n\n  const onDragEnd = React.useCallback(\n    async (event: DragEndEvent) => {\n      if (!event.over) {\n        return\n      }\n\n      if (event.over.data.current.type === 'folder' && 'id' in event.over.data.current) {\n        try {\n          await moveToFolder({\n            itemsToMove: getSelectedItems(),\n            toFolderID: event.over.data.current.id,\n          })\n        } catch (error) {\n          // eslint-disable-next-line no-console\n          console.error('Error moving items:', error)\n        }\n\n        clearRouteCache()\n      }\n    },\n    [moveToFolder, getSelectedItems, clearRouteCache],\n  )\n\n  const handleSetViewType = React.useCallback(\n    async (view: 'grid' | 'list') => {\n      await setPreference(`${collectionSlug}-collection-folder`, {\n        viewPreference: view,\n      })\n      clearRouteCache()\n    },\n    [collectionSlug, setPreference, clearRouteCache],\n  )\n\n  React.useEffect(() => {\n    if (!drawerDepth) {\n      setStepNav([\n        !breadcrumbs.length\n          ? {\n              label: (\n                <div className={`${baseClass}__step-nav-icon-label`} key=\"root\">\n                  <ColoredFolderIcon />\n                  {getTranslation(labels?.plural, i18n)}\n                </div>\n              ),\n            }\n          : {\n              label: (\n                <DroppableBreadcrumb\n                  className={[\n                    `${baseClass}__step-nav-droppable`,\n                    `${baseClass}__step-nav-icon-label`,\n                  ]\n                    .filter(Boolean)\n                    .join(' ')}\n                  id={null}\n                  key=\"root\"\n                  onClick={() => {\n                    startRouteTransition(() => {\n                      if (config.folders) {\n                        router.push(\n                          formatAdminURL({\n                            adminRoute: config.routes.admin,\n                            path: `/collections/${collectionSlug}/${config.folders.slug}`,\n                          }),\n                        )\n                      }\n                    })\n                  }}\n                >\n                  <ColoredFolderIcon />\n                  {getTranslation(labels?.plural, i18n)}\n                </DroppableBreadcrumb>\n              ),\n            },\n        ...breadcrumbs.map((crumb, crumbIndex) => {\n          return {\n            label:\n              crumbIndex === breadcrumbs.length - 1 ? (\n                crumb.name\n              ) : (\n                <DroppableBreadcrumb\n                  className={`${baseClass}__step-nav-droppable`}\n                  id={crumb.id}\n                  key={crumb.id}\n                  onClick={() => {\n                    startRouteTransition(() => {\n                      if (config.folders) {\n                        router.push(\n                          formatAdminURL({\n                            adminRoute: config.routes.admin,\n                            path: `/collections/${collectionSlug}/${config.folders.slug}/${crumb.id}`,\n                          }),\n                        )\n                      }\n                    })\n                  }}\n                >\n                  {crumb.name}\n                </DroppableBreadcrumb>\n              ),\n          }\n        }),\n      ])\n    }\n  }, [\n    breadcrumbs,\n    collectionSlug,\n    config.folders,\n    config.routes.admin,\n    drawerDepth,\n    i18n,\n    labels?.plural,\n    router,\n    setStepNav,\n    startRouteTransition,\n  ])\n\n  const totalDocsAndSubfolders = documents.length + subfolders.length\n\n  return (\n    <Fragment>\n      <DndEventListener onDragEnd={onDragEnd} setIsDragging={setIsDragging} />\n\n      <div className={`${baseClass} ${baseClass}--${collectionSlug}`}>\n        {BeforeFolderList}\n        <Gutter className={`${baseClass}__wrap`}>\n          <ListHeader\n            Actions={[\n              !smallBreak && (\n                <ListSelection\n                  disableBulkDelete={disableBulkDelete}\n                  disableBulkEdit={collectionConfig.disableBulkEdit ?? disableBulkEdit}\n                  key=\"list-selection\"\n                />\n              ),\n              config.folders && collectionConfig.folders && (\n                <ListFolderPills\n                  collectionConfig={collectionConfig}\n                  folderCollectionSlug={folderCollectionSlug}\n                  key=\"list-header-buttons\"\n                  viewType=\"folders\"\n                />\n              ),\n            ].filter(Boolean)}\n            AfterListHeaderContent={Description}\n            title={getTranslation(labels?.plural, i18n)}\n            TitleActions={[\n              allowCreateCollectionSlugs.length && (\n                <ListCreateNewDocInFolderButton\n                  buttonLabel={t('general:createNew')}\n                  collectionSlugs={allowCreateCollectionSlugs}\n                  key=\"create-new-button\"\n                  onCreateSuccess={clearRouteCache}\n                  slugPrefix=\"create-document--header-pill\"\n                />\n              ),\n              <ListBulkUploadButton\n                collectionSlug={collectionSlug}\n                hasCreatePermission={allowCreateCollectionSlugs.includes(collectionSlug)}\n                isBulkUploadEnabled={isBulkUploadEnabled}\n                key=\"bulk-upload-button\"\n              />,\n            ].filter(Boolean)}\n          />\n          <SearchBar\n            Actions={[\n              <SortByPill key=\"sort-by-pill\" />,\n              <ToggleViewButtons\n                activeView={viewPreference}\n                key=\"toggle-view-buttons\"\n                setActiveView={handleSetViewType}\n              />,\n              <CurrentFolderActions key=\"current-folder-actions\" />,\n            ].filter(Boolean)}\n            label={t('general:searchBy', {\n              label: t('general:name'),\n            })}\n            onSearchChange={(search) => refineFolderData({ query: { search }, updateURL: true })}\n            searchQueryParam={search}\n          />\n          {BeforeFolderListTable}\n          {totalDocsAndSubfolders > 0 && FolderResultsComponent}\n          {totalDocsAndSubfolders === 0 && (\n            <NoListResults\n              Actions={[\n                allowCreateCollectionSlugs.includes(folderCollectionSlug) && (\n                  <ListCreateNewDocInFolderButton\n                    buttonLabel={`${t('general:create')} ${getTranslation(folderCollectionConfig.labels?.singular, i18n).toLowerCase()}`}\n                    collectionSlugs={[folderCollectionConfig.slug]}\n                    key=\"create-folder\"\n                    onCreateSuccess={clearRouteCache}\n                    slugPrefix=\"create-folder--no-results\"\n                  />\n                ),\n                allowCreateCollectionSlugs.includes(collectionSlug) && (\n                  <ListCreateNewDocInFolderButton\n                    buttonLabel={`${t('general:create')} ${t('general:document').toLowerCase()}`}\n                    collectionSlugs={[collectionSlug]}\n                    key=\"create-document\"\n                    onCreateSuccess={clearRouteCache}\n                    slugPrefix=\"create-document--no-results\"\n                  />\n                ),\n              ].filter(Boolean)}\n              Message={\n                <p>\n                  {i18n.t('general:noResults', {\n                    label: `${getTranslation(labels?.plural, i18n)} ${t('general:or').toLowerCase()} ${getTranslation(\n                      folderCollectionConfig.labels?.plural,\n                      i18n,\n                    )}`,\n                  })}\n                </p>\n              }\n            />\n          )}\n          {AfterFolderListTable}\n        </Gutter>\n        {AfterFolderList}\n      </div>\n      <DragOverlaySelection\n        allItems={[...subfolders, ...documents]}\n        lastSelected={lastSelectedIndex}\n        selectedCount={selectedItemKeys.size}\n      />\n    </Fragment>\n  )\n}\n\nfunction DndEventListener({ onDragEnd, setIsDragging }) {\n  useDndMonitor({\n    onDragCancel() {\n      setIsDragging(false)\n    },\n    onDragEnd(event) {\n      setIsDragging(false)\n      onDragEnd(event)\n    },\n    onDragStart() {\n      setIsDragging(true)\n    },\n  })\n\n  return null\n}\n"],"mappings":"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","ignoreList":[]}