export function getShiftSelection({
  selectFromIndex,
  selectToIndex
}) {
  if (selectFromIndex === null || selectFromIndex === undefined) {
    return new Set([selectToIndex]);
  }
  const start = Math.min(selectToIndex, selectFromIndex);
  const end = Math.max(selectToIndex, selectFromIndex);
  const rangeSelection = new Set(Array.from({
    length: Math.max(start, end) + 1
  }, (_, i) => i).filter(index => {
    return index >= start && index <= end;
  }));
  return rangeSelection;
}
export function getMetaSelection({
  currentSelection,
  toggleIndex
}) {
  const newSelection = new Set(currentSelection);
  if (newSelection.has(toggleIndex)) {
    newSelection.delete(toggleIndex);
  } else {
    newSelection.add(toggleIndex);
  }
  return newSelection;
}
export function groupItemIDsByRelation(items) {
  return items.reduce((acc, item) => {
    if (!acc[item.relationTo]) {
      acc[item.relationTo] = [];
    }
    acc[item.relationTo].push(item.value.id);
    return acc;
  }, {});
}
//# sourceMappingURL=selection.js.map