{"version":3,"file":"useControllableState.js","names":["useCallback","useEffect","useRef","useState","useControllableState","propValue","defaultValue","localValue","setLocalValue","initialRenderRef","current","setValue","value"],"sources":["../../src/hooks/useControllableState.ts"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react'\n\n/**\n * A hook for managing state that can be controlled by props but also overridden locally.\n * Props always take precedence if they change, but local state can override them temporarily.\n */\nexport function useControllableState<T>(\n  propValue: T,\n  defaultValue?: T,\n): [T, (value: ((prev: T) => T) | T) => void] {\n  const [localValue, setLocalValue] = useState<T>(propValue ?? defaultValue)\n  const initialRenderRef = useRef(true)\n\n  useEffect(() => {\n    if (initialRenderRef.current) {\n      initialRenderRef.current = false\n      return\n    }\n\n    setLocalValue(propValue)\n  }, [propValue])\n\n  const setValue = useCallback((value: ((prev: T) => T) | T) => {\n    setLocalValue(value)\n  }, [])\n\n  return [localValue, setValue]\n}\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,QAAQ;AAEzD;;;;AAIA,OAAO,SAASC,qBACdC,SAAY,EACZC,YAAgB;EAEhB,MAAM,CAACC,UAAA,EAAYC,aAAA,CAAc,GAAGL,QAAA,CAAYE,SAAA,IAAaC,YAAA;EAC7D,MAAMG,gBAAA,GAAmBP,MAAA,CAAO;EAEhCD,SAAA,CAAU;IACR,IAAIQ,gBAAA,CAAiBC,OAAO,EAAE;MAC5BD,gBAAA,CAAiBC,OAAO,GAAG;MAC3B;IACF;IAEAF,aAAA,CAAcH,SAAA;EAChB,GAAG,CAACA,SAAA,CAAU;EAEd,MAAMM,QAAA,GAAWX,WAAA,CAAaY,KAAA;IAC5BJ,aAAA,CAAcI,KAAA;EAChB,GAAG,EAAE;EAEL,OAAO,CAACL,UAAA,EAAYI,QAAA,CAAS;AAC/B","ignoreList":[]}