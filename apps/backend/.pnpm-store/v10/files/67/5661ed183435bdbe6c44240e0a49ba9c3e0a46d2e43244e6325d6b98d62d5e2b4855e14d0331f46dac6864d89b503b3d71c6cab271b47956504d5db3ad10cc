{"version":3,"file":"Input.js","names":["dequal","formatAdminURL","wordBoundariesRegex","qs","React","useCallback","useEffect","useMemo","useReducer","useRef","useState","AddNewRelation","useDocumentDrawer","useListDrawer","ReactSelect","RenderCustomComponent","FieldDescription","FieldError","FieldLabel","useDebouncedCallback","useEffectEvent","useQueues","useAuth","useConfig","useLocale","useTranslation","sanitizeFilterOptionsQuery","fieldBaseClass","createRelationMap","findOptionsByValue","optionsReducer","MultiValueLabel","SingleValue","baseClass","RelationshipInput","props","AfterInput","allowCreate","allowEdit","appearance","BeforeInput","className","description","Description","Error","filterOptions","hasMany","initialValue","isSortable","label","Label","localized","maxResultsPerRequest","onChange","path","placeholder","readOnly","relationTo","required","showError","sortOptions","style","value","config","getEntityConfig","routes","api","serverURL","i18n","t","permissions","code","locale","currentlyOpenRelationship","setCurrentlyOpenRelationship","id","undefined","collectionSlug","hasReadPermission","lastFullyLoadedRelation","setLastFullyLoadedRelation","lastLoadedPage","setLastLoadedPage","errorLoading","setErrorLoading","search","setSearch","isLoading","setIsLoading","enableWordBoundarySearch","setEnableWordBoundarySearch","menuIsOpen","setMenuIsOpen","hasLoadedFirstPageRef","queueTask","options","dispatchOptions","valueRef","current","DocumentDrawer","isDrawerOpen","openDrawer","listDrawerFilterOptions","newFilterOptions","valuesByRelation","reduce","acc","val","push","Array","isArray","forEach","relation","not_in","ListDrawer","closeDrawer","closeListDrawer","isListDrawerOpen","openListDrawer","collectionSlugs","onListSelect","doc","openDrawerWhenRelationChanges","updateResults","hasManyArg","lastFullyLoadedRelationArg","lastLoadedPageArg","onSuccess","searchArg","sort","valueArg","lastFullyLoadedRelationToUse","relations","relationsToFetch","slice","resultsFetched","relationMap","priorRelation","relationFilterOption","lastLoadedPageToUse","indexOf","Promise","resolve","collection","fieldToSearch","admin","useAsTitle","fieldToSort","defaultSort","query","depth","draft","limit","page","select","where","and","like","response","fetch","body","stringify","credentials","headers","language","method","ok","data","json","prevState","nextPage","docs","length","type","status","ids","updateSearch","updateResultsEffectEvent","handleInputChange","handleValueChange","Object","entries","idsToLoad","filter","find","optionGroup","option","in","onSave","args","collectionConfig","docID","currentValue","valuesToSet","map","slug","onDuplicate","concat","onDelete","filterOption","item","searchFilter","r","breakApartThreshold","labelString","String","indexOfSpace","test","onDocumentOpen","openInNewTab","docUrl","adminRoute","window","open","exemptValues","prevValue","isFirstRenderRef","isIdOnly","idOnly","valueToRender","_jsxs","Boolean","join","replace","_jsx","CustomComponent","Fallback","backspaceRemovesValue","components","DropdownIndicator","customProps","disableKeyDown","disableMouseDown","disabled","getOptionValue","isMulti","isSearchable","selected","onInputChange","newSearch","onMenuClose","onMenuOpen","setTimeout","onMenuScrollToBottom","enableRowSelections","onSelect"],"sources":["../../../src/fields/Relationship/Input.tsx"],"sourcesContent":["'use client'\nimport type { FilterOptionsResult, PaginatedDocs, ValueWithRelation, Where } from 'payload'\n\nimport { dequal } from 'dequal/lite'\nimport { formatAdminURL, wordBoundariesRegex } from 'payload/shared'\nimport * as qs from 'qs-esm'\nimport React, { useCallback, useEffect, useMemo, useReducer, useRef, useState } from 'react'\n\nimport type { DocumentDrawerProps } from '../../elements/DocumentDrawer/types.js'\nimport type { ListDrawerProps } from '../../elements/ListDrawer/types.js'\nimport type { ReactSelectAdapterProps } from '../../elements/ReactSelect/types.js'\nimport type { HasManyValueUnion, Option, RelationshipInputProps, UpdateResults } from './types.js'\n\nimport { AddNewRelation } from '../../elements/AddNewRelation/index.js'\nimport { useDocumentDrawer } from '../../elements/DocumentDrawer/index.js'\nimport { useListDrawer } from '../../elements/ListDrawer/index.js'\nimport { ReactSelect } from '../../elements/ReactSelect/index.js'\nimport { RenderCustomComponent } from '../../elements/RenderCustomComponent/index.js'\nimport { FieldDescription } from '../../fields/FieldDescription/index.js'\nimport { FieldError } from '../../fields/FieldError/index.js'\nimport { FieldLabel } from '../../fields/FieldLabel/index.js'\nimport { useDebouncedCallback } from '../../hooks/useDebouncedCallback.js'\nimport { useEffectEvent } from '../../hooks/useEffectEvent.js'\nimport { useQueues } from '../../hooks/useQueues.js'\nimport { useAuth } from '../../providers/Auth/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { sanitizeFilterOptionsQuery } from '../../utilities/sanitizeFilterOptionsQuery.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport { createRelationMap } from './createRelationMap.js'\nimport { findOptionsByValue } from './findOptionsByValue.js'\nimport { optionsReducer } from './optionsReducer.js'\nimport { MultiValueLabel } from './select-components/MultiValueLabel/index.js'\nimport './index.scss'\nimport { SingleValue } from './select-components/SingleValue/index.js'\n\nconst baseClass = 'relationship'\n\nexport const RelationshipInput: React.FC<RelationshipInputProps> = (props) => {\n  const {\n    AfterInput,\n    allowCreate = true,\n    allowEdit = true,\n    appearance = 'select',\n    BeforeInput,\n    className,\n    description,\n    Description,\n    Error,\n    filterOptions,\n    hasMany,\n    initialValue,\n    isSortable = true,\n    label,\n    Label,\n    localized,\n    maxResultsPerRequest = 10,\n    onChange,\n    path,\n    placeholder,\n    readOnly,\n    relationTo,\n    required,\n    showError,\n    sortOptions,\n    style,\n    value,\n  } = props\n\n  const { config, getEntityConfig } = useConfig()\n\n  const {\n    routes: { api },\n    serverURL,\n  } = config\n\n  const { i18n, t } = useTranslation()\n  const { permissions } = useAuth()\n  const { code: locale } = useLocale()\n\n  const [currentlyOpenRelationship, setCurrentlyOpenRelationship] = useState<\n    Parameters<ReactSelectAdapterProps['customProps']['onDocumentOpen']>[0]\n  >({\n    id: undefined,\n    collectionSlug: undefined,\n    hasReadPermission: false,\n  })\n\n  const [lastFullyLoadedRelation, setLastFullyLoadedRelation] = useState(-1)\n  const [lastLoadedPage, setLastLoadedPage] = useState<Record<string, number>>({})\n  const [errorLoading, setErrorLoading] = useState('')\n  const [search, setSearch] = useState('')\n  const [isLoading, setIsLoading] = useState(false)\n  const [enableWordBoundarySearch, setEnableWordBoundarySearch] = useState(false)\n  const [menuIsOpen, setMenuIsOpen] = useState(false)\n  const hasLoadedFirstPageRef = useRef(false)\n  const { queueTask } = useQueues()\n\n  const [options, dispatchOptions] = useReducer(optionsReducer, [])\n\n  const valueRef = useRef(value)\n  // the line below seems odd\n\n  valueRef.current = value\n\n  const [DocumentDrawer, , { isDrawerOpen, openDrawer }] = useDocumentDrawer({\n    id: currentlyOpenRelationship.id,\n    collectionSlug: currentlyOpenRelationship.collectionSlug,\n  })\n\n  // Filter selected values from displaying in the list drawer\n  const listDrawerFilterOptions = useMemo<FilterOptionsResult>(() => {\n    let newFilterOptions = filterOptions\n\n    if (value) {\n      const valuesByRelation = (hasMany === false ? [value] : value).reduce((acc, val) => {\n        if (!acc[val.relationTo]) {\n          acc[val.relationTo] = []\n        }\n        acc[val.relationTo].push(val.value)\n        return acc\n      }, {})\n\n      ;(Array.isArray(relationTo) ? relationTo : [relationTo]).forEach((relation) => {\n        newFilterOptions = {\n          ...(newFilterOptions || {}),\n          [relation]: {\n            ...(typeof filterOptions?.[relation] === 'object' ? filterOptions[relation] : {}),\n            ...(valuesByRelation[relation]\n              ? {\n                  id: {\n                    not_in: valuesByRelation[relation],\n                  },\n                }\n              : {}),\n          },\n        }\n      })\n    }\n\n    return newFilterOptions\n  }, [filterOptions, value, hasMany, relationTo])\n\n  const [\n    ListDrawer,\n    ,\n    { closeDrawer: closeListDrawer, isDrawerOpen: isListDrawerOpen, openDrawer: openListDrawer },\n  ] = useListDrawer({\n    collectionSlugs: relationTo,\n    filterOptions: listDrawerFilterOptions,\n  })\n\n  const onListSelect = useCallback<NonNullable<ListDrawerProps['onSelect']>>(\n    ({ collectionSlug, doc }) => {\n      if (hasMany) {\n        onChange([\n          ...(Array.isArray(value) ? value : []),\n          {\n            relationTo: collectionSlug,\n            value: doc.id,\n          },\n        ])\n      } else if (hasMany === false) {\n        onChange({\n          relationTo: collectionSlug,\n          value: doc.id,\n        })\n      }\n\n      closeListDrawer()\n    },\n    [hasMany, onChange, closeListDrawer, value],\n  )\n\n  const openDrawerWhenRelationChanges = useRef(false)\n\n  const updateResults: UpdateResults = useCallback(\n    ({\n      filterOptions,\n      hasMany: hasManyArg,\n      lastFullyLoadedRelation: lastFullyLoadedRelationArg,\n      lastLoadedPage: lastLoadedPageArg,\n      onSuccess,\n      search: searchArg,\n      sort,\n      value: valueArg,\n    }) => {\n      if (!permissions) {\n        return\n      }\n      queueTask(async () => {\n        const lastFullyLoadedRelationToUse =\n          typeof lastFullyLoadedRelationArg !== 'undefined' ? lastFullyLoadedRelationArg : -1\n\n        const relations = Array.isArray(relationTo) ? relationTo : [relationTo]\n        const relationsToFetch =\n          lastFullyLoadedRelationToUse === -1\n            ? relations\n            : relations.slice(lastFullyLoadedRelationToUse + 1)\n\n        let resultsFetched = 0\n        const relationMap = createRelationMap(\n          hasManyArg === true\n            ? {\n                hasMany: true,\n                relationTo,\n                value: valueArg,\n              }\n            : {\n                hasMany: false,\n                relationTo,\n                value: valueArg,\n              },\n        )\n\n        if (!errorLoading) {\n          await relationsToFetch.reduce(async (priorRelation, relation) => {\n            const relationFilterOption = filterOptions?.[relation]\n\n            let lastLoadedPageToUse\n            if (search !== searchArg) {\n              lastLoadedPageToUse = 1\n            } else {\n              lastLoadedPageToUse = lastLoadedPageArg[relation] + 1\n            }\n            await priorRelation\n\n            if (relationFilterOption === false) {\n              setLastFullyLoadedRelation(relations.indexOf(relation))\n              return Promise.resolve()\n            }\n\n            if (resultsFetched < 10) {\n              const collection = getEntityConfig({ collectionSlug: relation })\n              const fieldToSearch = collection?.admin?.useAsTitle || 'id'\n              let fieldToSort = collection?.defaultSort || 'id'\n              if (typeof sortOptions === 'string') {\n                fieldToSort = sortOptions\n              } else if (sortOptions?.[relation]) {\n                fieldToSort = sortOptions[relation]\n              }\n\n              const query: {\n                [key: string]: unknown\n                where: Where\n              } = {\n                depth: 0,\n                draft: true,\n                limit: maxResultsPerRequest,\n                locale,\n                page: lastLoadedPageToUse,\n                select: {\n                  [fieldToSearch]: true,\n                },\n                sort: fieldToSort,\n                where: {\n                  and: [\n                    {\n                      id: {\n                        not_in: relationMap[relation],\n                      },\n                    },\n                  ],\n                },\n              }\n\n              if (searchArg) {\n                query.where.and.push({\n                  [fieldToSearch]: {\n                    like: searchArg,\n                  },\n                })\n              }\n\n              if (relationFilterOption && typeof relationFilterOption !== 'boolean') {\n                query.where.and.push(relationFilterOption)\n              }\n\n              sanitizeFilterOptionsQuery(query.where)\n\n              const response = await fetch(`${serverURL}${api}/${relation}`, {\n                body: qs.stringify(query),\n                credentials: 'include',\n                headers: {\n                  'Accept-Language': i18n.language,\n                  'Content-Type': 'application/x-www-form-urlencoded',\n                  'X-Payload-HTTP-Method-Override': 'GET',\n                },\n                method: 'POST',\n              })\n\n              if (response.ok) {\n                const data: PaginatedDocs<unknown> = await response.json()\n                setLastLoadedPage((prevState) => {\n                  return {\n                    ...prevState,\n                    [relation]: lastLoadedPageToUse,\n                  }\n                })\n\n                if (!data.nextPage) {\n                  setLastFullyLoadedRelation(relations.indexOf(relation))\n                }\n\n                if (data.docs.length > 0) {\n                  resultsFetched += data.docs.length\n\n                  dispatchOptions({\n                    type: 'ADD',\n                    collection,\n                    config,\n                    docs: data.docs,\n                    i18n,\n                    sort,\n                  })\n                }\n              } else if (response.status === 403) {\n                setLastFullyLoadedRelation(relations.indexOf(relation))\n                dispatchOptions({\n                  type: 'ADD',\n                  collection,\n                  config,\n                  docs: [],\n                  i18n,\n                  ids: relationMap[relation],\n                  sort,\n                })\n              } else {\n                setErrorLoading(t('error:unspecific'))\n              }\n            }\n          }, Promise.resolve())\n\n          if (typeof onSuccess === 'function') {\n            onSuccess()\n          }\n        }\n      })\n    },\n    [\n      permissions,\n      queueTask,\n      relationTo,\n      errorLoading,\n      search,\n      getEntityConfig,\n      sortOptions,\n      maxResultsPerRequest,\n      locale,\n      serverURL,\n      api,\n      i18n,\n      config,\n      t,\n    ],\n  )\n\n  const updateSearch = useDebouncedCallback<{ search: string } & HasManyValueUnion>(\n    ({ hasMany: hasManyArg, search: searchArg, value }) => {\n      updateResultsEffectEvent({\n        filterOptions,\n        lastLoadedPage: {},\n        search: searchArg,\n        sort: true,\n        ...(hasManyArg === true\n          ? {\n              hasMany: hasManyArg,\n              value,\n            }\n          : {\n              hasMany: hasManyArg,\n              value,\n            }),\n      })\n      setSearch(searchArg)\n    },\n    300,\n  )\n\n  const handleInputChange = useCallback(\n    (options: { search: string } & HasManyValueUnion) => {\n      if (search !== options.search) {\n        setLastLoadedPage({})\n        updateSearch(options)\n      }\n    },\n    [search, updateSearch],\n  )\n\n  const handleValueChange = useEffectEvent(({ hasMany: hasManyArg, value }: HasManyValueUnion) => {\n    const relationMap = createRelationMap(\n      hasManyArg === true\n        ? {\n            hasMany: hasManyArg,\n            relationTo,\n            value,\n          }\n        : {\n            hasMany: hasManyArg,\n            relationTo,\n            value,\n          },\n    )\n\n    void Object.entries(relationMap).reduce(async (priorRelation, [relation, ids]) => {\n      await priorRelation\n\n      const idsToLoad = ids.filter((id) => {\n        return !options.find((optionGroup) =>\n          optionGroup?.options?.find(\n            (option) => option.value === id && option.relationTo === relation,\n          ),\n        )\n      })\n\n      if (idsToLoad.length > 0) {\n        const query = {\n          depth: 0,\n          draft: true,\n          limit: idsToLoad.length,\n          locale,\n          where: {\n            id: {\n              in: idsToLoad,\n            },\n          },\n        }\n\n        if (!errorLoading) {\n          const response = await fetch(`${serverURL}${api}/${relation}`, {\n            body: qs.stringify(query),\n            credentials: 'include',\n            headers: {\n              'Accept-Language': i18n.language,\n              'Content-Type': 'application/x-www-form-urlencoded',\n              'X-Payload-HTTP-Method-Override': 'GET',\n            },\n            method: 'POST',\n          })\n\n          const collection = getEntityConfig({ collectionSlug: relation })\n          let docs = []\n\n          if (response.ok) {\n            const data = await response.json()\n            docs = data.docs\n          }\n\n          dispatchOptions({\n            type: 'ADD',\n            collection,\n            config,\n            docs,\n            i18n,\n            ids: idsToLoad,\n            sort: true,\n          })\n        }\n      }\n    }, Promise.resolve())\n  })\n\n  const onSave = useCallback<DocumentDrawerProps['onSave']>(\n    (args) => {\n      dispatchOptions({\n        type: 'UPDATE',\n        collection: args.collectionConfig,\n        config,\n        doc: args.doc,\n        i18n,\n      })\n\n      const docID = args.doc.id\n\n      if (hasMany) {\n        const currentValue = valueRef.current\n          ? Array.isArray(valueRef.current)\n            ? valueRef.current\n            : [valueRef.current]\n          : []\n\n        const valuesToSet = currentValue.map((option: ValueWithRelation) => {\n          return {\n            relationTo: option.value === docID ? args.collectionConfig.slug : option.relationTo,\n            value: option.value,\n          }\n        })\n\n        onChange(valuesToSet)\n      } else if (hasMany === false) {\n        onChange({ relationTo: args.collectionConfig.slug, value: docID })\n      }\n    },\n    [i18n, config, hasMany, onChange],\n  )\n\n  const onDuplicate = useCallback<DocumentDrawerProps['onDuplicate']>(\n    (args) => {\n      dispatchOptions({\n        type: 'ADD',\n        collection: args.collectionConfig,\n        config,\n        docs: [args.doc],\n        i18n,\n        sort: true,\n      })\n\n      if (hasMany) {\n        onChange(\n          valueRef.current\n            ? (valueRef.current as ValueWithRelation[]).concat({\n                relationTo: args.collectionConfig.slug,\n                value: args.doc.id,\n              })\n            : null,\n        )\n      } else if (hasMany === false) {\n        onChange({\n          relationTo: args.collectionConfig.slug,\n          value: args.doc.id,\n        })\n      }\n    },\n    [i18n, config, hasMany, onChange],\n  )\n\n  const onDelete = useCallback<DocumentDrawerProps['onDelete']>(\n    (args) => {\n      dispatchOptions({\n        id: args.id,\n        type: 'REMOVE',\n        collection: args.collectionConfig,\n        config,\n        i18n,\n      })\n\n      if (hasMany) {\n        onChange(\n          valueRef.current\n            ? (valueRef.current as ValueWithRelation[]).filter((option) => {\n                return option.value !== args.id\n              })\n            : null,\n        )\n      } else {\n        onChange(null)\n      }\n\n      return\n    },\n    [i18n, config, hasMany, onChange],\n  )\n\n  const filterOption = useCallback((item: Option, searchFilter: string) => {\n    if (!searchFilter) {\n      return true\n    }\n    const r = wordBoundariesRegex(searchFilter || '')\n    // breaking the labels to search into smaller parts increases performance\n    const breakApartThreshold = 250\n    let labelString = String(item.label)\n    // strings less than breakApartThreshold length won't be chunked\n    while (labelString.length > breakApartThreshold) {\n      // slicing by the next space after the length of the search input prevents slicing the string up by partial words\n      const indexOfSpace = labelString.indexOf(' ', searchFilter.length)\n      if (\n        r.test(labelString.slice(0, indexOfSpace === -1 ? searchFilter.length : indexOfSpace + 1))\n      ) {\n        return true\n      }\n      labelString = labelString.slice(indexOfSpace === -1 ? searchFilter.length : indexOfSpace + 1)\n    }\n    return r.test(labelString.slice(-breakApartThreshold))\n  }, [])\n\n  const onDocumentOpen = useCallback<ReactSelectAdapterProps['customProps']['onDocumentOpen']>(\n    ({ id, collectionSlug, hasReadPermission, openInNewTab }) => {\n      if (openInNewTab) {\n        if (hasReadPermission && id && collectionSlug) {\n          const docUrl = formatAdminURL({\n            adminRoute: config.routes.admin,\n            path: `/collections/${collectionSlug}/${id}`,\n          })\n\n          window.open(docUrl, '_blank')\n        }\n      } else {\n        openDrawerWhenRelationChanges.current = true\n\n        setCurrentlyOpenRelationship({\n          id,\n          collectionSlug,\n          hasReadPermission,\n        })\n      }\n    },\n    [config.routes.admin],\n  )\n\n  const updateResultsEffectEvent: UpdateResults = useEffectEvent((args) => {\n    return updateResults(args)\n  })\n\n  // When (`relationTo` || `filterOptions` || `locale`) changes, reset component\n  // Note - effect should not run on first run\n  useEffect(() => {\n    // If the menu is open while filterOptions changes\n    // due to latency of form state and fast clicking into this field,\n    // re-fetch options\n    if (hasLoadedFirstPageRef.current && menuIsOpen) {\n      setIsLoading(true)\n      void updateResultsEffectEvent({\n        filterOptions,\n        lastLoadedPage: {},\n        onSuccess: () => {\n          hasLoadedFirstPageRef.current = true\n          setIsLoading(false)\n        },\n        ...(hasMany === true\n          ? {\n              hasMany,\n              value: valueRef.current as ValueWithRelation[],\n            }\n          : {\n              hasMany,\n              value: valueRef.current as ValueWithRelation,\n            }),\n      })\n    }\n\n    // If the menu is not open, still reset the field state\n    // because we need to get new options next time the menu opens\n    dispatchOptions({\n      type: 'CLEAR',\n      exemptValues: valueRef.current,\n    })\n\n    setLastFullyLoadedRelation(-1)\n    setLastLoadedPage({})\n  }, [relationTo, filterOptions, locale, path, menuIsOpen, hasMany])\n\n  const prevValue = useRef(value)\n  const isFirstRenderRef = useRef(true)\n  // ///////////////////////////////////\n  // Ensure we have an option for each value\n  // ///////////////////////////////////\n  useEffect(() => {\n    if (isFirstRenderRef.current || !dequal(value, prevValue.current)) {\n      handleValueChange(hasMany === true ? { hasMany, value } : { hasMany, value })\n    }\n    isFirstRenderRef.current = false\n    prevValue.current = value\n  }, [value, hasMany])\n\n  // Determine if we should switch to word boundary search\n  useEffect(() => {\n    const relations = Array.isArray(relationTo) ? relationTo : [relationTo]\n    const isIdOnly = relations.reduce((idOnly, relation) => {\n      const collection = getEntityConfig({ collectionSlug: relation })\n      const fieldToSearch = collection?.admin?.useAsTitle || 'id'\n      return fieldToSearch === 'id' && idOnly\n    }, true)\n    setEnableWordBoundarySearch(!isIdOnly)\n  }, [relationTo, getEntityConfig])\n\n  useEffect(() => {\n    if (openDrawerWhenRelationChanges.current) {\n      openDrawer()\n      openDrawerWhenRelationChanges.current = false\n    }\n  }, [openDrawer, currentlyOpenRelationship])\n\n  const valueToRender = findOptionsByValue({ allowEdit, options, value })\n\n  if (!Array.isArray(valueToRender) && valueToRender?.value === 'null') {\n    valueToRender.value = null\n  }\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        baseClass,\n        className,\n        showError && 'error',\n        errorLoading && 'error-loading',\n        readOnly && `${baseClass}--read-only`,\n        !readOnly && allowCreate && `${baseClass}--allow-create`,\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      id={`field-${path.replace(/\\./g, '__')}`}\n      style={style}\n    >\n      <RenderCustomComponent\n        CustomComponent={Label}\n        Fallback={\n          <FieldLabel label={label} localized={localized} path={path} required={required} />\n        }\n      />\n      <div className={`${fieldBaseClass}__wrap`}>\n        <RenderCustomComponent\n          CustomComponent={Error}\n          Fallback={<FieldError path={path} showError={showError} />}\n        />\n        {BeforeInput}\n        {errorLoading ? (\n          <div className={`${baseClass}__error-loading`}>{errorLoading}</div>\n        ) : (\n          <div className={`${baseClass}__wrap`}>\n            <ReactSelect\n              backspaceRemovesValue={!(isDrawerOpen || isListDrawerOpen)}\n              components={{\n                MultiValueLabel,\n                SingleValue,\n                ...(appearance !== 'select' && { DropdownIndicator: null }),\n              }}\n              customProps={{\n                disableKeyDown: isDrawerOpen || isListDrawerOpen,\n                disableMouseDown: isDrawerOpen || isListDrawerOpen,\n                onDocumentOpen,\n                onSave,\n              }}\n              disabled={readOnly || isDrawerOpen || isListDrawerOpen}\n              filterOption={enableWordBoundarySearch ? filterOption : undefined}\n              getOptionValue={(option: ValueWithRelation) => {\n                if (!option) {\n                  return undefined\n                }\n                return hasMany && Array.isArray(relationTo)\n                  ? `${option.relationTo}_${option.value}`\n                  : (option.value as string)\n              }}\n              isLoading={appearance === 'select' && isLoading}\n              isMulti={hasMany}\n              isSearchable={appearance === 'select'}\n              isSortable={isSortable}\n              menuIsOpen={appearance === 'select' ? menuIsOpen : false}\n              onChange={\n                !readOnly\n                  ? (selected) => {\n                      if (hasMany) {\n                        if (selected === null) {\n                          onChange([])\n                        } else {\n                          onChange(selected as ValueWithRelation[])\n                        }\n                      } else if (hasMany === false) {\n                        if (selected === null) {\n                          onChange(null)\n                        } else {\n                          onChange(selected as ValueWithRelation)\n                        }\n                      }\n                    }\n                  : undefined\n              }\n              onInputChange={(newSearch) =>\n                handleInputChange({\n                  search: newSearch,\n                  ...(hasMany === true\n                    ? {\n                        hasMany,\n                        value,\n                      }\n                    : {\n                        hasMany,\n                        value,\n                      }),\n                })\n              }\n              onMenuClose={() => {\n                setMenuIsOpen(false)\n              }}\n              onMenuOpen={() => {\n                if (appearance === 'drawer') {\n                  // TODO: This timeout is only necessary for inline blocks in the lexical editor\n                  // and when the devtools are closed. Temporary solution, we can probably do better.\n                  setTimeout(() => {\n                    openListDrawer()\n                  }, 100)\n                } else if (appearance === 'select') {\n                  setMenuIsOpen(true)\n                  if (!hasLoadedFirstPageRef.current) {\n                    setIsLoading(true)\n                    updateResultsEffectEvent({\n                      filterOptions,\n                      lastLoadedPage: {},\n                      onSuccess: () => {\n                        hasLoadedFirstPageRef.current = true\n                        setIsLoading(false)\n                      },\n                      ...(hasMany === true\n                        ? {\n                            hasMany,\n                            value,\n                          }\n                        : {\n                            hasMany,\n                            value,\n                          }),\n                    })\n                  }\n                }\n              }}\n              onMenuScrollToBottom={() => {\n                updateResultsEffectEvent({\n                  filterOptions,\n                  lastFullyLoadedRelation,\n                  lastLoadedPage,\n                  search,\n                  sort: false,\n                  ...(hasMany === true\n                    ? {\n                        hasMany,\n                        value: initialValue,\n                      }\n                    : {\n                        hasMany,\n                        value: initialValue,\n                      }),\n                })\n              }}\n              options={options}\n              placeholder={placeholder}\n              showError={showError}\n              value={valueToRender ?? null}\n            />\n            {!readOnly && allowCreate && (\n              <AddNewRelation\n                path={path}\n                relationTo={relationTo}\n                {...(hasMany === true\n                  ? {\n                      hasMany,\n                      onChange,\n                      value,\n                    }\n                  : {\n                      hasMany,\n                      onChange,\n                      value,\n                    })}\n              />\n            )}\n          </div>\n        )}\n        {AfterInput}\n        <RenderCustomComponent\n          CustomComponent={Description}\n          Fallback={<FieldDescription description={description} path={path} />}\n        />\n      </div>\n      {currentlyOpenRelationship.collectionSlug && currentlyOpenRelationship.hasReadPermission && (\n        <DocumentDrawer onDelete={onDelete} onDuplicate={onDuplicate} onSave={onSave} />\n      )}\n      {appearance === 'drawer' && !readOnly && (\n        <ListDrawer allowCreate={allowCreate} enableRowSelections={false} onSelect={onListSelect} />\n      )}\n    </div>\n  )\n}\n"],"mappings":"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","ignoreList":[]}