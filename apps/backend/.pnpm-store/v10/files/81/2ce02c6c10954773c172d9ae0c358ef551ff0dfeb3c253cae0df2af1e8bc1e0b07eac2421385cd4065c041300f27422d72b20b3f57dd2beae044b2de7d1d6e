{"version":3,"sources":["../../src/hooks/beforeChange.ts"],"sourcesContent":["import type { CollectionBeforeChangeHook, CollectionConfig, FileData, TypeWithID } from 'payload'\nimport type stream from 'stream'\n\nimport { Upload } from '@aws-sdk/lib-storage'\nimport fs from 'fs'\n\nimport { createKey } from '../utilities/createKey.js'\nimport { getIncomingFiles } from '../utilities/getIncomingFiles.js'\nimport { getStorageClient } from '../utilities/getStorageClient.js'\n\ninterface Args {\n  collection: CollectionConfig\n}\n\nconst MB = 1024 * 1024\n\nexport const getBeforeChangeHook =\n  ({ collection }: Args): CollectionBeforeChangeHook<FileData & TypeWithID> =>\n  async ({ data, req }) => {\n    try {\n      const files = getIncomingFiles({ data, req })\n\n      req.payload.logger.debug({\n        msg: `Preparing to upload ${files.length} files`,\n      })\n\n      const { identityID, storageClient } = await getStorageClient()\n\n      const promises = files.map(async (file) => {\n        const fileKey = file.filename\n\n        req.payload.logger.debug({\n          fileKey,\n          msg: `File buffer length: ${file.buffer.length / MB}MB`,\n          tempFilePath: file.tempFilePath ?? 'undefined',\n        })\n\n        const fileBufferOrStream: Buffer | stream.Readable = file.tempFilePath\n          ? fs.createReadStream(file.tempFilePath)\n          : file.buffer\n\n        if (file.buffer.length > 0) {\n          req.payload.logger.debug({\n            fileKey,\n            msg: `Uploading ${fileKey} from buffer. Size: ${file.buffer.length / MB}MB`,\n          })\n\n          await storageClient.putObject({\n            Body: fileBufferOrStream,\n            Bucket: process.env.PAYLOAD_CLOUD_BUCKET,\n            ContentType: file.mimeType,\n            Key: createKey({ collection: collection.slug, filename: fileKey, identityID }),\n          })\n        }\n\n        // This will buffer at max 4 * 5MB = 20MB. Default queueSize is 4 and default partSize is 5MB.\n        const parallelUploadS3 = new Upload({\n          client: storageClient,\n          params: {\n            Body: fileBufferOrStream,\n            Bucket: process.env.PAYLOAD_CLOUD_BUCKET,\n            ContentType: file.mimeType,\n            Key: createKey({ collection: collection.slug, filename: fileKey, identityID }),\n          },\n        })\n\n        parallelUploadS3.on('httpUploadProgress', (progress) => {\n          if (progress.total) {\n            req.payload.logger.debug({\n              fileKey,\n              msg: `Uploaded part ${progress.part} - ${(progress.loaded || 0) / MB}MB out of ${\n                (progress.total || 0) / MB\n              }MB`,\n            })\n          }\n        })\n\n        await parallelUploadS3.done()\n      })\n\n      await Promise.all(promises)\n    } catch (err: unknown) {\n      req.payload.logger.error(\n        `There was an error while uploading files corresponding to the collection ${collection.slug} with filename ${data.filename}:`,\n      )\n      req.payload.logger.error(err)\n    }\n    return data\n  }\n"],"names":["Upload","fs","createKey","getIncomingFiles","getStorageClient","MB","getBeforeChangeHook","collection","data","req","files","payload","logger","debug","msg","length","identityID","storageClient","promises","map","file","fileKey","filename","buffer","tempFilePath","fileBufferOrStream","createReadStream","putObject","Body","Bucket","process","env","PAYLOAD_CLOUD_BUCKET","ContentType","mimeType","Key","slug","parallelUploadS3","client","params","on","progress","total","part","loaded","done","Promise","all","err","error"],"mappings":"AAGA,SAASA,MAAM,QAAQ,uBAAsB;AAC7C,OAAOC,QAAQ,KAAI;AAEnB,SAASC,SAAS,QAAQ,4BAA2B;AACrD,SAASC,gBAAgB,QAAQ,mCAAkC;AACnE,SAASC,gBAAgB,QAAQ,mCAAkC;AAMnE,MAAMC,KAAK,OAAO;AAElB,OAAO,MAAMC,sBACX,CAAC,EAAEC,UAAU,EAAQ,GACrB,OAAO,EAAEC,IAAI,EAAEC,GAAG,EAAE;QAClB,IAAI;YACF,MAAMC,QAAQP,iBAAiB;gBAAEK;gBAAMC;YAAI;YAE3CA,IAAIE,OAAO,CAACC,MAAM,CAACC,KAAK,CAAC;gBACvBC,KAAK,CAAC,oBAAoB,EAAEJ,MAAMK,MAAM,CAAC,MAAM,CAAC;YAClD;YAEA,MAAM,EAAEC,UAAU,EAAEC,aAAa,EAAE,GAAG,MAAMb;YAE5C,MAAMc,WAAWR,MAAMS,GAAG,CAAC,OAAOC;gBAChC,MAAMC,UAAUD,KAAKE,QAAQ;gBAE7Bb,IAAIE,OAAO,CAACC,MAAM,CAACC,KAAK,CAAC;oBACvBQ;oBACAP,KAAK,CAAC,oBAAoB,EAAEM,KAAKG,MAAM,CAACR,MAAM,GAAGV,GAAG,EAAE,CAAC;oBACvDmB,cAAcJ,KAAKI,YAAY,IAAI;gBACrC;gBAEA,MAAMC,qBAA+CL,KAAKI,YAAY,GAClEvB,GAAGyB,gBAAgB,CAACN,KAAKI,YAAY,IACrCJ,KAAKG,MAAM;gBAEf,IAAIH,KAAKG,MAAM,CAACR,MAAM,GAAG,GAAG;oBAC1BN,IAAIE,OAAO,CAACC,MAAM,CAACC,KAAK,CAAC;wBACvBQ;wBACAP,KAAK,CAAC,UAAU,EAAEO,QAAQ,oBAAoB,EAAED,KAAKG,MAAM,CAACR,MAAM,GAAGV,GAAG,EAAE,CAAC;oBAC7E;oBAEA,MAAMY,cAAcU,SAAS,CAAC;wBAC5BC,MAAMH;wBACNI,QAAQC,QAAQC,GAAG,CAACC,oBAAoB;wBACxCC,aAAab,KAAKc,QAAQ;wBAC1BC,KAAKjC,UAAU;4BAAEK,YAAYA,WAAW6B,IAAI;4BAAEd,UAAUD;4BAASL;wBAAW;oBAC9E;gBACF;gBAEA,8FAA8F;gBAC9F,MAAMqB,mBAAmB,IAAIrC,OAAO;oBAClCsC,QAAQrB;oBACRsB,QAAQ;wBACNX,MAAMH;wBACNI,QAAQC,QAAQC,GAAG,CAACC,oBAAoB;wBACxCC,aAAab,KAAKc,QAAQ;wBAC1BC,KAAKjC,UAAU;4BAAEK,YAAYA,WAAW6B,IAAI;4BAAEd,UAAUD;4BAASL;wBAAW;oBAC9E;gBACF;gBAEAqB,iBAAiBG,EAAE,CAAC,sBAAsB,CAACC;oBACzC,IAAIA,SAASC,KAAK,EAAE;wBAClBjC,IAAIE,OAAO,CAACC,MAAM,CAACC,KAAK,CAAC;4BACvBQ;4BACAP,KAAK,CAAC,cAAc,EAAE2B,SAASE,IAAI,CAAC,GAAG,EAAE,AAACF,CAAAA,SAASG,MAAM,IAAI,CAAA,IAAKvC,GAAG,UAAU,EAC7E,AAACoC,CAAAA,SAASC,KAAK,IAAI,CAAA,IAAKrC,GACzB,EAAE,CAAC;wBACN;oBACF;gBACF;gBAEA,MAAMgC,iBAAiBQ,IAAI;YAC7B;YAEA,MAAMC,QAAQC,GAAG,CAAC7B;QACpB,EAAE,OAAO8B,KAAc;YACrBvC,IAAIE,OAAO,CAACC,MAAM,CAACqC,KAAK,CACtB,CAAC,yEAAyE,EAAE1C,WAAW6B,IAAI,CAAC,eAAe,EAAE5B,KAAKc,QAAQ,CAAC,CAAC,CAAC;YAE/Hb,IAAIE,OAAO,CAACC,MAAM,CAACqC,KAAK,CAACD;QAC3B;QACA,OAAOxC;IACT,EAAC"}