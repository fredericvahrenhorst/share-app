{"version":3,"file":"addFieldStatePromise.js","names":["ObjectIdImport","getBlockSelect","deepCopyObjectSimple","fieldAffectsData","fieldHasSubFields","fieldIsHiddenOrDisabled","fieldIsID","fieldIsLocalized","getFieldPaths","tabHasName","resolveFilterOptions","isRowCollapsed","iterateFields","ObjectId","default","addFieldStatePromise","args","id","addErrorPathToParent","addErrorPathToParentArg","anyParentLocalized","blockData","clientFieldSchemaMap","collectionSlug","data","field","fieldSchemaMap","filter","forceFullValue","fullData","includeSchema","indexPath","mockRSCs","omitParents","operation","parentPath","parentPermissions","parentSchemaPath","passesCondition","path","preferences","previousFormState","renderAllFields","renderFieldFn","req","schemaPath","select","selectMode","skipConditionChecks","skipValidation","state","console","warn","fieldPermissions","fieldState","lastRenderedPath","addedByServer","fieldSchema","name","hasPermission","read","access","siblingData","validate","validationResult","jsonError","type","JSON","parse","e","event","previousValue","initialValue","err","payload","logger","error","msg","errorPath","errorPaths","includes","push","valid","errorMessage","arrayValue","Array","isArray","arraySelect","promises","rows","reduce","acc","row","i","toHexString","idKey","value","fields","find","localized","parentIndexPath","parentPassesCondition","permissions","undefined","previousRow","prevRow","newRow","isLoading","isCollapsed","collapsedPrefs","collapsed","length","Promise","all","disableFormData","blocksValue","rowMetadata","blockTypeToMatch","blockType","block","blocks","blockReferences","slug","Error","blockSelect","blockSelectMode","blockField","fieldKey","blockNameKey","blockName","groupSelect","filterOptions","relationTo","relation","query","user","hasMany","relationshipValue","map","relationship","selectFilterOptions","options","tabs","tab","tabIndex","isNamedTab","tabSelect","tabIndexPath","tabPath","tabSchemaPath","index","childPermissions","tabPermissions","pathSegments","split","tabPassesCondition","admin","condition","fieldConfig","get","endsWith","formState","previousFieldState"],"sources":["../../../src/forms/fieldSchemasToFormState/addFieldStatePromise.ts"],"sourcesContent":["import type {\n  ArrayField,\n  BlocksField,\n  BuildFormStateArgs,\n  ClientFieldSchemaMap,\n  CollapsedPreferences,\n  Data,\n  DocumentPreferences,\n  Field,\n  FieldSchemaMap,\n  FieldState,\n  FlattenedBlock,\n  FormState,\n  FormStateWithoutComponents,\n  PayloadRequest,\n  Row,\n  SanitizedFieldPermissions,\n  SanitizedFieldsPermissions,\n  SelectMode,\n  SelectType,\n  Validate,\n} from 'payload'\n\nimport ObjectIdImport from 'bson-objectid'\nimport { getBlockSelect } from 'payload'\nimport {\n  deepCopyObjectSimple,\n  fieldAffectsData,\n  fieldHasSubFields,\n  fieldIsHiddenOrDisabled,\n  fieldIsID,\n  fieldIsLocalized,\n  getFieldPaths,\n  tabHasName,\n} from 'payload/shared'\n\nimport type { RenderFieldMethod } from './types.js'\n\nimport { resolveFilterOptions } from '../../utilities/resolveFilterOptions.js'\nimport { isRowCollapsed } from './isRowCollapsed.js'\nimport { iterateFields } from './iterateFields.js'\n\nconst ObjectId = (ObjectIdImport.default ||\n  ObjectIdImport) as unknown as typeof ObjectIdImport.default\n\nexport type AddFieldStatePromiseArgs = {\n  addErrorPathToParent: (fieldPath: string) => void\n  /**\n   * if all parents are localized, then the field is localized\n   */\n  anyParentLocalized?: boolean\n  /**\n   * Data of the nearest parent block, or undefined\n   */\n  blockData: Data | undefined\n  clientFieldSchemaMap?: ClientFieldSchemaMap\n  collectionSlug?: string\n  data: Data\n  field: Field\n  fieldIndex: number\n  fieldSchemaMap: FieldSchemaMap\n  /**\n   * You can use this to filter down to only `localized` fields that require translation (type: text, textarea, etc.). Another plugin might want to look for only `point` type fields to do some GIS function. With the filter function you can go in like a surgeon.\n   */\n  filter?: (args: AddFieldStatePromiseArgs) => boolean\n  /**\n   * Force the value of fields like arrays or blocks to be the full value instead of the length @default false\n   */\n  forceFullValue?: boolean\n  fullData: Data\n  id: number | string\n  /**\n   * Whether the field schema should be included in the state\n   */\n  includeSchema?: boolean\n  indexPath: string\n  mockRSCs?: BuildFormStateArgs['mockRSCs']\n  /**\n   * Whether to omit parent fields in the state. @default false\n   */\n  omitParents?: boolean\n  operation: 'create' | 'update'\n  parentIndexPath: string\n  parentPath: string\n  parentPermissions: SanitizedFieldsPermissions\n  parentSchemaPath: string\n  passesCondition: boolean\n  path: string\n  preferences: DocumentPreferences\n  previousFormState: FormState\n  renderAllFields: boolean\n  renderFieldFn: RenderFieldMethod\n  /**\n   * Req is used for validation and defaultValue calculation. If you don't need validation,\n   * just create your own req and pass in the locale and the user\n   */\n  req: PayloadRequest\n  schemaPath: string\n  select?: SelectType\n  selectMode?: SelectMode\n  /**\n   * Whether to skip checking the field's condition. @default false\n   */\n  skipConditionChecks?: boolean\n  /**\n   * Whether to skip validating the field. @default false\n   */\n  skipValidation?: boolean\n  state: FormStateWithoutComponents\n}\n\n/**\n * Flattens the fields schema and fields data.\n * The output is the field path (e.g. array.0.name) mapped to a FormField object.\n */\nexport const addFieldStatePromise = async (args: AddFieldStatePromiseArgs): Promise<void> => {\n  const {\n    id,\n    addErrorPathToParent: addErrorPathToParentArg,\n    anyParentLocalized = false,\n    blockData,\n    clientFieldSchemaMap,\n    collectionSlug,\n    data,\n    field,\n    fieldSchemaMap,\n    filter,\n    forceFullValue = false,\n    fullData,\n    includeSchema = false,\n    indexPath,\n    mockRSCs,\n    omitParents = false,\n    operation,\n    parentPath,\n    parentPermissions,\n    parentSchemaPath,\n    passesCondition,\n    path,\n    preferences,\n    previousFormState,\n    renderAllFields,\n    renderFieldFn,\n    req,\n    schemaPath,\n    select,\n    selectMode,\n    skipConditionChecks = false,\n    skipValidation = false,\n    state,\n  } = args\n\n  if (!args.clientFieldSchemaMap && args.renderFieldFn) {\n    console.warn(\n      'clientFieldSchemaMap is not passed to addFieldStatePromise - this will reduce performance',\n    )\n  }\n\n  let fieldPermissions: SanitizedFieldPermissions = true\n\n  const fieldState: FieldState = {}\n\n  const lastRenderedPath = previousFormState?.[path]?.lastRenderedPath\n\n  // Append only if true to avoid sending '$undefined' through the network\n  if (lastRenderedPath) {\n    fieldState.lastRenderedPath = lastRenderedPath\n  }\n\n  // If we're rendering all fields, no need to flag this as added by server\n  const addedByServer = !renderAllFields && !previousFormState?.[path]\n\n  // Append only if true to avoid sending '$undefined' through the network\n  if (addedByServer) {\n    fieldState.addedByServer = true\n  }\n\n  // Append only if true to avoid sending '$undefined' through the network\n  if (passesCondition === false) {\n    fieldState.passesCondition = false\n  }\n\n  // Append only if true to avoid sending '$undefined' through the network\n  if (includeSchema) {\n    fieldState.fieldSchema = field\n  }\n\n  if (fieldAffectsData(field) && !fieldIsHiddenOrDisabled(field)) {\n    fieldPermissions =\n      parentPermissions === true\n        ? parentPermissions\n        : deepCopyObjectSimple(parentPermissions?.[field.name])\n\n    let hasPermission: boolean =\n      fieldPermissions === true || deepCopyObjectSimple(fieldPermissions?.read)\n\n    if (typeof field?.access?.read === 'function') {\n      hasPermission = await field.access.read({\n        id,\n        blockData,\n        data: fullData,\n        req,\n        siblingData: data,\n      })\n    } else {\n      hasPermission = true\n    }\n\n    if (!hasPermission) {\n      return\n    }\n\n    const validate: Validate = field.validate\n\n    let validationResult: string | true = true\n\n    if (typeof validate === 'function' && !skipValidation && passesCondition) {\n      let jsonError\n\n      if (field.type === 'json' && typeof data[field.name] === 'string') {\n        try {\n          JSON.parse(data[field.name])\n        } catch (e) {\n          jsonError = e\n        }\n      }\n\n      try {\n        validationResult = await validate(data?.[field.name], {\n          ...field,\n          id,\n          blockData,\n          collectionSlug,\n          data: fullData,\n          event: 'onChange',\n          // @AlessioGr added `jsonError` in https://github.com/payloadcms/payload/commit/c7ea62a39473408c3ea912c4fbf73e11be4b538d\n          // @ts-expect-error-next-line\n          jsonError,\n          operation,\n          preferences,\n          previousValue: previousFormState?.[path]?.initialValue,\n          req,\n          siblingData: data,\n        })\n      } catch (err) {\n        validationResult = `Error validating field at path: ${path}`\n\n        req.payload.logger.error({\n          err,\n          msg: validationResult,\n        })\n      }\n    }\n\n    const addErrorPathToParent = (errorPath: string) => {\n      if (typeof addErrorPathToParentArg === 'function') {\n        addErrorPathToParentArg(errorPath)\n      }\n\n      if (!fieldState.errorPaths) {\n        fieldState.errorPaths = []\n      }\n\n      if (!fieldState.errorPaths.includes(errorPath)) {\n        fieldState.errorPaths.push(errorPath)\n        fieldState.valid = false\n      }\n    }\n\n    if (typeof validationResult === 'string') {\n      fieldState.errorMessage = validationResult\n      fieldState.valid = false\n      addErrorPathToParent(path)\n    }\n\n    switch (field.type) {\n      case 'array': {\n        const arrayValue = Array.isArray(data[field.name]) ? data[field.name] : []\n\n        const arraySelect = select?.[field.name]\n\n        const { promises, rows } = arrayValue.reduce(\n          (acc, row, i: number) => {\n            const parentPath = path + '.' + i\n            row.id = row?.id || new ObjectId().toHexString()\n\n            if (!omitParents && (!filter || filter(args))) {\n              const idKey = parentPath + '.id'\n\n              state[idKey] = {\n                initialValue: row.id,\n                value: row.id,\n              }\n\n              if (includeSchema) {\n                state[idKey].fieldSchema = field.fields.find((field) => fieldIsID(field))\n              }\n            }\n\n            acc.promises.push(\n              iterateFields({\n                id,\n                addErrorPathToParent,\n                anyParentLocalized: field.localized || anyParentLocalized,\n                blockData,\n                clientFieldSchemaMap,\n                collectionSlug,\n                data: row,\n                fields: field.fields,\n                fieldSchemaMap,\n                filter,\n                forceFullValue,\n                fullData,\n                includeSchema,\n                mockRSCs,\n                omitParents,\n                operation,\n                parentIndexPath: '',\n                parentPassesCondition: passesCondition,\n                parentPath,\n                parentSchemaPath: schemaPath,\n                permissions:\n                  fieldPermissions === true ? fieldPermissions : fieldPermissions?.fields || {},\n                preferences,\n                previousFormState,\n                renderAllFields,\n                renderFieldFn,\n                req,\n                select: typeof arraySelect === 'object' ? arraySelect : undefined,\n                selectMode,\n                skipConditionChecks,\n                skipValidation,\n                state,\n              }),\n            )\n\n            if (!acc.rows) {\n              acc.rows = []\n            }\n\n            // First, check if `previousFormState` has a matching row\n            const previousRow: Row = (previousFormState?.[path]?.rows || []).find(\n              (prevRow) => prevRow.id === row.id,\n            )\n\n            const newRow: Row = {\n              id: row.id,\n              isLoading: false,\n            }\n\n            if (previousRow?.lastRenderedPath) {\n              newRow.lastRenderedPath = previousRow.lastRenderedPath\n            }\n\n            acc.rows.push(newRow)\n\n            const isCollapsed = isRowCollapsed({\n              collapsedPrefs: preferences?.fields?.[path]?.collapsed,\n              field,\n              previousRow,\n              row,\n            })\n\n            if (isCollapsed) {\n              acc.rows[acc.rows.length - 1].collapsed = true\n            }\n\n            return acc\n          },\n          {\n            promises: [],\n            rows: undefined,\n          },\n        )\n\n        // Wait for all promises and update fields with the results\n        await Promise.all(promises)\n\n        if (rows) {\n          fieldState.rows = rows\n        }\n\n        // Add values to field state\n        if (data[field.name] !== null) {\n          fieldState.value = forceFullValue ? arrayValue : arrayValue.length\n          fieldState.initialValue = forceFullValue ? arrayValue : arrayValue.length\n\n          if (arrayValue.length > 0) {\n            fieldState.disableFormData = true\n          }\n        }\n\n        // Add field to state\n        if (!omitParents && (!filter || filter(args))) {\n          state[path] = fieldState\n        }\n\n        break\n      }\n\n      case 'blocks': {\n        const blocksValue = Array.isArray(data[field.name]) ? data[field.name] : []\n\n        const { promises, rowMetadata } = blocksValue.reduce(\n          (acc, row, i: number) => {\n            const blockTypeToMatch: string = row.blockType\n\n            const block =\n              req.payload.blocks[blockTypeToMatch] ??\n              ((field.blockReferences ?? field.blocks).find(\n                (blockType) => typeof blockType !== 'string' && blockType.slug === blockTypeToMatch,\n              ) as FlattenedBlock | undefined)\n\n            if (!block) {\n              throw new Error(\n                `Block with type \"${row.blockType}\" was found in block data, but no block with that type is defined in the config for field with schema path ${schemaPath}.`,\n              )\n            }\n\n            const { blockSelect, blockSelectMode } = getBlockSelect({\n              block,\n              select: select?.[field.name],\n              selectMode,\n            })\n\n            const parentPath = path + '.' + i\n\n            if (block) {\n              row.id = row?.id || new ObjectId().toHexString()\n\n              if (!omitParents && (!filter || filter(args))) {\n                // Handle block `id` field\n                const idKey = parentPath + '.id'\n\n                state[idKey] = {\n                  initialValue: row.id,\n                  value: row.id,\n                }\n\n                if (includeSchema) {\n                  state[idKey].fieldSchema = includeSchema\n                    ? block.fields.find((blockField) => fieldIsID(blockField))\n                    : undefined\n                }\n\n                // Handle `blockType` field\n                const fieldKey = parentPath + '.blockType'\n\n                state[fieldKey] = {\n                  initialValue: row.blockType,\n                  value: row.blockType,\n                }\n\n                if (addedByServer) {\n                  state[fieldKey].addedByServer = addedByServer\n                }\n\n                if (includeSchema) {\n                  state[fieldKey].fieldSchema = block.fields.find(\n                    (blockField) => 'name' in blockField && blockField.name === 'blockType',\n                  )\n                }\n\n                // Handle `blockName` field\n                const blockNameKey = parentPath + '.blockName'\n\n                state[blockNameKey] = {}\n\n                if (row.blockName) {\n                  state[blockNameKey].initialValue = row.blockName\n                  state[blockNameKey].value = row.blockName\n                }\n\n                if (includeSchema) {\n                  state[blockNameKey].fieldSchema = block.fields.find(\n                    (blockField) => 'name' in blockField && blockField.name === 'blockName',\n                  )\n                }\n              }\n\n              acc.promises.push(\n                iterateFields({\n                  id,\n                  addErrorPathToParent,\n                  anyParentLocalized: field.localized || anyParentLocalized,\n                  blockData: row,\n                  clientFieldSchemaMap,\n                  collectionSlug,\n                  data: row,\n                  fields: block.fields,\n                  fieldSchemaMap,\n                  filter,\n                  forceFullValue,\n                  fullData,\n                  includeSchema,\n                  mockRSCs,\n                  omitParents,\n                  operation,\n                  parentIndexPath: '',\n                  parentPassesCondition: passesCondition,\n                  parentPath,\n                  parentSchemaPath: schemaPath + '.' + block.slug,\n                  permissions:\n                    fieldPermissions === true\n                      ? fieldPermissions\n                      : parentPermissions?.[field.name]?.blocks?.[block.slug] === true\n                        ? true\n                        : parentPermissions?.[field.name]?.blocks?.[block.slug]?.fields || {},\n                  preferences,\n                  previousFormState,\n                  renderAllFields,\n                  renderFieldFn,\n                  req,\n                  select: typeof blockSelect === 'object' ? blockSelect : undefined,\n                  selectMode: blockSelectMode,\n                  skipConditionChecks,\n                  skipValidation,\n                  state,\n                }),\n              )\n\n              // First, check if `previousFormState` has a matching row\n              const previousRow: Row = (previousFormState?.[path]?.rows || []).find(\n                (prevRow) => prevRow.id === row.id,\n              )\n\n              const newRow: Row = {\n                id: row.id,\n                blockType: row.blockType,\n                isLoading: false,\n              }\n\n              if (previousRow?.lastRenderedPath) {\n                newRow.lastRenderedPath = previousRow.lastRenderedPath\n              }\n\n              acc.rowMetadata.push(newRow)\n\n              const isCollapsed = isRowCollapsed({\n                collapsedPrefs: preferences?.fields?.[path]?.collapsed,\n                field,\n                previousRow,\n                row,\n              })\n\n              if (isCollapsed) {\n                acc.rowMetadata[acc.rowMetadata.length - 1].collapsed = true\n              }\n            }\n\n            return acc\n          },\n          {\n            promises: [],\n            rowMetadata: [],\n          },\n        )\n\n        await Promise.all(promises)\n\n        // Add values to field state\n        if (data[field.name] === null) {\n          fieldState.value = null\n          fieldState.initialValue = null\n        } else {\n          fieldState.value = forceFullValue ? blocksValue : blocksValue.length\n          fieldState.initialValue = forceFullValue ? blocksValue : blocksValue.length\n\n          if (blocksValue.length > 0) {\n            fieldState.disableFormData = true\n          }\n        }\n\n        fieldState.rows = rowMetadata\n\n        // Add field to state\n        if (!omitParents && (!filter || filter(args))) {\n          state[path] = fieldState\n        }\n\n        break\n      }\n\n      case 'group': {\n        if (!filter || filter(args)) {\n          fieldState.disableFormData = true\n          state[path] = fieldState\n        }\n\n        const groupSelect = select?.[field.name]\n\n        await iterateFields({\n          id,\n          addErrorPathToParent,\n          anyParentLocalized: field.localized || anyParentLocalized,\n          blockData,\n          clientFieldSchemaMap,\n          collectionSlug,\n          data: data?.[field.name] || {},\n          fields: field.fields,\n          fieldSchemaMap,\n          filter,\n          forceFullValue,\n          fullData,\n          includeSchema,\n          mockRSCs,\n          omitParents,\n          operation,\n          parentIndexPath: '',\n          parentPassesCondition: passesCondition,\n          parentPath: path,\n          parentSchemaPath: schemaPath,\n          permissions:\n            typeof fieldPermissions === 'boolean' ? fieldPermissions : fieldPermissions?.fields,\n          preferences,\n          previousFormState,\n          renderAllFields,\n          renderFieldFn,\n          req,\n          select: typeof groupSelect === 'object' ? groupSelect : undefined,\n          selectMode,\n          skipConditionChecks,\n          skipValidation,\n          state,\n        })\n\n        break\n      }\n\n      case 'relationship':\n      case 'upload': {\n        if (field.filterOptions) {\n          if (typeof field.filterOptions === 'object') {\n            if (typeof field.relationTo === 'string') {\n              fieldState.filterOptions = {\n                [field.relationTo]: field.filterOptions,\n              }\n            } else {\n              fieldState.filterOptions = field.relationTo.reduce((acc, relation) => {\n                acc[relation] = field.filterOptions\n                return acc\n              }, {})\n            }\n          }\n\n          if (typeof field.filterOptions === 'function') {\n            const query = await resolveFilterOptions(field.filterOptions, {\n              id,\n              blockData,\n              data: fullData,\n              relationTo: field.relationTo,\n              req,\n              siblingData: data,\n              user: req.user,\n            })\n\n            fieldState.filterOptions = query\n          }\n        }\n\n        if (field.hasMany) {\n          const relationshipValue = Array.isArray(data[field.name])\n            ? data[field.name].map((relationship) => {\n                if (Array.isArray(field.relationTo)) {\n                  return {\n                    relationTo: relationship.relationTo,\n                    value:\n                      relationship.value && typeof relationship.value === 'object'\n                        ? relationship.value?.id\n                        : relationship.value,\n                  }\n                }\n                if (typeof relationship === 'object' && relationship !== null) {\n                  return relationship.id\n                }\n                return relationship\n              })\n            : undefined\n\n          fieldState.value = relationshipValue\n          fieldState.initialValue = relationshipValue\n        } else if (Array.isArray(field.relationTo)) {\n          if (\n            data[field.name] &&\n            typeof data[field.name] === 'object' &&\n            'relationTo' in data[field.name] &&\n            'value' in data[field.name]\n          ) {\n            const value =\n              typeof data[field.name]?.value === 'object' &&\n              data[field.name]?.value &&\n              'id' in data[field.name].value\n                ? data[field.name].value.id\n                : data[field.name].value\n            const relationshipValue = {\n              relationTo: data[field.name]?.relationTo,\n              value,\n            }\n            fieldState.value = relationshipValue\n            fieldState.initialValue = relationshipValue\n          }\n        } else {\n          const relationshipValue =\n            data[field.name] && typeof data[field.name] === 'object' && 'id' in data[field.name]\n              ? data[field.name].id\n              : data[field.name]\n          fieldState.value = relationshipValue\n          fieldState.initialValue = relationshipValue\n        }\n\n        if (!filter || filter(args)) {\n          state[path] = fieldState\n        }\n\n        break\n      }\n\n      case 'select': {\n        if (typeof field.filterOptions === 'function') {\n          fieldState.selectFilterOptions = field.filterOptions({\n            data: fullData,\n            options: field.options,\n            req,\n            siblingData: data,\n          })\n        }\n\n        if (data[field.name] !== undefined) {\n          fieldState.value = data[field.name]\n          fieldState.initialValue = data[field.name]\n        }\n\n        if (!filter || filter(args)) {\n          state[path] = fieldState\n        }\n\n        break\n      }\n\n      default: {\n        if (data[field.name] !== undefined) {\n          fieldState.value = data[field.name]\n          fieldState.initialValue = data[field.name]\n        }\n\n        // Add field to state\n        if (!filter || filter(args)) {\n          state[path] = fieldState\n        }\n\n        break\n      }\n    }\n  } else if (fieldHasSubFields(field) && !fieldAffectsData(field)) {\n    // Handle field types that do not use names (row, collapsible, unnamed group etc)\n\n    if (!filter || filter(args)) {\n      state[path] = {\n        disableFormData: true,\n      }\n\n      if (passesCondition === false) {\n        state[path].passesCondition = false\n      }\n    }\n\n    await iterateFields({\n      id,\n      mockRSCs,\n      select,\n      selectMode,\n      // passthrough parent functionality\n      addErrorPathToParent: addErrorPathToParentArg,\n      anyParentLocalized: fieldIsLocalized(field) || anyParentLocalized,\n      blockData,\n      clientFieldSchemaMap,\n      collectionSlug,\n      data,\n      fields: field.fields,\n      fieldSchemaMap,\n      filter,\n      forceFullValue,\n      fullData,\n      includeSchema,\n      omitParents,\n      operation,\n      parentIndexPath: indexPath,\n      parentPassesCondition: passesCondition,\n      parentPath,\n      parentSchemaPath,\n      permissions: parentPermissions, // TODO: Verify this is correct\n      preferences,\n      previousFormState,\n      renderAllFields,\n      renderFieldFn,\n      req,\n      skipConditionChecks,\n      skipValidation,\n      state,\n    })\n  } else if (field.type === 'tabs') {\n    const promises = field.tabs.map((tab, tabIndex) => {\n      const isNamedTab = tabHasName(tab)\n      let tabSelect: SelectType | undefined\n\n      const {\n        indexPath: tabIndexPath,\n        path: tabPath,\n        schemaPath: tabSchemaPath,\n      } = getFieldPaths({\n        field: {\n          ...tab,\n          type: 'tab',\n        },\n        index: tabIndex,\n        parentIndexPath: indexPath,\n        parentPath,\n        parentSchemaPath,\n      })\n\n      let childPermissions: SanitizedFieldsPermissions = undefined\n\n      if (isNamedTab) {\n        if (parentPermissions === true) {\n          childPermissions = true\n        } else {\n          const tabPermissions = parentPermissions?.[tab.name]\n          if (tabPermissions === true) {\n            childPermissions = true\n          } else {\n            childPermissions = tabPermissions?.fields\n          }\n        }\n\n        if (typeof select?.[tab.name] === 'object') {\n          tabSelect = select?.[tab.name] as SelectType\n        }\n      } else {\n        childPermissions = parentPermissions\n        tabSelect = select\n      }\n\n      const pathSegments = path ? path.split('.') : []\n\n      // If passesCondition is false then this should always result to false\n      // If the tab has no admin.condition provided then fallback to passesCondition and let that decide the result\n      let tabPassesCondition = passesCondition\n\n      if (passesCondition && typeof tab.admin?.condition === 'function') {\n        tabPassesCondition = tab.admin.condition(fullData, data, {\n          blockData,\n          operation,\n          path: pathSegments,\n          user: req.user,\n        })\n      }\n\n      if (tab?.id) {\n        state[tab.id] = {\n          passesCondition: tabPassesCondition,\n        }\n      }\n\n      return iterateFields({\n        id,\n        addErrorPathToParent: addErrorPathToParentArg,\n        anyParentLocalized: tab.localized || anyParentLocalized,\n        blockData,\n        clientFieldSchemaMap,\n        collectionSlug,\n        data: isNamedTab ? data?.[tab.name] || {} : data,\n        fields: tab.fields,\n        fieldSchemaMap,\n        filter,\n        forceFullValue,\n        fullData,\n        includeSchema,\n        mockRSCs,\n        omitParents,\n        operation,\n        parentIndexPath: isNamedTab ? '' : tabIndexPath,\n        parentPassesCondition: tabPassesCondition,\n        parentPath: isNamedTab ? tabPath : parentPath,\n        parentSchemaPath: isNamedTab ? tabSchemaPath : parentSchemaPath,\n        permissions: childPermissions,\n        preferences,\n        previousFormState,\n        renderAllFields,\n        renderFieldFn,\n        req,\n        select: tabSelect,\n        selectMode,\n        skipConditionChecks,\n        skipValidation,\n        state,\n      })\n    })\n\n    await Promise.all(promises)\n  } else if (field.type === 'ui') {\n    if (!filter || filter(args)) {\n      state[path] = fieldState\n      state[path].disableFormData = true\n    }\n  }\n\n  if (renderFieldFn && !fieldIsHiddenOrDisabled(field)) {\n    const fieldConfig = fieldSchemaMap.get(schemaPath)\n\n    if (!fieldConfig && !mockRSCs) {\n      if (schemaPath.endsWith('.blockType')) {\n        return\n      } else {\n        throw new Error(`Field config not found for ${schemaPath}`)\n      }\n    }\n\n    if (!state[path]) {\n      // Some fields (ie `Tab`) do not live in form state\n      // therefore we cannot attach customComponents to them\n      return\n    }\n\n    if (addedByServer) {\n      state[path].addedByServer = addedByServer\n    }\n\n    renderFieldFn({\n      id,\n      clientFieldSchemaMap,\n      collectionSlug,\n      data: fullData,\n      fieldConfig: fieldConfig as Field,\n      fieldSchemaMap,\n      fieldState: state[path],\n      formState: state,\n      indexPath,\n      lastRenderedPath,\n      mockRSCs,\n      operation,\n      parentPath,\n      parentSchemaPath,\n      path,\n      permissions: fieldPermissions,\n      preferences,\n      previousFieldState: previousFormState?.[path],\n      renderAllFields,\n      req,\n      schemaPath,\n      siblingData: data,\n    })\n  }\n}\n"],"mappings":"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","ignoreList":[]}