{"version":3,"file":"index.js","names":["useRouter","useSearchParams","extractID","formatAdminURL","formatFolderOrDocumentItem","qs","React","toast","useDrawerDepth","parseSearchParams","useConfig","useRouteTransition","useTranslation","getMetaSelection","getShiftSelection","groupItemIDsByRelation","Context","createContext","activeCollectionFolderSlugs","allCollectionFolderSlugs","allowCreateCollectionSlugs","breadcrumbs","clearSelections","currentFolder","documents","focusedRowIndex","folderCollectionConfig","folderCollectionSlug","folderFieldName","folderID","undefined","FolderResultsComponent","getFolderRoute","getSelectedItems","isDragging","itemKeysToMove","lastSelectedIndex","moveToFolder","Promise","resolve","onItemClick","onItemKeyPress","refineFolderData","search","selectedItemKeys","Set","setBreadcrumbs","setFocusedRowIndex","setIsDragging","sort","subfolders","FolderProvider","activeCollectionSlugs","allowMultiSelection","baseFolderPath","_breadcrumbsFromProps","children","InitialFolderResultsComponent","onItemClickFromProps","parentFolderContext","useFolder","config","routes","serverURL","drawerDepth","t","router","startRouteTransition","setFolderResultsComponent","useState","collections","find","collection","folders","slug","rawSearchParams","searchParams","useMemo","currentQuery","setCurrentQuery","setSelectedItemKeys","setLastSelectedIndex","lastClickTime","useRef","totalCount","length","useCallback","mergeQuery","newQuery","page","mergedQuery","query","updateURL","replace","stringify","addQueryPrefix","toFolderID","adminRoute","admin","path","getItem","itemKey","doc","Array","from","reduce","acc","item","push","navigateAfterSelection","collectionSlug","docID","event","index","code","ctrlKey","metaKey","shiftKey","isShiftPressed","isCtrlPressed","newSelectedIndexes","preventDefault","nextIndex","Math","min","selectFromIndex","selectToIndex","prevIndex","max","size","_","i","currentSelection","toggleIndex","has","add","relationTo","value","doubleClicked","type","now","Date","current","args","itemsToMove","items","movingCurrentFolder","id","req","fetch","api","body","JSON","credentials","headers","method","status","error","ids","Object","entries","depth","limit","where","in","console","useEffect","_jsx","isUpload","useAsTitle","context","use","Error"],"sources":["../../../src/providers/Folders/index.tsx"],"sourcesContent":["'use client'\n\nimport type { ClientCollectionConfig, CollectionSlug, FolderSortKeys } from 'payload'\nimport type { FolderBreadcrumb, FolderDocumentItemKey, FolderOrDocument } from 'payload/shared'\n\nimport { useRouter, useSearchParams } from 'next/navigation.js'\nimport { extractID, formatAdminURL, formatFolderOrDocumentItem } from 'payload/shared'\nimport * as qs from 'qs-esm'\nimport React from 'react'\nimport { toast } from 'sonner'\n\nimport { useDrawerDepth } from '../../elements/Drawer/index.js'\nimport { parseSearchParams } from '../../utilities/parseSearchParams.js'\nimport { useConfig } from '../Config/index.js'\nimport { useRouteTransition } from '../RouteTransition/index.js'\nimport { useTranslation } from '../Translation/index.js'\nimport { getMetaSelection, getShiftSelection, groupItemIDsByRelation } from './selection.js'\n\ntype FolderQueryParams = {\n  page?: string\n  relationTo?: CollectionSlug[]\n  search?: string\n  sort?: string\n}\n\nexport type FileCardData = {\n  filename: string\n  id: number | string\n  mimeType: string\n  name: string\n  url: string\n}\n\nexport type FolderContextValue = {\n  /**\n   * The collection slugs that a view can be filtered by\n   * Used in the browse-by-folder view\n   */\n  activeCollectionFolderSlugs: CollectionSlug[]\n  /**\n   * Folder enabled collection slugs that can be populated within the provider\n   */\n  readonly allCollectionFolderSlugs?: CollectionSlug[]\n  allowCreateCollectionSlugs: CollectionSlug[]\n  breadcrumbs?: FolderBreadcrumb[]\n  clearSelections: () => void\n  currentFolder?: FolderOrDocument | null\n  documents?: FolderOrDocument[]\n  focusedRowIndex: number\n  folderCollectionConfig: ClientCollectionConfig\n  folderCollectionSlug: string\n  folderFieldName: string\n  folderID?: number | string\n  FolderResultsComponent: React.ReactNode\n  getFolderRoute: (toFolderID?: number | string) => string\n  getSelectedItems?: () => FolderOrDocument[]\n  isDragging: boolean\n  itemKeysToMove?: Set<FolderDocumentItemKey>\n  lastSelectedIndex: null | number\n  moveToFolder: (args: {\n    itemsToMove: FolderOrDocument[]\n    toFolderID?: number | string\n  }) => Promise<void>\n  onItemClick: (args: { event: React.MouseEvent; index: number; item: FolderOrDocument }) => void\n  onItemKeyPress: (args: {\n    event: React.KeyboardEvent\n    index: number\n    item: FolderOrDocument\n  }) => void\n  refineFolderData: (args: { query?: FolderQueryParams; updateURL: boolean }) => void\n  search: string\n  readonly selectedItemKeys: Set<FolderDocumentItemKey>\n  setBreadcrumbs: React.Dispatch<React.SetStateAction<FolderBreadcrumb[]>>\n  setFocusedRowIndex: React.Dispatch<React.SetStateAction<number>>\n  setIsDragging: React.Dispatch<React.SetStateAction<boolean>>\n  sort: FolderSortKeys\n  subfolders?: FolderOrDocument[]\n}\n\nconst Context = React.createContext<FolderContextValue>({\n  activeCollectionFolderSlugs: [],\n  allCollectionFolderSlugs: [],\n  allowCreateCollectionSlugs: [],\n  breadcrumbs: [],\n  clearSelections: () => {},\n  currentFolder: null,\n  documents: [],\n  focusedRowIndex: -1,\n  folderCollectionConfig: null,\n  folderCollectionSlug: '',\n  folderFieldName: 'folder',\n  folderID: undefined,\n  FolderResultsComponent: null,\n  getFolderRoute: () => '',\n  getSelectedItems: () => [],\n  isDragging: false,\n  itemKeysToMove: undefined,\n  lastSelectedIndex: null,\n  moveToFolder: () => Promise.resolve(undefined),\n  onItemClick: () => undefined,\n  onItemKeyPress: () => undefined,\n  refineFolderData: () => undefined,\n  search: '',\n  selectedItemKeys: new Set<FolderDocumentItemKey>(),\n  setBreadcrumbs: () => {},\n  setFocusedRowIndex: () => -1,\n  setIsDragging: () => false,\n  sort: '_folderOrDocumentTitle',\n  subfolders: [],\n})\n\nexport type FolderProviderProps = {\n  /**\n   * The collection slugs that are being viewed\n   */\n  readonly activeCollectionFolderSlugs?: CollectionSlug[]\n  /**\n   * Folder enabled collection slugs that can be populated within the provider\n   */\n  readonly allCollectionFolderSlugs: CollectionSlug[]\n  /**\n   * Array of slugs that can be created in the folder view\n   */\n  readonly allowCreateCollectionSlugs: CollectionSlug[]\n  readonly allowMultiSelection?: boolean\n  /**\n   * The base folder route path\n   *\n   * @example\n   * `/collections/:collectionSlug/:folderCollectionSlug`\n   * or\n   * `/browse-by-folder`\n   */\n  readonly baseFolderPath?: `/${string}`\n  /**\n   * Breadcrumbs for the current folder\n   */\n  readonly breadcrumbs?: FolderBreadcrumb[]\n  /**\n   * Children to render inside the provider\n   */\n  readonly children: React.ReactNode\n  /**\n   * All documents in the current folder\n   */\n  readonly documents: FolderOrDocument[]\n  /**\n   * The name of the field that contains the folder relation\n   */\n  readonly folderFieldName: string\n  /**\n   * The ID of the current folder\n   */\n  readonly folderID?: number | string\n  /**\n   * The component to render the folder results\n   */\n  readonly FolderResultsComponent: React.ReactNode\n  /**\n   * Optional function to call when an item is clicked\n   */\n  readonly onItemClick?: (itme: FolderOrDocument) => void\n  /**\n   * The intial search query\n   */\n  readonly search?: string\n  /**\n   * The sort order of the documents\n   *\n   * @example\n   * `name` for descending\n   * `-name` for ascending\n   */\n  readonly sort?: FolderSortKeys\n  /**\n   * All subfolders in the current folder\n   */\n  readonly subfolders: FolderOrDocument[]\n}\nexport function FolderProvider({\n  activeCollectionFolderSlugs: activeCollectionSlugs,\n  allCollectionFolderSlugs = [],\n  allowCreateCollectionSlugs,\n  allowMultiSelection = true,\n  baseFolderPath,\n  breadcrumbs: _breadcrumbsFromProps = [],\n  children,\n  documents,\n  folderFieldName,\n  folderID,\n  FolderResultsComponent: InitialFolderResultsComponent,\n  onItemClick: onItemClickFromProps,\n  search,\n  sort = '_folderOrDocumentTitle',\n  subfolders,\n}: FolderProviderProps) {\n  const parentFolderContext = useFolder()\n  const { config } = useConfig()\n  const { routes, serverURL } = config\n  const drawerDepth = useDrawerDepth()\n  const { t } = useTranslation()\n  const router = useRouter()\n  const { startRouteTransition } = useRouteTransition()\n\n  const [FolderResultsComponent, setFolderResultsComponent] = React.useState(\n    InitialFolderResultsComponent || (() => null),\n  )\n  const [folderCollectionConfig] = React.useState(() =>\n    config.collections.find(\n      (collection) => config.folders && collection.slug === config.folders.slug,\n    ),\n  )\n  const folderCollectionSlug = folderCollectionConfig.slug\n\n  const rawSearchParams = useSearchParams()\n  const searchParams = React.useMemo(() => parseSearchParams(rawSearchParams), [rawSearchParams])\n  const [currentQuery, setCurrentQuery] = React.useState<FolderQueryParams>(searchParams)\n\n  const [isDragging, setIsDragging] = React.useState(false)\n  const [selectedItemKeys, setSelectedItemKeys] = React.useState<Set<FolderDocumentItemKey>>(\n    () => new Set(),\n  )\n  const [focusedRowIndex, setFocusedRowIndex] = React.useState(-1)\n  const [lastSelectedIndex, setLastSelectedIndex] = React.useState<null | number>(null)\n  const [breadcrumbs, setBreadcrumbs] =\n    React.useState<FolderContextValue['breadcrumbs']>(_breadcrumbsFromProps)\n  const lastClickTime = React.useRef<null | number>(null)\n  const totalCount = subfolders.length + documents.length\n\n  const clearSelections = React.useCallback(() => {\n    setFocusedRowIndex(-1)\n    setSelectedItemKeys(new Set())\n    setLastSelectedIndex(undefined)\n  }, [])\n\n  const mergeQuery = React.useCallback(\n    (newQuery: Partial<FolderQueryParams> = {}): Partial<FolderQueryParams> => {\n      let page = 'page' in newQuery ? newQuery.page : currentQuery?.page\n\n      if ('search' in newQuery) {\n        page = '1'\n      }\n\n      const mergedQuery = {\n        ...currentQuery,\n        ...newQuery,\n        page,\n        search: 'search' in newQuery ? newQuery.search : currentQuery?.search,\n        sort: 'sort' in newQuery ? newQuery.sort : (currentQuery?.sort ?? undefined),\n      }\n\n      return mergedQuery\n    },\n    [currentQuery],\n  )\n\n  const refineFolderData: FolderContextValue['refineFolderData'] = React.useCallback(\n    ({ query, updateURL }) => {\n      if (updateURL) {\n        const newQuery = mergeQuery(query)\n        startRouteTransition(() =>\n          router.replace(`${qs.stringify(newQuery, { addQueryPrefix: true })}`),\n        )\n\n        setCurrentQuery(newQuery)\n      }\n    },\n    [mergeQuery, router, startRouteTransition],\n  )\n\n  const getFolderRoute: FolderContextValue['getFolderRoute'] = React.useCallback(\n    (toFolderID) => {\n      const newQuery = mergeQuery({ page: '1', search: '' })\n      return formatAdminURL({\n        adminRoute: config.routes.admin,\n        path: `${baseFolderPath}${toFolderID ? `/${toFolderID}` : ''}${qs.stringify(newQuery, { addQueryPrefix: true })}`,\n        serverURL: config.serverURL,\n      })\n    },\n    [baseFolderPath, config.routes.admin, config.serverURL, mergeQuery],\n  )\n\n  const getItem = React.useCallback(\n    (itemKey: FolderDocumentItemKey) => {\n      return [...subfolders, ...documents].find((doc) => doc.itemKey === itemKey)\n    },\n    [documents, subfolders],\n  )\n\n  const getSelectedItems = React.useCallback(() => {\n    return Array.from(selectedItemKeys).reduce((acc, itemKey) => {\n      const item = getItem(itemKey)\n      if (item) {\n        acc.push(item)\n      }\n      return acc\n    }, [])\n  }, [selectedItemKeys, getItem])\n\n  const navigateAfterSelection = React.useCallback(\n    ({ collectionSlug, docID }: { collectionSlug: string; docID?: number | string }) => {\n      if (drawerDepth === 1) {\n        // not in a drawer (default is 1)\n        clearSelections()\n        if (collectionSlug === folderCollectionSlug) {\n          // clicked on folder, take the user to the folder view\n          startRouteTransition(() => router.push(getFolderRoute(docID)))\n        } else if (collectionSlug) {\n          // clicked on document, take the user to the documet view\n          startRouteTransition(() => {\n            router.push(\n              formatAdminURL({\n                adminRoute: config.routes.admin,\n                path: `/collections/${collectionSlug}/${docID}`,\n              }),\n            )\n          })\n        }\n      }\n\n      if (typeof onItemClickFromProps === 'function') {\n        onItemClickFromProps(getItem(`${collectionSlug}-${docID}`))\n      }\n    },\n    [\n      clearSelections,\n      config.routes.admin,\n      drawerDepth,\n      folderCollectionSlug,\n      getFolderRoute,\n      getItem,\n      onItemClickFromProps,\n      router,\n      startRouteTransition,\n    ],\n  )\n\n  const onItemKeyPress: FolderContextValue['onItemKeyPress'] = React.useCallback(\n    ({ event, index, item }) => {\n      const { code, ctrlKey, metaKey, shiftKey } = event\n      const isShiftPressed = shiftKey\n      const isCtrlPressed = ctrlKey || metaKey\n      let newSelectedIndexes: Set<number> | undefined = undefined\n\n      switch (code) {\n        case 'ArrowDown': {\n          event.preventDefault()\n          const nextIndex = Math.min(index + 1, totalCount - 1)\n          setFocusedRowIndex(nextIndex)\n\n          if (isCtrlPressed) {\n            break\n          }\n\n          if (allowMultiSelection && isShiftPressed) {\n            newSelectedIndexes = getShiftSelection({\n              selectFromIndex: Math.min(lastSelectedIndex, totalCount),\n              selectToIndex: Math.min(nextIndex, totalCount),\n            })\n          } else {\n            setLastSelectedIndex(nextIndex)\n            newSelectedIndexes = new Set([nextIndex])\n          }\n          break\n        }\n        case 'ArrowUp': {\n          event.preventDefault()\n          const prevIndex = Math.max(index - 1, 0)\n          setFocusedRowIndex(prevIndex)\n\n          if (isCtrlPressed) {\n            break\n          }\n\n          if (allowMultiSelection && isShiftPressed) {\n            newSelectedIndexes = getShiftSelection({\n              selectFromIndex: lastSelectedIndex,\n              selectToIndex: prevIndex,\n            })\n          } else {\n            setLastSelectedIndex(prevIndex)\n            newSelectedIndexes = new Set([prevIndex])\n          }\n          break\n        }\n        case 'Enter': {\n          if (selectedItemKeys.size === 1) {\n            newSelectedIndexes = new Set([])\n            setFocusedRowIndex(undefined)\n          }\n          break\n        }\n        case 'Escape': {\n          setFocusedRowIndex(undefined)\n          newSelectedIndexes = new Set([])\n          break\n        }\n        case 'KeyA': {\n          if (allowMultiSelection && isCtrlPressed) {\n            event.preventDefault()\n            setFocusedRowIndex(totalCount - 1)\n            newSelectedIndexes = new Set(Array.from({ length: totalCount }, (_, i) => i))\n          }\n          break\n        }\n        case 'Space': {\n          if (allowMultiSelection && isShiftPressed) {\n            event.preventDefault()\n            newSelectedIndexes = getMetaSelection({\n              currentSelection: newSelectedIndexes,\n              toggleIndex: index,\n            })\n            setLastSelectedIndex(index)\n          } else {\n            event.preventDefault()\n            newSelectedIndexes = new Set([index])\n            setLastSelectedIndex(index)\n          }\n          break\n        }\n        case 'Tab': {\n          if (allowMultiSelection && isShiftPressed) {\n            const prevIndex = index - 1\n            if (prevIndex < 0 && newSelectedIndexes?.size > 0) {\n              setFocusedRowIndex(prevIndex)\n            }\n          } else {\n            const nextIndex = index + 1\n            if (nextIndex === totalCount && selectedItemKeys.size > 0) {\n              setFocusedRowIndex(totalCount - 1)\n            }\n          }\n          break\n        }\n      }\n\n      if (!newSelectedIndexes) {\n        return\n      }\n\n      setSelectedItemKeys(\n        [...subfolders, ...documents].reduce((acc, item, index) => {\n          if (newSelectedIndexes?.size && newSelectedIndexes.has(index)) {\n            acc.add(item.itemKey)\n          }\n          return acc\n        }, new Set<FolderDocumentItemKey>()),\n      )\n\n      if (selectedItemKeys.size === 1 && code === 'Enter') {\n        navigateAfterSelection({\n          collectionSlug: item.relationTo,\n          docID: extractID(item.value),\n        })\n      }\n    },\n    [\n      allowMultiSelection,\n      documents,\n      lastSelectedIndex,\n      navigateAfterSelection,\n      subfolders,\n      totalCount,\n      selectedItemKeys,\n    ],\n  )\n\n  const onItemClick: FolderContextValue['onItemClick'] = React.useCallback(\n    ({ event, index, item }) => {\n      let doubleClicked: boolean = false\n      const isCtrlPressed = event.ctrlKey || event.metaKey\n      const isShiftPressed = event.shiftKey\n      let newSelectedIndexes: Set<number> | undefined = undefined\n\n      if (allowMultiSelection && isCtrlPressed) {\n        newSelectedIndexes = getMetaSelection({\n          currentSelection: newSelectedIndexes,\n          toggleIndex: index,\n        })\n      } else if (allowMultiSelection && isShiftPressed && lastSelectedIndex !== undefined) {\n        newSelectedIndexes = getShiftSelection({\n          selectFromIndex: lastSelectedIndex,\n          selectToIndex: index,\n        })\n      } else if (allowMultiSelection && event.type === 'pointermove') {\n        // on drag start of an unselected item\n        if (!selectedItemKeys.has(item.itemKey)) {\n          newSelectedIndexes = new Set([index])\n        }\n        setLastSelectedIndex(index)\n      } else {\n        // Normal click - select single item\n        newSelectedIndexes = new Set([index])\n        const now = Date.now()\n        doubleClicked = now - lastClickTime.current < 400 && lastSelectedIndex === index\n        lastClickTime.current = now\n        setLastSelectedIndex(index)\n      }\n\n      if (!newSelectedIndexes) {\n        setFocusedRowIndex(undefined)\n      } else {\n        setFocusedRowIndex(index)\n      }\n\n      if (newSelectedIndexes) {\n        setSelectedItemKeys(\n          [...subfolders, ...documents].reduce((acc, item, index) => {\n            if (newSelectedIndexes.size && newSelectedIndexes.has(index)) {\n              acc.add(item.itemKey)\n            }\n            return acc\n          }, new Set<FolderDocumentItemKey>()),\n        )\n      }\n\n      if (doubleClicked) {\n        navigateAfterSelection({\n          collectionSlug: item.relationTo,\n          docID: extractID(item.value),\n        })\n      }\n    },\n    [\n      selectedItemKeys,\n      allowMultiSelection,\n      lastSelectedIndex,\n      subfolders,\n      documents,\n      navigateAfterSelection,\n    ],\n  )\n\n  /**\n   * Makes requests to the server to update the folder field on passed in documents\n   *\n   * Might rewrite this in the future to return the promises so errors can be handled contextually\n   */\n  const moveToFolder: FolderContextValue['moveToFolder'] = React.useCallback(\n    async (args) => {\n      const { itemsToMove: items, toFolderID } = args\n      if (!items.length) {\n        return\n      }\n\n      const movingCurrentFolder =\n        items.length === 1 &&\n        items[0].relationTo === folderCollectionSlug &&\n        items[0].value.id === folderID\n\n      if (movingCurrentFolder) {\n        const req = await fetch(\n          `${serverURL}${routes.api}/${folderCollectionSlug}/${folderID}?depth=0`,\n          {\n            body: JSON.stringify({ [folderFieldName]: toFolderID || null }),\n            credentials: 'include',\n            headers: {\n              'content-type': 'application/json',\n            },\n            method: 'PATCH',\n          },\n        )\n        if (req.status !== 200) {\n          toast.error(t('general:error'))\n        }\n      } else {\n        for (const [collectionSlug, ids] of Object.entries(groupItemIDsByRelation(items))) {\n          const query = qs.stringify(\n            {\n              depth: 0,\n              limit: 0,\n              where: {\n                id: {\n                  in: ids,\n                },\n              },\n            },\n            {\n              addQueryPrefix: true,\n            },\n          )\n          try {\n            await fetch(`${serverURL}${routes.api}/${collectionSlug}${query}`, {\n              body: JSON.stringify({ [folderFieldName]: toFolderID || null }),\n              credentials: 'include',\n              headers: {\n                'content-type': 'application/json',\n              },\n              method: 'PATCH',\n            })\n          } catch (error) {\n            toast.error(t('general:error'))\n            // eslint-disable-next-line no-console\n            console.error(error)\n            continue\n          }\n        }\n      }\n\n      clearSelections()\n    },\n    [folderID, clearSelections, folderCollectionSlug, folderFieldName, routes.api, serverURL, t],\n  )\n\n  // If a new component is provided, update the state so children can re-render with the new component\n  React.useEffect(() => {\n    if (InitialFolderResultsComponent) {\n      setFolderResultsComponent(InitialFolderResultsComponent)\n    }\n  }, [InitialFolderResultsComponent])\n\n  return (\n    <Context\n      value={{\n        activeCollectionFolderSlugs: activeCollectionSlugs || allCollectionFolderSlugs,\n        allCollectionFolderSlugs,\n        allowCreateCollectionSlugs,\n        breadcrumbs,\n        clearSelections,\n        currentFolder: breadcrumbs?.[0]?.id\n          ? formatFolderOrDocumentItem({\n              folderFieldName,\n              isUpload: false,\n              relationTo: folderCollectionSlug,\n              useAsTitle: folderCollectionConfig.admin.useAsTitle,\n              value: breadcrumbs[breadcrumbs.length - 1],\n            })\n          : null,\n        documents,\n        focusedRowIndex,\n        folderCollectionConfig,\n        folderCollectionSlug,\n        folderFieldName,\n        folderID,\n        FolderResultsComponent,\n        getFolderRoute,\n        getSelectedItems,\n        isDragging,\n        itemKeysToMove: parentFolderContext.selectedItemKeys,\n        lastSelectedIndex,\n        moveToFolder,\n        onItemClick,\n        onItemKeyPress,\n        refineFolderData,\n        search,\n        selectedItemKeys,\n        setBreadcrumbs,\n        setFocusedRowIndex,\n        setIsDragging,\n        sort,\n        subfolders,\n      }}\n    >\n      {children}\n    </Context>\n  )\n}\n\nexport function useFolder(): FolderContextValue {\n  const context = React.use(Context)\n\n  if (context === undefined) {\n    throw new Error('useFolder must be used within a FolderProvider')\n  }\n\n  return context\n}\n"],"mappings":"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","ignoreList":[]}