{"version":3,"sources":["../../../src/folders/endpoints/populateFolderData.ts"],"sourcesContent":["import httpStatus from 'http-status'\n\nimport type { Endpoint, Where } from '../../index.js'\n\nimport { buildFolderWhereConstraints } from '../utils/buildFolderWhereConstraints.js'\nimport { getFolderData } from '../utils/getFolderData.js'\n\nexport const populateFolderDataEndpoint: Endpoint = {\n  handler: async (req) => {\n    if (!req?.user) {\n      return Response.json(\n        {\n          message: 'Unauthorized request.',\n        },\n        {\n          status: httpStatus.UNAUTHORIZED,\n        },\n      )\n    }\n\n    if (\n      !(\n        req.payload.config.folders &&\n        Boolean(req.payload.collections?.[req.payload.config.folders.slug])\n      )\n    ) {\n      return Response.json(\n        {\n          message: 'Folders are not configured',\n        },\n        {\n          status: httpStatus.NOT_FOUND,\n        },\n      )\n    }\n\n    // if collectionSlug exists, we need to create constraints for that _specific collection_ and the folder collection\n    // if collectionSlug does not exist, we need to create constraints for _all folder enabled collections_ and the folder collection\n    let documentWhere: undefined | Where\n    let folderWhere: undefined | Where\n    const collectionSlug = req.searchParams?.get('collectionSlug')\n\n    if (collectionSlug) {\n      const collectionConfig = req.payload.collections?.[collectionSlug]?.config\n\n      if (!collectionConfig) {\n        return Response.json(\n          {\n            message: `Collection with slug \"${collectionSlug}\" not found`,\n          },\n          {\n            status: httpStatus.NOT_FOUND,\n          },\n        )\n      }\n\n      const collectionConstraints = await buildFolderWhereConstraints({\n        collectionConfig,\n        folderID: req.searchParams?.get('folderID') || undefined,\n        localeCode: typeof req?.locale === 'string' ? req.locale : undefined,\n        req,\n        search: req.searchParams?.get('search') || undefined,\n        sort: req.searchParams?.get('sort') || undefined,\n      })\n\n      if (collectionConstraints) {\n        documentWhere = collectionConstraints\n      }\n    } else {\n      // loop over all folder enabled collections and build constraints for each\n      for (const collectionSlug of Object.keys(req.payload.collections)) {\n        const collectionConfig = req.payload.collections[collectionSlug]?.config\n\n        if (collectionConfig?.folders) {\n          const collectionConstraints = await buildFolderWhereConstraints({\n            collectionConfig,\n            folderID: req.searchParams?.get('folderID') || undefined,\n            localeCode: typeof req?.locale === 'string' ? req.locale : undefined,\n            req,\n            search: req.searchParams?.get('search') || undefined,\n          })\n\n          if (collectionConstraints) {\n            if (!documentWhere) {\n              documentWhere = { or: [] }\n            }\n            if (!Array.isArray(documentWhere.or)) {\n              documentWhere.or = [documentWhere]\n            } else if (Array.isArray(documentWhere.or)) {\n              documentWhere.or.push(collectionConstraints)\n            }\n          }\n        }\n      }\n    }\n\n    const folderCollectionConfig =\n      req.payload.collections?.[req.payload.config.folders.slug]?.config\n\n    if (!folderCollectionConfig) {\n      return Response.json(\n        {\n          message: 'Folder collection not found',\n        },\n        {\n          status: httpStatus.NOT_FOUND,\n        },\n      )\n    }\n\n    const folderConstraints = await buildFolderWhereConstraints({\n      collectionConfig: folderCollectionConfig,\n      folderID: req.searchParams?.get('folderID') || undefined,\n      localeCode: typeof req?.locale === 'string' ? req.locale : undefined,\n      req,\n      search: req.searchParams?.get('search') || undefined,\n    })\n\n    if (folderConstraints) {\n      folderWhere = folderConstraints\n    }\n\n    const data = await getFolderData({\n      collectionSlug: req.searchParams?.get('collectionSlug') || undefined,\n      documentWhere: documentWhere ? documentWhere : undefined,\n      folderID: req.searchParams?.get('folderID') || undefined,\n      folderWhere,\n      req,\n    })\n\n    return Response.json(data)\n  },\n  method: 'get',\n  path: '/populate-folder-data',\n}\n"],"names":["httpStatus","buildFolderWhereConstraints","getFolderData","populateFolderDataEndpoint","handler","req","user","Response","json","message","status","UNAUTHORIZED","payload","config","folders","Boolean","collections","slug","NOT_FOUND","documentWhere","folderWhere","collectionSlug","searchParams","get","collectionConfig","collectionConstraints","folderID","undefined","localeCode","locale","search","sort","Object","keys","or","Array","isArray","push","folderCollectionConfig","folderConstraints","data","method","path"],"mappings":"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"}