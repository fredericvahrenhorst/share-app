{"version":3,"file":"UploadNode.js","names":["ObjectID","$applyNodeReplacement","React","isGoogleDocCheckboxImg","UploadServerNode","RawUploadComponent","lazy","then","module","default","UploadComponent","$convertUploadElement","domNode","hasAttribute","id","getAttribute","relationTo","node","$createUploadNode","data","fields","value","img","src","startsWith","UploadNode","clone","getType","importDOM","conversion","priority","importJSON","serializedNode","version","toHexString","importedData","setFormat","format","decorate","_jsx","__data","nodeKey","getKey","exportJSON","$isUploadNode"],"sources":["../../../../../src/features/upload/client/nodes/UploadNode.tsx"],"sourcesContent":["'use client'\nimport type { SerializedDecoratorBlockNode } from '@lexical/react/LexicalDecoratorBlockNode.js'\nimport type { DOMConversionMap, DOMConversionOutput, LexicalNode, Spread } from 'lexical'\nimport type { JSX } from 'react'\n\nimport ObjectID from 'bson-objectid'\nimport { $applyNodeReplacement } from 'lexical'\nimport * as React from 'react'\n\nimport type { UploadData } from '../../server/nodes/UploadNode.js'\n\nimport { isGoogleDocCheckboxImg, UploadServerNode } from '../../server/nodes/UploadNode.js'\n\nconst RawUploadComponent = React.lazy(() =>\n  import('../../client/component/index.js').then((module) => ({ default: module.UploadComponent })),\n)\n\nfunction $convertUploadElement(domNode: HTMLImageElement): DOMConversionOutput | null {\n  if (\n    domNode.hasAttribute('data-lexical-upload-relation-to') &&\n    domNode.hasAttribute('data-lexical-upload-id')\n  ) {\n    const id = domNode.getAttribute('data-lexical-upload-id')\n    const relationTo = domNode.getAttribute('data-lexical-upload-relation-to')\n\n    if (id != null && relationTo != null) {\n      const node = $createUploadNode({\n        data: {\n          fields: {},\n          relationTo,\n          value: id,\n        },\n      })\n      return { node }\n    }\n  }\n  const img = domNode\n  if (img.src.startsWith('file:///') || isGoogleDocCheckboxImg(img)) {\n    return null\n  }\n  // TODO: Auto-upload functionality here!\n  //}\n  return null\n}\n\nexport type SerializedUploadNode = {\n  children?: never // required so that our typed editor state doesn't automatically add children\n  type: 'upload'\n} & Spread<UploadData, SerializedDecoratorBlockNode>\n\nexport class UploadNode extends UploadServerNode {\n  static override clone(node: UploadServerNode): UploadServerNode {\n    return super.clone(node)\n  }\n\n  static override getType(): string {\n    return super.getType()\n  }\n\n  static override importDOM(): DOMConversionMap<HTMLImageElement> {\n    return {\n      img: (node) => ({\n        conversion: $convertUploadElement,\n        priority: 0,\n      }),\n    }\n  }\n\n  static override importJSON(serializedNode: SerializedUploadNode): UploadNode {\n    if (serializedNode.version === 1 && (serializedNode?.value as unknown as { id: string })?.id) {\n      serializedNode.value = (serializedNode.value as unknown as { id: string }).id\n    }\n    if (serializedNode.version === 2 && !serializedNode?.id) {\n      serializedNode.id = new ObjectID.default().toHexString()\n      serializedNode.version = 3\n    }\n\n    const importedData: UploadData = {\n      id: serializedNode.id,\n      fields: serializedNode.fields,\n      relationTo: serializedNode.relationTo,\n      value: serializedNode.value,\n    }\n\n    const node = $createUploadNode({ data: importedData })\n    node.setFormat(serializedNode.format)\n\n    return node\n  }\n\n  override decorate(): JSX.Element {\n    return <RawUploadComponent data={this.__data} nodeKey={this.getKey()} />\n  }\n\n  override exportJSON(): SerializedUploadNode {\n    return super.exportJSON()\n  }\n}\n\nexport function $createUploadNode({\n  data,\n}: {\n  data: Omit<UploadData, 'id'> & Partial<Pick<UploadData, 'id'>>\n}): UploadNode {\n  if (!data?.id) {\n    data.id = new ObjectID.default().toHexString()\n  }\n  return $applyNodeReplacement(new UploadNode({ data: data as UploadData }))\n}\n\nexport function $isUploadNode(node: LexicalNode | null | undefined): node is UploadNode {\n  return node instanceof UploadNode\n}\n"],"mappings":"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","ignoreList":[]}