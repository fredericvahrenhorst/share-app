{"version":3,"file":"index.js","names":["dequal","reduceFieldsToValues","versionDefaults","React","useDeferredValue","useEffect","useRef","useState","toast","useAllFormFields","useForm","useFormModified","useFormSubmitted","useDebounce","useEffectEvent","useQueues","useConfig","useDocumentEvents","useDocumentInfo","useLocale","useTranslation","formatTimeToNow","reduceFieldsToValuesWithValidation","useDocumentDrawerContext","LeaveWithoutSaving","baseClass","minimumAnimationTime","Autosave","id","collection","global","globalDoc","config","routes","api","serverURL","docConfig","incrementVersionCount","lastUpdateTime","mostRecentVersionIsAutosaved","setLastUpdateTime","setMostRecentVersionIsAutosaved","setUnpublishedVersionCount","updateSavedDocumentData","onSave","onSaveFromDocumentDrawer","reportUpdate","dispatchFields","isValid","setBackgroundProcessing","setIsValid","formState","modified","submitted","code","locale","i18n","t","versionsConfig","versions","interval","autosaveInterval","drafts","autosave","validateOnDraft","Boolean","validate","_saving","setSaving","saving","debouncedFormState","formStateRef","modifiedRef","localeRef","current","queueTask","autosaveTimeoutRef","handleAutosave","undefined","startTimestamp","endTimestamp","hideIndicator","setTimeout","stopAutoSaveIndicator","Date","getTime","url","method","entitySlug","slug","data","valid","_status","skipSubmission","res","fetch","body","JSON","stringify","credentials","headers","language","_err","newDate","json","status","updatedAt","toISOString","operation","prev","errors","Array","isArray","fieldErrors","nonFieldErrors","reduce","fieldErrs","nonFieldErrs","err","newFieldErrs","newNonFieldErrs","message","push","forEach","dataError","field","type","error","document","doc","result","afterProcess","beforeProcess","didMount","previousDebouncedData","_","formData","__","prevFormData","clearTimeout","_jsxs","className","_jsx","Fragment","distance","date"],"sources":["../../../src/elements/Autosave/index.tsx"],"sourcesContent":["'use client'\n// TODO: abstract the `next/navigation` dependency out from this component\nimport type { ClientCollectionConfig, ClientGlobalConfig } from 'payload'\n\nimport { dequal } from 'dequal/lite'\nimport { reduceFieldsToValues, versionDefaults } from 'payload/shared'\nimport React, { useDeferredValue, useEffect, useRef, useState } from 'react'\nimport { toast } from 'sonner'\n\nimport {\n  useAllFormFields,\n  useForm,\n  useFormModified,\n  useFormSubmitted,\n} from '../../forms/Form/context.js'\nimport { useDebounce } from '../../hooks/useDebounce.js'\nimport { useEffectEvent } from '../../hooks/useEffectEvent.js'\nimport { useQueues } from '../../hooks/useQueues.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentEvents } from '../../providers/DocumentEvents/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { formatTimeToNow } from '../../utilities/formatDocTitle/formatDateTitle.js'\nimport { reduceFieldsToValuesWithValidation } from '../../utilities/reduceFieldsToValuesWithValidation.js'\nimport { useDocumentDrawerContext } from '../DocumentDrawer/Provider.js'\nimport { LeaveWithoutSaving } from '../LeaveWithoutSaving/index.js'\nimport './index.scss'\n\nconst baseClass = 'autosave'\n// The minimum time the saving state should be shown\nconst minimumAnimationTime = 1000\n\nexport type Props = {\n  collection?: ClientCollectionConfig\n  global?: ClientGlobalConfig\n  id?: number | string\n  publishedDocUpdatedAt: string\n}\n\nexport const Autosave: React.FC<Props> = ({ id, collection, global: globalDoc }) => {\n  const {\n    config: {\n      routes: { api },\n      serverURL,\n    },\n  } = useConfig()\n\n  const {\n    docConfig,\n    incrementVersionCount,\n    lastUpdateTime,\n    mostRecentVersionIsAutosaved,\n    setLastUpdateTime,\n    setMostRecentVersionIsAutosaved,\n    setUnpublishedVersionCount,\n    updateSavedDocumentData,\n  } = useDocumentInfo()\n\n  const { onSave: onSaveFromDocumentDrawer } = useDocumentDrawerContext()\n\n  const { reportUpdate } = useDocumentEvents()\n  const { dispatchFields, isValid, setBackgroundProcessing, setIsValid } = useForm()\n\n  const [formState] = useAllFormFields()\n  const modified = useFormModified()\n  const submitted = useFormSubmitted()\n\n  const { code: locale } = useLocale()\n  const { i18n, t } = useTranslation()\n\n  const versionsConfig = docConfig?.versions\n  let interval = versionDefaults.autosaveInterval\n\n  if (versionsConfig.drafts && versionsConfig.drafts.autosave) {\n    interval = versionsConfig.drafts.autosave.interval\n  }\n\n  const validateOnDraft = Boolean(\n    docConfig?.versions?.drafts && docConfig?.versions?.drafts.validate,\n  )\n\n  const [_saving, setSaving] = useState(false)\n\n  const saving = useDeferredValue(_saving)\n\n  const debouncedFormState = useDebounce(formState, interval)\n\n  const formStateRef = useRef(formState)\n  const modifiedRef = useRef(modified)\n  const localeRef = useRef(locale)\n\n  // Store fields in ref so the autosave func\n  // can always retrieve the most to date copies\n  // after the timeout has executed\n  formStateRef.current = formState\n\n  // Store modified in ref so the autosave func\n  // can bail out if modified becomes false while\n  // timing out during autosave\n  modifiedRef.current = modified\n\n  // Store locale in ref so the autosave func\n  // can always retrieve the most to date locale\n  localeRef.current = locale\n\n  const { queueTask } = useQueues()\n\n  const autosaveTimeoutRef = useRef<NodeJS.Timeout | null>(null)\n\n  const handleAutosave = useEffectEvent(() => {\n    autosaveTimeoutRef.current = undefined\n    // We need to log the time in order to figure out if we need to trigger the state off later\n    let startTimestamp = undefined\n    let endTimestamp = undefined\n\n    const hideIndicator = () => {\n      // If request was faster than minimum animation time, animate the difference\n      if (endTimestamp - startTimestamp < minimumAnimationTime) {\n        autosaveTimeoutRef.current = setTimeout(\n          () => {\n            setSaving(false)\n          },\n          minimumAnimationTime - (endTimestamp - startTimestamp),\n        )\n      } else {\n        stopAutoSaveIndicator()\n      }\n    }\n\n    queueTask(\n      async () => {\n        if (modified) {\n          startTimestamp = new Date().getTime()\n\n          setSaving(true)\n\n          let url: string\n          let method: string\n          let entitySlug: string\n\n          if (collection && id) {\n            entitySlug = collection.slug\n            url = `${serverURL}${api}/${entitySlug}/${id}?draft=true&autosave=true&locale=${localeRef.current}`\n            method = 'PATCH'\n          }\n\n          if (globalDoc) {\n            entitySlug = globalDoc.slug\n            url = `${serverURL}${api}/globals/${entitySlug}?draft=true&autosave=true&locale=${localeRef.current}`\n            method = 'POST'\n          }\n\n          if (url) {\n            if (modifiedRef.current) {\n              const { data, valid } = reduceFieldsToValuesWithValidation(formStateRef.current, true)\n\n              data._status = 'draft'\n\n              const skipSubmission =\n                submitted && !valid && versionsConfig?.drafts && versionsConfig?.drafts?.validate\n\n              if (!skipSubmission) {\n                let res\n\n                try {\n                  res = await fetch(url, {\n                    body: JSON.stringify(data),\n                    credentials: 'include',\n                    headers: {\n                      'Accept-Language': i18n.language,\n                      'Content-Type': 'application/json',\n                    },\n                    method,\n                  })\n                } catch (_err) {\n                  // Swallow Error\n                }\n\n                const newDate = new Date()\n                // We need to log the time in order to figure out if we need to trigger the state off later\n                endTimestamp = newDate.getTime()\n\n                const json = await res.json()\n\n                if (res.status === 200) {\n                  setLastUpdateTime(newDate.getTime())\n\n                  reportUpdate({\n                    id,\n                    entitySlug,\n                    updatedAt: newDate.toISOString(),\n                  })\n\n                  // if onSaveFromDocumentDrawer is defined, call it\n                  if (typeof onSaveFromDocumentDrawer === 'function') {\n                    void onSaveFromDocumentDrawer({\n                      ...json,\n                      operation: 'update',\n                    })\n                  }\n\n                  if (!mostRecentVersionIsAutosaved) {\n                    incrementVersionCount()\n                    setMostRecentVersionIsAutosaved(true)\n                    setUnpublishedVersionCount((prev) => prev + 1)\n                  }\n                }\n\n                if (versionsConfig?.drafts && versionsConfig?.drafts?.validate && json?.errors) {\n                  if (Array.isArray(json.errors)) {\n                    const [fieldErrors, nonFieldErrors] = json.errors.reduce(\n                      ([fieldErrs, nonFieldErrs], err) => {\n                        const newFieldErrs = []\n                        const newNonFieldErrs = []\n\n                        if (err?.message) {\n                          newNonFieldErrs.push(err)\n                        }\n\n                        if (Array.isArray(err?.data)) {\n                          err.data.forEach((dataError) => {\n                            if (dataError?.field) {\n                              newFieldErrs.push(dataError)\n                            } else {\n                              newNonFieldErrs.push(dataError)\n                            }\n                          })\n                        }\n\n                        return [\n                          [...fieldErrs, ...newFieldErrs],\n                          [...nonFieldErrs, ...newNonFieldErrs],\n                        ]\n                      },\n                      [[], []],\n                    )\n\n                    dispatchFields({\n                      type: 'ADD_SERVER_ERRORS',\n                      errors: fieldErrors,\n                    })\n\n                    nonFieldErrors.forEach((err) => {\n                      toast.error(err.message || i18n.t('error:unknown'))\n                    })\n\n                    setIsValid(false)\n                    hideIndicator()\n                    return\n                  }\n                } else {\n                  // If it's not an error then we can update the document data inside the context\n                  const document = json?.doc || json?.result\n\n                  // Manually update the data since this function doesn't fire the `submit` function from useForm\n                  if (document) {\n                    setIsValid(true)\n                    updateSavedDocumentData(document)\n                  }\n                }\n\n                hideIndicator()\n              }\n            }\n          }\n        }\n      },\n      {\n        afterProcess: () => {\n          setBackgroundProcessing(false)\n        },\n        beforeProcess: () => {\n          setBackgroundProcessing(true)\n        },\n      },\n    )\n  })\n\n  const didMount = useRef(false)\n  const previousDebouncedData = useRef(reduceFieldsToValues(debouncedFormState))\n\n  // When debounced fields change, autosave\n  useEffect(() => {\n    /**\n     * Ensure autosave doesn't run on mount\n     */\n    if (!didMount.current) {\n      didMount.current = true\n      return\n    }\n\n    /**\n     * Ensure autosave only runs if the form data changes, not every time the entire form state changes\n     * Remove `updatedAt` from comparison as it changes on every autosave interval.\n     */\n    const { updatedAt: _, ...formData } = reduceFieldsToValues(debouncedFormState)\n    const { updatedAt: __, ...prevFormData } = previousDebouncedData.current\n\n    if (dequal(formData, prevFormData)) {\n      return\n    }\n\n    previousDebouncedData.current = formData\n\n    handleAutosave()\n  }, [debouncedFormState])\n\n  /**\n   * If component unmounts, clear the autosave timeout\n   */\n  useEffect(() => {\n    return () => {\n      stopAutoSaveIndicator()\n    }\n  }, [])\n\n  const stopAutoSaveIndicator = useEffectEvent(() => {\n    if (autosaveTimeoutRef.current) {\n      clearTimeout(autosaveTimeoutRef.current)\n    }\n\n    setSaving(false)\n  })\n\n  return (\n    <div className={baseClass}>\n      {validateOnDraft && !isValid && <LeaveWithoutSaving />}\n      {saving && t('general:saving')}\n      {!saving && Boolean(lastUpdateTime) && (\n        <React.Fragment>\n          {t('version:lastSavedAgo', {\n            distance: formatTimeToNow({ date: lastUpdateTime, i18n }),\n          })}\n        </React.Fragment>\n      )}\n    </div>\n  )\n}\n"],"mappings":"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","ignoreList":[]}