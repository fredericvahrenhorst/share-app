{"version":3,"file":"buildView.js","names":["DefaultBrowseByFolderView","HydrateAuthProvider","RenderServerComponent","getFolderResultsComponentAndData","upsertPreferences","formatAdminURL","redirect","React","buildBrowseByFolderView","args","browseByFolderSlugs","browseByFolderSlugsFromArgs","disableBulkDelete","disableBulkEdit","enableRowSelections","folderID","initPageResult","isInDrawer","params","query","queryFromArgs","searchParams","locale","fullLocale","permissions","req","i18n","payload","config","queryFromReq","user","visibleEntities","folders","browseByFolder","Error","filter","collectionSlug","collections","read","includes","activeCollectionFolderSlugs","Array","isArray","relationTo","length","slug","routes","admin","adminRoute","browseByFolderPreferences","key","value","sort","sortPreference","viewPreference","breadcrumbs","documents","FolderResultsComponent","subfolders","activeCollectionSlugs","displayAs","resolvedFolderID","id","path","serverURL","serverProps","allowCreateCollectionSlugs","View","_jsxs","_Fragment","_jsx","clientProps","allCollectionFolderSlugs","baseFolderPath","folderFieldName","fieldName","Fallback","importMap"],"sources":["../../../src/views/BrowseByFolder/buildView.tsx"],"sourcesContent":["import type {\n  AdminViewServerProps,\n  BuildCollectionFolderViewResult,\n  FolderListViewClientProps,\n  FolderListViewServerPropsOnly,\n  FolderSortKeys,\n  ListQuery,\n} from 'payload'\n\nimport { DefaultBrowseByFolderView, HydrateAuthProvider } from '@payloadcms/ui'\nimport { RenderServerComponent } from '@payloadcms/ui/elements/RenderServerComponent'\nimport { getFolderResultsComponentAndData, upsertPreferences } from '@payloadcms/ui/rsc'\nimport { formatAdminURL } from '@payloadcms/ui/shared'\nimport { redirect } from 'next/navigation.js'\nimport React from 'react'\n\nexport type BuildFolderViewArgs = {\n  customCellProps?: Record<string, any>\n  disableBulkDelete?: boolean\n  disableBulkEdit?: boolean\n  enableRowSelections: boolean\n  folderID?: number | string\n  isInDrawer?: boolean\n  overrideEntityVisibility?: boolean\n  query: ListQuery\n} & AdminViewServerProps\n\nexport const buildBrowseByFolderView = async (\n  args: BuildFolderViewArgs,\n): Promise<BuildCollectionFolderViewResult> => {\n  const {\n    browseByFolderSlugs: browseByFolderSlugsFromArgs = [],\n    disableBulkDelete,\n    disableBulkEdit,\n    enableRowSelections,\n    folderID,\n    initPageResult,\n    isInDrawer,\n    params,\n    query: queryFromArgs,\n    searchParams,\n  } = args\n\n  const {\n    locale: fullLocale,\n    permissions,\n    req: {\n      i18n,\n      payload,\n      payload: { config },\n      query: queryFromReq,\n      user,\n    },\n    visibleEntities,\n  } = initPageResult\n\n  if (config.folders === false || config.folders.browseByFolder === false) {\n    throw new Error('not-found')\n  }\n\n  const browseByFolderSlugs = browseByFolderSlugsFromArgs.filter(\n    (collectionSlug) =>\n      permissions?.collections?.[collectionSlug]?.read &&\n      visibleEntities.collections.includes(collectionSlug),\n  )\n\n  const query = queryFromArgs || queryFromReq\n  const activeCollectionFolderSlugs: string[] =\n    Array.isArray(query?.relationTo) && query.relationTo.length\n      ? query.relationTo.filter(\n          (slug) =>\n            browseByFolderSlugs.includes(slug) || (config.folders && slug === config.folders.slug),\n        )\n      : [...browseByFolderSlugs, config.folders.slug]\n\n  const {\n    routes: { admin: adminRoute },\n  } = config\n\n  /**\n   * @todo: find a pattern to avoid setting preferences on hard navigation, i.e. direct links, page refresh, etc.\n   * This will ensure that prefs are only updated when explicitly set by the user\n   * This could potentially be done by injecting a `sessionID` into the params and comparing it against a session cookie\n   */\n  const browseByFolderPreferences = await upsertPreferences<{\n    sort?: FolderSortKeys\n    viewPreference?: 'grid' | 'list'\n  }>({\n    key: 'browse-by-folder',\n    req: initPageResult.req,\n    value: {\n      sort: query?.sort as FolderSortKeys,\n    },\n  })\n\n  const sortPreference: FolderSortKeys = browseByFolderPreferences?.sort || '_folderOrDocumentTitle'\n  const viewPreference = browseByFolderPreferences?.viewPreference || 'grid'\n\n  const { breadcrumbs, documents, FolderResultsComponent, subfolders } =\n    await getFolderResultsComponentAndData({\n      activeCollectionSlugs: activeCollectionFolderSlugs,\n      browseByFolder: false,\n      displayAs: viewPreference,\n      folderID,\n      req: initPageResult.req,\n      sort: sortPreference,\n    })\n\n  const resolvedFolderID = breadcrumbs[breadcrumbs.length - 1]?.id\n\n  if (\n    !isInDrawer &&\n    ((resolvedFolderID && folderID && folderID !== resolvedFolderID) ||\n      (folderID && !resolvedFolderID))\n  ) {\n    redirect(\n      formatAdminURL({\n        adminRoute,\n        path: config.admin.routes.browseByFolder,\n        serverURL: config.serverURL,\n      }),\n    )\n  }\n\n  const serverProps: Omit<FolderListViewServerPropsOnly, 'collectionConfig' | 'listPreferences'> = {\n    documents,\n    i18n,\n    locale: fullLocale,\n    params,\n    payload,\n    permissions,\n    searchParams,\n    subfolders,\n    user,\n  }\n\n  // const folderViewSlots = renderFolderViewSlots({\n  //   clientProps: {\n  //   },\n  //   description: staticDescription,\n  //   payload,\n  //   serverProps,\n  // })\n\n  // documents cannot be created without a parent folder in this view\n  const allowCreateCollectionSlugs = resolvedFolderID\n    ? [config.folders.slug, ...browseByFolderSlugs]\n    : [config.folders.slug]\n\n  return {\n    View: (\n      <>\n        <HydrateAuthProvider permissions={permissions} />\n        {RenderServerComponent({\n          clientProps: {\n            // ...folderViewSlots,\n            activeCollectionFolderSlugs,\n            allCollectionFolderSlugs: browseByFolderSlugs,\n            allowCreateCollectionSlugs,\n            baseFolderPath: `/browse-by-folder`,\n            breadcrumbs,\n            disableBulkDelete,\n            disableBulkEdit,\n            documents,\n            enableRowSelections,\n            folderFieldName: config.folders.fieldName,\n            folderID: resolvedFolderID || null,\n            FolderResultsComponent,\n            sort: sortPreference,\n            subfolders,\n            viewPreference,\n          } satisfies FolderListViewClientProps,\n          // Component:config.folders?.components?.views?.BrowseByFolders?.Component,\n          Fallback: DefaultBrowseByFolderView,\n          importMap: payload.importMap,\n          serverProps,\n        })}\n      </>\n    ),\n  }\n}\n"],"mappings":"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","ignoreList":[]}