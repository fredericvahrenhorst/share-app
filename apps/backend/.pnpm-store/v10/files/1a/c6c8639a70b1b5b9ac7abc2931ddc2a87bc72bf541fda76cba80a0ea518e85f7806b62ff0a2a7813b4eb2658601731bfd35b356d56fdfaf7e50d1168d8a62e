{"version":3,"sources":["../../src/predefinedMigrations/migrateVersionsV1_V2.ts"],"sourcesContent":["import type { ClientSession } from 'mongoose'\nimport type { Payload, PayloadRequest } from 'payload'\n\nimport type { MongooseAdapter } from '../index.js'\n\nimport { getCollection, getGlobal } from '../utilities/getEntity.js'\nimport { getSession } from '../utilities/getSession.js'\n\nexport async function migrateVersionsV1_V2({ req }: { req: PayloadRequest }) {\n  const { payload } = req\n\n  const adapter = payload.db as MongooseAdapter\n  const session = await getSession(adapter, req)\n\n  // For each collection\n\n  for (const { slug, versions } of payload.config.collections) {\n    if (versions?.drafts) {\n      await migrateCollectionDocs({ slug, adapter, payload, session })\n\n      payload.logger.info(`Migrated the \"${slug}\" collection.`)\n    }\n  }\n\n  // For each global\n  for (const { slug, versions } of payload.config.globals) {\n    if (versions) {\n      const { Model } = getGlobal({\n        adapter,\n        globalSlug: slug,\n        versions: true,\n      })\n\n      await Model.findOneAndUpdate(\n        {},\n        { latest: true },\n        {\n          session,\n          sort: { updatedAt: -1 },\n        },\n      ).exec()\n\n      payload.logger.info(`Migrated the \"${slug}\" global.`)\n    }\n  }\n}\n\nasync function migrateCollectionDocs({\n  slug,\n  adapter,\n  docsAtATime = 100,\n  payload,\n  session,\n}: {\n  adapter: MongooseAdapter\n  docsAtATime?: number\n  payload: Payload\n  session?: ClientSession\n  slug: string\n}) {\n  const { Model } = getCollection({\n    adapter,\n    collectionSlug: slug,\n    versions: true,\n  })\n  const remainingDocs = await Model.aggregate(\n    [\n      // Sort so that newest are first\n      {\n        $sort: {\n          updatedAt: -1,\n        },\n      },\n      // Group by parent ID\n      // take the $first of each\n      {\n        $group: {\n          _id: '$parent',\n          _versionID: { $first: '$_id' },\n          createdAt: { $first: '$createdAt' },\n          latest: { $first: '$latest' },\n          updatedAt: { $first: '$updatedAt' },\n          version: { $first: '$version' },\n        },\n      },\n      {\n        $match: {\n          latest: { $eq: null },\n        },\n      },\n      {\n        $limit: docsAtATime,\n      },\n    ],\n    {\n      allowDiskUse: true,\n      session,\n    },\n  ).exec()\n\n  if (!remainingDocs || remainingDocs.length === 0) {\n    const newVersions = await Model.find(\n      {\n        latest: {\n          $eq: true,\n        },\n      },\n      undefined,\n      { session },\n    )\n\n    if (newVersions?.length) {\n      payload.logger.info(\n        `Migrated ${newVersions.length} documents in the \"${slug}\" versions collection.`,\n      )\n    }\n\n    return\n  }\n\n  const remainingDocIDs = remainingDocs.map((doc) => doc._versionID)\n\n  await Model.updateMany(\n    {\n      _id: {\n        $in: remainingDocIDs,\n      },\n    },\n    {\n      latest: true,\n    },\n    {\n      session,\n    },\n  )\n\n  await migrateCollectionDocs({ slug, adapter, payload, session })\n}\n"],"names":["getCollection","getGlobal","getSession","migrateVersionsV1_V2","req","payload","adapter","db","session","slug","versions","config","collections","drafts","migrateCollectionDocs","logger","info","globals","Model","globalSlug","findOneAndUpdate","latest","sort","updatedAt","exec","docsAtATime","collectionSlug","remainingDocs","aggregate","$sort","$group","_id","_versionID","$first","createdAt","version","$match","$eq","$limit","allowDiskUse","length","newVersions","find","undefined","remainingDocIDs","map","doc","updateMany","$in"],"mappings":"AAKA,SAASA,aAAa,EAAEC,SAAS,QAAQ,4BAA2B;AACpE,SAASC,UAAU,QAAQ,6BAA4B;AAEvD,OAAO,eAAeC,qBAAqB,EAAEC,GAAG,EAA2B;IACzE,MAAM,EAAEC,OAAO,EAAE,GAAGD;IAEpB,MAAME,UAAUD,QAAQE,EAAE;IAC1B,MAAMC,UAAU,MAAMN,WAAWI,SAASF;IAE1C,sBAAsB;IAEtB,KAAK,MAAM,EAAEK,IAAI,EAAEC,QAAQ,EAAE,IAAIL,QAAQM,MAAM,CAACC,WAAW,CAAE;QAC3D,IAAIF,UAAUG,QAAQ;YACpB,MAAMC,sBAAsB;gBAAEL;gBAAMH;gBAASD;gBAASG;YAAQ;YAE9DH,QAAQU,MAAM,CAACC,IAAI,CAAC,CAAC,cAAc,EAAEP,KAAK,aAAa,CAAC;QAC1D;IACF;IAEA,kBAAkB;IAClB,KAAK,MAAM,EAAEA,IAAI,EAAEC,QAAQ,EAAE,IAAIL,QAAQM,MAAM,CAACM,OAAO,CAAE;QACvD,IAAIP,UAAU;YACZ,MAAM,EAAEQ,KAAK,EAAE,GAAGjB,UAAU;gBAC1BK;gBACAa,YAAYV;gBACZC,UAAU;YACZ;YAEA,MAAMQ,MAAME,gBAAgB,CAC1B,CAAC,GACD;gBAAEC,QAAQ;YAAK,GACf;gBACEb;gBACAc,MAAM;oBAAEC,WAAW,CAAC;gBAAE;YACxB,GACAC,IAAI;YAENnB,QAAQU,MAAM,CAACC,IAAI,CAAC,CAAC,cAAc,EAAEP,KAAK,SAAS,CAAC;QACtD;IACF;AACF;AAEA,eAAeK,sBAAsB,EACnCL,IAAI,EACJH,OAAO,EACPmB,cAAc,GAAG,EACjBpB,OAAO,EACPG,OAAO,EAOR;IACC,MAAM,EAAEU,KAAK,EAAE,GAAGlB,cAAc;QAC9BM;QACAoB,gBAAgBjB;QAChBC,UAAU;IACZ;IACA,MAAMiB,gBAAgB,MAAMT,MAAMU,SAAS,CACzC;QACE,gCAAgC;QAChC;YACEC,OAAO;gBACLN,WAAW,CAAC;YACd;QACF;QACA,qBAAqB;QACrB,0BAA0B;QAC1B;YACEO,QAAQ;gBACNC,KAAK;gBACLC,YAAY;oBAAEC,QAAQ;gBAAO;gBAC7BC,WAAW;oBAAED,QAAQ;gBAAa;gBAClCZ,QAAQ;oBAAEY,QAAQ;gBAAU;gBAC5BV,WAAW;oBAAEU,QAAQ;gBAAa;gBAClCE,SAAS;oBAAEF,QAAQ;gBAAW;YAChC;QACF;QACA;YACEG,QAAQ;gBACNf,QAAQ;oBAAEgB,KAAK;gBAAK;YACtB;QACF;QACA;YACEC,QAAQb;QACV;KACD,EACD;QACEc,cAAc;QACd/B;IACF,GACAgB,IAAI;IAEN,IAAI,CAACG,iBAAiBA,cAAca,MAAM,KAAK,GAAG;QAChD,MAAMC,cAAc,MAAMvB,MAAMwB,IAAI,CAClC;YACErB,QAAQ;gBACNgB,KAAK;YACP;QACF,GACAM,WACA;YAAEnC;QAAQ;QAGZ,IAAIiC,aAAaD,QAAQ;YACvBnC,QAAQU,MAAM,CAACC,IAAI,CACjB,CAAC,SAAS,EAAEyB,YAAYD,MAAM,CAAC,mBAAmB,EAAE/B,KAAK,sBAAsB,CAAC;QAEpF;QAEA;IACF;IAEA,MAAMmC,kBAAkBjB,cAAckB,GAAG,CAAC,CAACC,MAAQA,IAAId,UAAU;IAEjE,MAAMd,MAAM6B,UAAU,CACpB;QACEhB,KAAK;YACHiB,KAAKJ;QACP;IACF,GACA;QACEvB,QAAQ;IACV,GACA;QACEb;IACF;IAGF,MAAMM,sBAAsB;QAAEL;QAAMH;QAASD;QAASG;IAAQ;AAChE"}