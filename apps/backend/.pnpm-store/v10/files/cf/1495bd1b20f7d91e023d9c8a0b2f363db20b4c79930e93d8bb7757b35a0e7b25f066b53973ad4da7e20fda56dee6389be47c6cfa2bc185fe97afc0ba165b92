{"version":3,"sources":["../src/updateVersion.ts"],"sourcesContent":["import type { MongooseUpdateQueryOptions } from 'mongoose'\n\nimport { buildVersionCollectionFields, type UpdateVersion } from 'payload'\n\nimport type { MongooseAdapter } from './index.js'\n\nimport { buildQuery } from './queries/buildQuery.js'\nimport { buildProjectionFromSelect } from './utilities/buildProjectionFromSelect.js'\nimport { getCollection } from './utilities/getEntity.js'\nimport { getSession } from './utilities/getSession.js'\nimport { transform } from './utilities/transform.js'\n\nexport const updateVersion: UpdateVersion = async function updateVersion(\n  this: MongooseAdapter,\n  {\n    id,\n    collection: collectionSlug,\n    locale,\n    options: optionsArgs = {},\n    req,\n    returning,\n    select,\n    versionData,\n    where,\n  },\n) {\n  const { collectionConfig, Model } = getCollection({\n    adapter: this,\n    collectionSlug,\n    versions: true,\n  })\n\n  const whereToUse = where || { id: { equals: id } }\n  const fields = buildVersionCollectionFields(this.payload.config, collectionConfig)\n\n  const flattenedFields = buildVersionCollectionFields(this.payload.config, collectionConfig, true)\n\n  const options: MongooseUpdateQueryOptions = {\n    ...optionsArgs,\n    lean: true,\n    new: true,\n    projection: buildProjectionFromSelect({\n      adapter: this,\n      fields: flattenedFields,\n      select,\n    }),\n    session: await getSession(this, req),\n  }\n\n  const query = await buildQuery({\n    adapter: this,\n    fields: flattenedFields,\n    locale,\n    where: whereToUse,\n  })\n\n  transform({ adapter: this, data: versionData, fields, operation: 'write' })\n\n  if (returning === false) {\n    await Model.updateOne(query, versionData, options)\n    return null\n  }\n\n  const doc = await Model.findOneAndUpdate(query, versionData, options)\n\n  if (!doc) {\n    return null\n  }\n\n  transform({ adapter: this, data: doc, fields, operation: 'read' })\n\n  return doc\n}\n"],"names":["buildVersionCollectionFields","buildQuery","buildProjectionFromSelect","getCollection","getSession","transform","updateVersion","id","collection","collectionSlug","locale","options","optionsArgs","req","returning","select","versionData","where","collectionConfig","Model","adapter","versions","whereToUse","equals","fields","payload","config","flattenedFields","lean","new","projection","session","query","data","operation","updateOne","doc","findOneAndUpdate"],"mappings":"AAEA,SAASA,4BAA4B,QAA4B,UAAS;AAI1E,SAASC,UAAU,QAAQ,0BAAyB;AACpD,SAASC,yBAAyB,QAAQ,2CAA0C;AACpF,SAASC,aAAa,QAAQ,2BAA0B;AACxD,SAASC,UAAU,QAAQ,4BAA2B;AACtD,SAASC,SAAS,QAAQ,2BAA0B;AAEpD,OAAO,MAAMC,gBAA+B,eAAeA,cAEzD,EACEC,EAAE,EACFC,YAAYC,cAAc,EAC1BC,MAAM,EACNC,SAASC,cAAc,CAAC,CAAC,EACzBC,GAAG,EACHC,SAAS,EACTC,MAAM,EACNC,WAAW,EACXC,KAAK,EACN;IAED,MAAM,EAAEC,gBAAgB,EAAEC,KAAK,EAAE,GAAGhB,cAAc;QAChDiB,SAAS,IAAI;QACbX;QACAY,UAAU;IACZ;IAEA,MAAMC,aAAaL,SAAS;QAAEV,IAAI;YAAEgB,QAAQhB;QAAG;IAAE;IACjD,MAAMiB,SAASxB,6BAA6B,IAAI,CAACyB,OAAO,CAACC,MAAM,EAAER;IAEjE,MAAMS,kBAAkB3B,6BAA6B,IAAI,CAACyB,OAAO,CAACC,MAAM,EAAER,kBAAkB;IAE5F,MAAMP,UAAsC;QAC1C,GAAGC,WAAW;QACdgB,MAAM;QACNC,KAAK;QACLC,YAAY5B,0BAA0B;YACpCkB,SAAS,IAAI;YACbI,QAAQG;YACRZ;QACF;QACAgB,SAAS,MAAM3B,WAAW,IAAI,EAAES;IAClC;IAEA,MAAMmB,QAAQ,MAAM/B,WAAW;QAC7BmB,SAAS,IAAI;QACbI,QAAQG;QACRjB;QACAO,OAAOK;IACT;IAEAjB,UAAU;QAAEe,SAAS,IAAI;QAAEa,MAAMjB;QAAaQ;QAAQU,WAAW;IAAQ;IAEzE,IAAIpB,cAAc,OAAO;QACvB,MAAMK,MAAMgB,SAAS,CAACH,OAAOhB,aAAaL;QAC1C,OAAO;IACT;IAEA,MAAMyB,MAAM,MAAMjB,MAAMkB,gBAAgB,CAACL,OAAOhB,aAAaL;IAE7D,IAAI,CAACyB,KAAK;QACR,OAAO;IACT;IAEA/B,UAAU;QAAEe,SAAS,IAAI;QAAEa,MAAMG;QAAKZ;QAAQU,WAAW;IAAO;IAEhE,OAAOE;AACT,EAAC"}