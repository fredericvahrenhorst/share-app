{"version":3,"sources":["../src/updateMany.ts"],"sourcesContent":["import type { MongooseUpdateQueryOptions } from 'mongoose'\n\nimport { flattenWhereToOperators, type UpdateMany } from 'payload'\n\nimport type { MongooseAdapter } from './index.js'\n\nimport { buildQuery } from './queries/buildQuery.js'\nimport { buildSortParam } from './queries/buildSortParam.js'\nimport { buildProjectionFromSelect } from './utilities/buildProjectionFromSelect.js'\nimport { getCollection } from './utilities/getEntity.js'\nimport { getSession } from './utilities/getSession.js'\nimport { handleError } from './utilities/handleError.js'\nimport { transform } from './utilities/transform.js'\n\nexport const updateMany: UpdateMany = async function updateMany(\n  this: MongooseAdapter,\n  {\n    collection: collectionSlug,\n    data,\n    limit,\n    locale,\n    options: optionsArgs = {},\n    req,\n    returning,\n    select,\n    sort: sortArg,\n    where,\n  },\n) {\n  let hasNearConstraint = false\n\n  if (where) {\n    const constraints = flattenWhereToOperators(where)\n    hasNearConstraint = constraints.some((prop) => Object.keys(prop).some((key) => key === 'near'))\n  }\n\n  const { collectionConfig, Model } = getCollection({ adapter: this, collectionSlug })\n\n  let sort: Record<string, unknown> | undefined\n  if (!hasNearConstraint) {\n    sort = buildSortParam({\n      adapter: this,\n      config: this.payload.config,\n      fields: collectionConfig.flattenedFields,\n      locale,\n      sort: sortArg || collectionConfig.defaultSort,\n      timestamps: true,\n    })\n  }\n\n  const options: MongooseUpdateQueryOptions = {\n    ...optionsArgs,\n    lean: true,\n    new: true,\n    projection: buildProjectionFromSelect({\n      adapter: this,\n      fields: collectionConfig.flattenedFields,\n      select,\n    }),\n    session: await getSession(this, req),\n  }\n\n  let query = await buildQuery({\n    adapter: this,\n    collectionSlug,\n    fields: collectionConfig.flattenedFields,\n    locale,\n    where,\n  })\n\n  transform({ adapter: this, data, fields: collectionConfig.fields, operation: 'write' })\n\n  try {\n    if (typeof limit === 'number' && limit > 0) {\n      const documentsToUpdate = await Model.find(\n        query,\n        {},\n        { ...options, limit, projection: { _id: 1 }, sort },\n      )\n      if (documentsToUpdate.length === 0) {\n        return null\n      }\n\n      query = { _id: { $in: documentsToUpdate.map((doc) => doc._id) } }\n    }\n\n    await Model.updateMany(query, data, options)\n  } catch (error) {\n    handleError({ collection: collectionSlug, error, req })\n  }\n\n  if (returning === false) {\n    return null\n  }\n\n  const result = await Model.find(\n    query,\n    {},\n    {\n      ...options,\n      sort,\n    },\n  )\n\n  transform({\n    adapter: this,\n    data: result,\n    fields: collectionConfig.fields,\n    operation: 'read',\n  })\n\n  return result\n}\n"],"names":["flattenWhereToOperators","buildQuery","buildSortParam","buildProjectionFromSelect","getCollection","getSession","handleError","transform","updateMany","collection","collectionSlug","data","limit","locale","options","optionsArgs","req","returning","select","sort","sortArg","where","hasNearConstraint","constraints","some","prop","Object","keys","key","collectionConfig","Model","adapter","config","payload","fields","flattenedFields","defaultSort","timestamps","lean","new","projection","session","query","operation","documentsToUpdate","find","_id","length","$in","map","doc","error","result"],"mappings":"AAEA,SAASA,uBAAuB,QAAyB,UAAS;AAIlE,SAASC,UAAU,QAAQ,0BAAyB;AACpD,SAASC,cAAc,QAAQ,8BAA6B;AAC5D,SAASC,yBAAyB,QAAQ,2CAA0C;AACpF,SAASC,aAAa,QAAQ,2BAA0B;AACxD,SAASC,UAAU,QAAQ,4BAA2B;AACtD,SAASC,WAAW,QAAQ,6BAA4B;AACxD,SAASC,SAAS,QAAQ,2BAA0B;AAEpD,OAAO,MAAMC,aAAyB,eAAeA,WAEnD,EACEC,YAAYC,cAAc,EAC1BC,IAAI,EACJC,KAAK,EACLC,MAAM,EACNC,SAASC,cAAc,CAAC,CAAC,EACzBC,GAAG,EACHC,SAAS,EACTC,MAAM,EACNC,MAAMC,OAAO,EACbC,KAAK,EACN;IAED,IAAIC,oBAAoB;IAExB,IAAID,OAAO;QACT,MAAME,cAAcvB,wBAAwBqB;QAC5CC,oBAAoBC,YAAYC,IAAI,CAAC,CAACC,OAASC,OAAOC,IAAI,CAACF,MAAMD,IAAI,CAAC,CAACI,MAAQA,QAAQ;IACzF;IAEA,MAAM,EAAEC,gBAAgB,EAAEC,KAAK,EAAE,GAAG1B,cAAc;QAAE2B,SAAS,IAAI;QAAErB;IAAe;IAElF,IAAIS;IACJ,IAAI,CAACG,mBAAmB;QACtBH,OAAOjB,eAAe;YACpB6B,SAAS,IAAI;YACbC,QAAQ,IAAI,CAACC,OAAO,CAACD,MAAM;YAC3BE,QAAQL,iBAAiBM,eAAe;YACxCtB;YACAM,MAAMC,WAAWS,iBAAiBO,WAAW;YAC7CC,YAAY;QACd;IACF;IAEA,MAAMvB,UAAsC;QAC1C,GAAGC,WAAW;QACduB,MAAM;QACNC,KAAK;QACLC,YAAYrC,0BAA0B;YACpC4B,SAAS,IAAI;YACbG,QAAQL,iBAAiBM,eAAe;YACxCjB;QACF;QACAuB,SAAS,MAAMpC,WAAW,IAAI,EAAEW;IAClC;IAEA,IAAI0B,QAAQ,MAAMzC,WAAW;QAC3B8B,SAAS,IAAI;QACbrB;QACAwB,QAAQL,iBAAiBM,eAAe;QACxCtB;QACAQ;IACF;IAEAd,UAAU;QAAEwB,SAAS,IAAI;QAAEpB;QAAMuB,QAAQL,iBAAiBK,MAAM;QAAES,WAAW;IAAQ;IAErF,IAAI;QACF,IAAI,OAAO/B,UAAU,YAAYA,QAAQ,GAAG;YAC1C,MAAMgC,oBAAoB,MAAMd,MAAMe,IAAI,CACxCH,OACA,CAAC,GACD;gBAAE,GAAG5B,OAAO;gBAAEF;gBAAO4B,YAAY;oBAAEM,KAAK;gBAAE;gBAAG3B;YAAK;YAEpD,IAAIyB,kBAAkBG,MAAM,KAAK,GAAG;gBAClC,OAAO;YACT;YAEAL,QAAQ;gBAAEI,KAAK;oBAAEE,KAAKJ,kBAAkBK,GAAG,CAAC,CAACC,MAAQA,IAAIJ,GAAG;gBAAE;YAAE;QAClE;QAEA,MAAMhB,MAAMtB,UAAU,CAACkC,OAAO/B,MAAMG;IACtC,EAAE,OAAOqC,OAAO;QACd7C,YAAY;YAAEG,YAAYC;YAAgByC;YAAOnC;QAAI;IACvD;IAEA,IAAIC,cAAc,OAAO;QACvB,OAAO;IACT;IAEA,MAAMmC,SAAS,MAAMtB,MAAMe,IAAI,CAC7BH,OACA,CAAC,GACD;QACE,GAAG5B,OAAO;QACVK;IACF;IAGFZ,UAAU;QACRwB,SAAS,IAAI;QACbpB,MAAMyC;QACNlB,QAAQL,iBAAiBK,MAAM;QAC/BS,WAAW;IACb;IAEA,OAAOS;AACT,EAAC"}