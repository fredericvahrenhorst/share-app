{"version":3,"file":"useQueryPresets.js","names":["useModal","getTranslation","transformColumnsToPreferences","transformColumnsToSearchParams","React","useCallback","useMemo","toast","useConfig","useListQuery","useTranslation","ConfirmationModal","useDocumentDrawer","useListDrawer","PopupList","PopupListGroupLabel","Translation","confirmDeletePresetModalSlug","queryPresetsSlug","useQueryPresets","activePreset","collectionSlug","queryPresetPermissions","modified","query","refineListData","setModified","setQueryModified","i18n","t","openModal","config","routes","api","apiRoute","getEntityConfig","presetConfig","PresetDocumentDrawer","openDrawer","openDocumentDrawer","id","CreateNewPresetDrawer","closeDrawer","closeCreateNewDrawer","openCreateNewDrawer","filterOptions","isTemp","not_equals","relatedCollection","equals","ListDrawer","closeListDrawer","openListDrawer","collectionSlugs","selectedCollection","handlePresetChange","preset","columns","undefined","where","resetQueryPreset","handleDeletePreset","fetch","method","then","res","json","status","success","label","labels","singular","title","errors","forEach","error","message","_err","saveCurrentChanges","body","JSON","stringify","credentials","headers","queryPresetMenuItems","hasModifiedPreset","_jsx","plural","_jsxs","ButtonGroup","Button","onClick","update","isShared","delete","_Fragment","initialData","onSave","doc","redirectAfterCreate","DeletePresetModal","elements","1","children","i18nKey","variables","confirmingLabel","heading","modalSlug","onConfirm","EditPresetDrawer","onDelete","onDuplicate","openPresetListDrawer","PresetListDrawer","allowCreate","disableQueryPresets","onSelect","resetPreset"],"sources":["../../../src/elements/ListControls/useQueryPresets.tsx"],"sourcesContent":["import type { CollectionSlug, QueryPreset, SanitizedCollectionPermission } from 'payload'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { getTranslation } from '@payloadcms/translations'\nimport { transformColumnsToPreferences, transformColumnsToSearchParams } from 'payload/shared'\nimport React, { Fragment, useCallback, useMemo } from 'react'\nimport { toast } from 'sonner'\n\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useListQuery } from '../../providers/ListQuery/context.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { ConfirmationModal } from '../ConfirmationModal/index.js'\nimport { useDocumentDrawer } from '../DocumentDrawer/index.js'\nimport { useListDrawer } from '../ListDrawer/index.js'\nimport { PopupList } from '../Popup/index.js'\nimport { PopupListGroupLabel } from '../Popup/PopupGroupLabel/index.js'\nimport { Translation } from '../Translation/index.js'\n\nconst confirmDeletePresetModalSlug = 'confirm-delete-preset'\n\nconst queryPresetsSlug = 'payload-query-presets'\n\nexport const useQueryPresets = ({\n  activePreset,\n  collectionSlug,\n  queryPresetPermissions,\n}: {\n  activePreset: QueryPreset\n  collectionSlug: CollectionSlug\n  queryPresetPermissions: SanitizedCollectionPermission\n}): {\n  CreateNewPresetDrawer: React.ReactNode\n  DeletePresetModal: React.ReactNode\n  EditPresetDrawer: React.ReactNode\n  hasModifiedPreset: boolean\n  openPresetListDrawer: () => void\n  PresetListDrawer: React.ReactNode\n  queryPresetMenuItems: React.ReactNode[]\n  resetPreset: () => Promise<void>\n} => {\n  const { modified, query, refineListData, setModified: setQueryModified } = useListQuery()\n\n  const { i18n, t } = useTranslation()\n  const { openModal } = useModal()\n\n  const {\n    config: {\n      routes: { api: apiRoute },\n    },\n    getEntityConfig,\n  } = useConfig()\n\n  const presetConfig = getEntityConfig({ collectionSlug: queryPresetsSlug })\n\n  const [PresetDocumentDrawer, , { openDrawer: openDocumentDrawer }] = useDocumentDrawer({\n    id: activePreset?.id,\n    collectionSlug: queryPresetsSlug,\n  })\n\n  const [\n    CreateNewPresetDrawer,\n    ,\n    { closeDrawer: closeCreateNewDrawer, openDrawer: openCreateNewDrawer },\n  ] = useDocumentDrawer({\n    collectionSlug: queryPresetsSlug,\n  })\n\n  const filterOptions = useMemo(\n    () => ({\n      'payload-query-presets': {\n        isTemp: {\n          not_equals: true,\n        },\n        relatedCollection: {\n          equals: collectionSlug,\n        },\n      },\n    }),\n    [collectionSlug],\n  )\n\n  const [ListDrawer, , { closeDrawer: closeListDrawer, openDrawer: openListDrawer }] =\n    useListDrawer({\n      collectionSlugs: [queryPresetsSlug],\n      filterOptions,\n      selectedCollection: queryPresetsSlug,\n    })\n\n  const handlePresetChange = useCallback(\n    async (preset: QueryPreset) => {\n      await refineListData(\n        {\n          columns: preset.columns ? transformColumnsToSearchParams(preset.columns) : undefined,\n          preset: preset.id,\n          where: preset.where,\n        },\n        false,\n      )\n    },\n    [refineListData],\n  )\n\n  const resetQueryPreset = useCallback(async () => {\n    await refineListData(\n      {\n        columns: undefined,\n        preset: undefined,\n        where: undefined,\n      },\n      false,\n    )\n  }, [refineListData])\n\n  const handleDeletePreset = useCallback(async () => {\n    try {\n      await fetch(`${apiRoute}/${queryPresetsSlug}/${activePreset.id}`, {\n        method: 'DELETE',\n      }).then(async (res) => {\n        try {\n          const json = await res.json()\n\n          if (res.status < 400) {\n            toast.success(\n              t('general:titleDeleted', {\n                label: getTranslation(presetConfig?.labels?.singular, i18n),\n                title: activePreset.title,\n              }),\n            )\n\n            await resetQueryPreset()\n          } else {\n            if (json.errors) {\n              json.errors.forEach((error) => toast.error(error.message))\n            } else {\n              toast.error(t('error:deletingTitle', { title: activePreset.title }))\n            }\n          }\n        } catch (_err) {\n          toast.error(t('error:deletingTitle', { title: activePreset.title }))\n        }\n      })\n    } catch (_err) {\n      toast.error(t('error:deletingTitle', { title: activePreset.title }))\n    }\n  }, [apiRoute, activePreset?.id, activePreset?.title, t, presetConfig, i18n, resetQueryPreset])\n\n  const saveCurrentChanges = useCallback(async () => {\n    try {\n      await fetch(`${apiRoute}/payload-query-presets/${activePreset.id}`, {\n        body: JSON.stringify({\n          columns: transformColumnsToPreferences(query.columns),\n          where: query.where,\n        }),\n        credentials: 'include',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        method: 'PATCH',\n      }).then(async (res) => {\n        try {\n          const json = await res.json()\n\n          if (res.status < 400) {\n            toast.success(\n              t('general:updatedLabelSuccessfully', {\n                label: getTranslation(presetConfig?.labels?.singular, i18n),\n              }),\n            )\n\n            setQueryModified(false)\n          } else {\n            if (json.errors) {\n              json.errors.forEach((error) => toast.error(error.message))\n            } else {\n              toast.error(t('error:unknown'))\n            }\n          }\n        } catch (_err) {\n          toast.error(t('error:unknown'))\n        }\n      })\n    } catch (_err) {\n      toast.error(t('error:unknown'))\n    }\n  }, [\n    apiRoute,\n    activePreset?.id,\n    query.columns,\n    query.where,\n    t,\n    presetConfig?.labels?.singular,\n    i18n,\n    setQueryModified,\n  ])\n\n  // Memoize so that components aren't re-rendered on query and column changes\n  const queryPresetMenuItems = useMemo(() => {\n    const hasModifiedPreset = activePreset && modified\n\n    return [\n      <PopupListGroupLabel\n        key=\"preset-group-label\"\n        label={getTranslation(presetConfig?.labels?.plural, i18n)}\n      />,\n      <PopupList.ButtonGroup key=\"preset-group-buttons\">\n        {hasModifiedPreset && (\n          <PopupList.Button\n            onClick={async () => {\n              await refineListData(\n                {\n                  columns: transformColumnsToSearchParams(activePreset.columns),\n                  where: activePreset.where,\n                },\n                false,\n              )\n            }}\n          >\n            {t('general:reset')}\n          </PopupList.Button>\n        )}\n        {hasModifiedPreset && queryPresetPermissions.update && (\n          <PopupList.Button\n            onClick={async () => {\n              await saveCurrentChanges()\n            }}\n          >\n            {activePreset?.isShared ? t('general:updateForEveryone') : t('general:save')}\n          </PopupList.Button>\n        )}\n        <PopupList.Button\n          onClick={() => {\n            openCreateNewDrawer()\n          }}\n        >\n          {t('general:createNew')}\n        </PopupList.Button>\n        {activePreset && queryPresetPermissions?.delete && (\n          <>\n            <PopupList.Button onClick={() => openModal(confirmDeletePresetModalSlug)}>\n              {t('general:delete')}\n            </PopupList.Button>\n            <PopupList.Button\n              onClick={() => {\n                openDocumentDrawer()\n              }}\n            >\n              {t('general:edit')}\n            </PopupList.Button>\n          </>\n        )}\n      </PopupList.ButtonGroup>,\n    ]\n  }, [\n    activePreset,\n    queryPresetPermissions?.delete,\n    queryPresetPermissions?.update,\n    openCreateNewDrawer,\n    openDocumentDrawer,\n    openModal,\n    saveCurrentChanges,\n    t,\n    refineListData,\n    modified,\n    presetConfig?.labels?.plural,\n    i18n,\n  ])\n\n  return {\n    CreateNewPresetDrawer: (\n      <CreateNewPresetDrawer\n        initialData={{\n          columns: transformColumnsToPreferences(query.columns),\n          relatedCollection: collectionSlug,\n          where: query.where,\n        }}\n        onSave={async ({ doc }) => {\n          closeCreateNewDrawer()\n          await handlePresetChange(doc as QueryPreset)\n        }}\n        redirectAfterCreate={false}\n      />\n    ),\n    DeletePresetModal: (\n      <ConfirmationModal\n        body={\n          <Translation\n            elements={{\n              '1': ({ children }) => <strong>{children}</strong>,\n            }}\n            i18nKey=\"general:aboutToDelete\"\n            t={t}\n            variables={{\n              label: presetConfig?.labels?.singular,\n              title: activePreset?.title,\n            }}\n          />\n        }\n        confirmingLabel={t('general:deleting')}\n        heading={t('general:confirmDeletion')}\n        modalSlug={confirmDeletePresetModalSlug}\n        onConfirm={handleDeletePreset}\n      />\n    ),\n    EditPresetDrawer: (\n      <PresetDocumentDrawer\n        onDelete={() => {\n          // setSelectedPreset(undefined)\n        }}\n        onDuplicate={async ({ doc }) => {\n          await handlePresetChange(doc as QueryPreset)\n        }}\n        onSave={async ({ doc }) => {\n          await handlePresetChange(doc as QueryPreset)\n        }}\n      />\n    ),\n    hasModifiedPreset: modified,\n    openPresetListDrawer: openListDrawer,\n    PresetListDrawer: (\n      <ListDrawer\n        allowCreate={false}\n        disableQueryPresets\n        onSelect={async ({ doc }) => {\n          closeListDrawer()\n          await handlePresetChange(doc as QueryPreset)\n        }}\n      />\n    ),\n    queryPresetMenuItems,\n    resetPreset: resetQueryPreset,\n  }\n}\n"],"mappings":"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","ignoreList":[]}