{"version":3,"file":"handleAdminPage.js","names":["getRouteWithoutAdmin","isAdminRoute","getRouteInfo","adminRoute","config","defaultIDType","payload","route","routeWithoutAdmin","routeSegments","split","filter","Boolean","entityType","entitySlug","createOrID","collectionSlug","undefined","globalSlug","collectionConfig","globalConfig","idType","collections","globals","find","global","slug","customIDType","docID","Number"],"sources":["../../../src/utilities/initPage/handleAdminPage.ts"],"sourcesContent":["import type {\n  Payload,\n  SanitizedCollectionConfig,\n  SanitizedConfig,\n  SanitizedGlobalConfig,\n} from 'payload'\n\nimport { fieldAffectsData } from 'payload/shared'\n\nimport { getRouteWithoutAdmin, isAdminRoute } from './shared.js'\n\ntype Args = {\n  adminRoute: string\n  config: SanitizedConfig\n  defaultIDType: Payload['db']['defaultIDType']\n  payload?: Payload\n  route: string\n}\n\ntype RouteInfo = {\n  collectionConfig?: SanitizedCollectionConfig\n  collectionSlug?: string\n  docID?: number | string\n  globalConfig?: SanitizedGlobalConfig\n  globalSlug?: string\n}\n\nexport function getRouteInfo({\n  adminRoute,\n  config,\n  defaultIDType,\n  payload,\n  route,\n}: Args): RouteInfo {\n  if (isAdminRoute({ adminRoute, config, route })) {\n    const routeWithoutAdmin = getRouteWithoutAdmin({ adminRoute, route })\n    const routeSegments = routeWithoutAdmin.split('/').filter(Boolean)\n    const [entityType, entitySlug, createOrID] = routeSegments\n    const collectionSlug = entityType === 'collections' ? entitySlug : undefined\n    const globalSlug = entityType === 'globals' ? entitySlug : undefined\n\n    let collectionConfig: SanitizedCollectionConfig | undefined\n    let globalConfig: SanitizedGlobalConfig | undefined\n    let idType = defaultIDType\n\n    if (collectionSlug) {\n      collectionConfig = payload.collections?.[collectionSlug]?.config\n    }\n\n    if (globalSlug) {\n      globalConfig = config.globals.find((global) => global.slug === globalSlug)\n    }\n\n    // If the collection is using a custom ID, we need to determine its type\n    if (collectionConfig && payload) {\n      if (payload.collections?.[collectionSlug]?.customIDType) {\n        idType = payload.collections?.[collectionSlug].customIDType\n      }\n    }\n\n    const docID =\n      collectionSlug && createOrID !== 'create'\n        ? idType === 'number'\n          ? Number(createOrID)\n          : createOrID\n        : undefined\n\n    return {\n      collectionConfig,\n      collectionSlug,\n      docID,\n      globalConfig,\n      globalSlug,\n    }\n  }\n\n  return {}\n}\n"],"mappings":"AASA,SAASA,oBAAoB,EAAEC,YAAY,QAAQ;AAkBnD,OAAO,SAASC,aAAa;EAC3BC,UAAU;EACVC,MAAM;EACNC,aAAa;EACbC,OAAO;EACPC;AAAK,CACA;EACL,IAAIN,YAAA,CAAa;IAAEE,UAAA;IAAYC,MAAA;IAAQG;EAAM,IAAI;IAC/C,MAAMC,iBAAA,GAAoBR,oBAAA,CAAqB;MAAEG,UAAA;MAAYI;IAAM;IACnE,MAAME,aAAA,GAAgBD,iBAAA,CAAkBE,KAAK,CAAC,KAAKC,MAAM,CAACC,OAAA;IAC1D,MAAM,CAACC,UAAA,EAAYC,UAAA,EAAYC,UAAA,CAAW,GAAGN,aAAA;IAC7C,MAAMO,cAAA,GAAiBH,UAAA,KAAe,gBAAgBC,UAAA,GAAaG,SAAA;IACnE,MAAMC,UAAA,GAAaL,UAAA,KAAe,YAAYC,UAAA,GAAaG,SAAA;IAE3D,IAAIE,gBAAA;IACJ,IAAIC,YAAA;IACJ,IAAIC,MAAA,GAAShB,aAAA;IAEb,IAAIW,cAAA,EAAgB;MAClBG,gBAAA,GAAmBb,OAAA,CAAQgB,WAAW,GAAGN,cAAA,CAAe,EAAEZ,MAAA;IAC5D;IAEA,IAAIc,UAAA,EAAY;MACdE,YAAA,GAAehB,MAAA,CAAOmB,OAAO,CAACC,IAAI,CAAEC,MAAA,IAAWA,MAAA,CAAOC,IAAI,KAAKR,UAAA;IACjE;IAEA;IACA,IAAIC,gBAAA,IAAoBb,OAAA,EAAS;MAC/B,IAAIA,OAAA,CAAQgB,WAAW,GAAGN,cAAA,CAAe,EAAEW,YAAA,EAAc;QACvDN,MAAA,GAASf,OAAA,CAAQgB,WAAW,GAAGN,cAAA,CAAe,CAACW,YAAA;MACjD;IACF;IAEA,MAAMC,KAAA,GACJZ,cAAA,IAAkBD,UAAA,KAAe,WAC7BM,MAAA,KAAW,WACTQ,MAAA,CAAOd,UAAA,IACPA,UAAA,GACFE,SAAA;IAEN,OAAO;MACLE,gBAAA;MACAH,cAAA;MACAY,KAAA;MACAR,YAAA;MACAF;IACF;EACF;EAEA,OAAO,CAAC;AACV","ignoreList":[]}