{"version":3,"file":"getRouteData.js","names":["formatAdminURL","Account","BrowseByFolder","CollectionFolderView","CreateFirstUserView","Dashboard","Document","DocumentView","forgotPasswordBaseClass","ForgotPasswordView","ListView","loginBaseClass","LoginView","LogoutInactivity","LogoutView","ResetPassword","resetPasswordBaseClass","UnauthorizedView","Verify","verifyBaseClass","attachViewActions","getViewActions","getCustomViewByRoute","getDocumentViewInfo","isPathMatchingRoute","baseClasses","account","folders","forgot","login","reset","verify","oneSegmentViews","browseByFolder","createFirstUser","inactivity","logout","unauthorized","getRouteData","adminRoute","config","currentRoute","importMap","searchParams","segments","ViewToRender","templateClassName","templateType","documentSubViewType","viewType","folderID","initPageOptions","route","routeParams","segmentOne","segmentTwo","segmentThree","segmentFour","segmentFive","isGlobal","isCollection","matchedCollection","undefined","matchedGlobal","isBrowseByFolderEnabled","browseByFolderSlugs","collections","reduce","acc","slug","serverProps","viewActions","admin","components","actions","find","collectionConfig","globals","globalConfig","length","Component","viewKey","routes","matchedRoute","Object","entries","exact","path","collection","concat","views","list","global","editConfig","edit","folderCollection","id","versionID","viewInfo","collectionOrGlobal","viewKeyArg","view","reverse","DefaultView"],"sources":["../../../src/views/Root/getRouteData.ts"],"sourcesContent":["import type {\n  AdminViewServerProps,\n  CollectionSlug,\n  DocumentSubViewTypes,\n  ImportMap,\n  PayloadComponent,\n  SanitizedConfig,\n  ServerPropsFromView,\n  ViewTypes,\n} from 'payload'\nimport type React from 'react'\n\nimport { formatAdminURL } from 'payload/shared'\n\nimport type { initPage } from '../../utilities/initPage/index.js'\n\nimport { Account } from '../Account/index.js'\nimport { BrowseByFolder } from '../BrowseByFolder/index.js'\nimport { CollectionFolderView } from '../CollectionFolders/index.js'\nimport { CreateFirstUserView } from '../CreateFirstUser/index.js'\nimport { Dashboard } from '../Dashboard/index.js'\nimport { Document as DocumentView } from '../Document/index.js'\nimport { forgotPasswordBaseClass, ForgotPasswordView } from '../ForgotPassword/index.js'\nimport { ListView } from '../List/index.js'\nimport { loginBaseClass, LoginView } from '../Login/index.js'\nimport { LogoutInactivity, LogoutView } from '../Logout/index.js'\nimport { ResetPassword, resetPasswordBaseClass } from '../ResetPassword/index.js'\nimport { UnauthorizedView } from '../Unauthorized/index.js'\nimport { Verify, verifyBaseClass } from '../Verify/index.js'\nimport { attachViewActions, getViewActions } from './attachViewActions.js'\nimport { getCustomViewByRoute } from './getCustomViewByRoute.js'\nimport { getDocumentViewInfo } from './getDocumentViewInfo.js'\nimport { isPathMatchingRoute } from './isPathMatchingRoute.js'\n\nconst baseClasses = {\n  account: 'account',\n  folders: 'folders',\n  forgot: forgotPasswordBaseClass,\n  login: loginBaseClass,\n  reset: resetPasswordBaseClass,\n  verify: verifyBaseClass,\n}\n\ntype OneSegmentViews = {\n  [K in Exclude<keyof SanitizedConfig['admin']['routes'], 'reset'>]: React.FC<AdminViewServerProps>\n}\n\nexport type ViewFromConfig = {\n  Component?: React.FC<AdminViewServerProps>\n  payloadComponent?: PayloadComponent<AdminViewServerProps>\n}\n\nconst oneSegmentViews: OneSegmentViews = {\n  account: Account,\n  browseByFolder: BrowseByFolder,\n  createFirstUser: CreateFirstUserView,\n  forgot: ForgotPasswordView,\n  inactivity: LogoutInactivity,\n  login: LoginView,\n  logout: LogoutView,\n  unauthorized: UnauthorizedView,\n}\n\ntype GetRouteDataArgs = {\n  adminRoute: string\n  config: SanitizedConfig\n  currentRoute: string\n  importMap: ImportMap\n  searchParams: {\n    [key: string]: string | string[]\n  }\n  segments: string[]\n}\n\ntype GetRouteDataResult = {\n  browseByFolderSlugs: CollectionSlug[]\n  DefaultView: ViewFromConfig\n  documentSubViewType?: DocumentSubViewTypes\n  folderID?: string\n  initPageOptions: Parameters<typeof initPage>[0]\n  serverProps: ServerPropsFromView\n  templateClassName: string\n  templateType: 'default' | 'minimal'\n  viewType?: ViewTypes\n}\n\nexport const getRouteData = ({\n  adminRoute,\n  config,\n  currentRoute,\n  importMap,\n  searchParams,\n  segments,\n}: GetRouteDataArgs): GetRouteDataResult => {\n  let ViewToRender: ViewFromConfig = null\n  let templateClassName: string\n  let templateType: 'default' | 'minimal' | undefined\n  let documentSubViewType: DocumentSubViewTypes\n  let viewType: ViewTypes\n  let folderID: string\n\n  const initPageOptions: Parameters<typeof initPage>[0] = {\n    config,\n    importMap,\n    route: currentRoute,\n    routeParams: {},\n    searchParams,\n  }\n\n  const [segmentOne, segmentTwo, segmentThree, segmentFour, segmentFive] = segments\n\n  const isGlobal = segmentOne === 'globals'\n  const isCollection = segmentOne === 'collections'\n  let matchedCollection: SanitizedConfig['collections'][number] = undefined\n  let matchedGlobal: SanitizedConfig['globals'][number] = undefined\n\n  const isBrowseByFolderEnabled = config.folders && config.folders.browseByFolder\n  const browseByFolderSlugs =\n    (isBrowseByFolderEnabled &&\n      config.collections.reduce((acc, { slug, folders }) => {\n        if (folders && folders.browseByFolder) {\n          return [...acc, slug]\n        }\n        return acc\n      }, [])) ||\n    []\n\n  const serverProps: ServerPropsFromView = {\n    viewActions: config?.admin?.components?.actions || [],\n  }\n\n  if (isCollection) {\n    matchedCollection = config.collections.find(({ slug }) => slug === segmentTwo)\n    serverProps.collectionConfig = matchedCollection\n  }\n\n  if (isGlobal) {\n    matchedGlobal = config.globals.find(({ slug }) => slug === segmentTwo)\n    serverProps.globalConfig = matchedGlobal\n  }\n\n  switch (segments.length) {\n    case 0: {\n      if (currentRoute === adminRoute) {\n        ViewToRender = {\n          Component: Dashboard,\n        }\n        templateClassName = 'dashboard'\n        templateType = 'default'\n        viewType = 'dashboard'\n      }\n      break\n    }\n    case 1: {\n      // users can override the default routes via `admin.routes` config\n      // i.e.{ admin: { routes: { logout: '/sign-out', inactivity: '/idle' }}}\n      let viewKey: keyof typeof oneSegmentViews\n\n      if (config.admin.routes) {\n        const matchedRoute = Object.entries(config.admin.routes).find(([, route]) => {\n          return isPathMatchingRoute({\n            currentRoute,\n            exact: true,\n            path: formatAdminURL({ adminRoute, path: route }),\n          })\n        })\n\n        if (matchedRoute) {\n          viewKey = matchedRoute[0] as keyof typeof oneSegmentViews\n        }\n      }\n\n      if (oneSegmentViews[viewKey]) {\n        // --> /account\n        // --> /create-first-user\n        // --> /browse-by-folder\n        // --> /forgot\n        // --> /login\n        // --> /logout\n        // --> /logout-inactivity\n        // --> /unauthorized\n\n        ViewToRender = {\n          Component: oneSegmentViews[viewKey],\n        }\n\n        templateClassName = baseClasses[viewKey]\n        templateType = 'minimal'\n\n        if (viewKey === 'account') {\n          templateType = 'default'\n          viewType = 'account'\n        }\n\n        if (isBrowseByFolderEnabled && viewKey === 'browseByFolder') {\n          templateType = 'default'\n          viewType = 'folders'\n        }\n      }\n      break\n    }\n    case 2: {\n      if (`/${segmentOne}` === config.admin.routes.reset) {\n        // --> /reset/:token\n        ViewToRender = {\n          Component: ResetPassword,\n        }\n        templateClassName = baseClasses[segmentTwo]\n        templateType = 'minimal'\n        viewType = 'reset'\n      } else if (\n        isBrowseByFolderEnabled &&\n        `/${segmentOne}` === config.admin.routes.browseByFolder\n      ) {\n        // --> /browse-by-folder/:folderID\n        initPageOptions.routeParams.folderID = folderID\n\n        ViewToRender = {\n          Component: oneSegmentViews.browseByFolder,\n        }\n        templateClassName = baseClasses.folders\n        templateType = 'default'\n        viewType = 'folders'\n        folderID = segmentTwo\n      } else if (isCollection && matchedCollection) {\n        // --> /collections/:collectionSlug\n        initPageOptions.routeParams.collection = matchedCollection.slug\n\n        ViewToRender = {\n          Component: ListView,\n        }\n\n        templateClassName = `${segmentTwo}-list`\n        templateType = 'default'\n        viewType = 'list'\n        serverProps.viewActions = serverProps.viewActions.concat(\n          matchedCollection.admin.components?.views?.list?.actions,\n        )\n      } else if (isGlobal && matchedGlobal) {\n        // --> /globals/:globalSlug\n        initPageOptions.routeParams.global = matchedGlobal.slug\n\n        ViewToRender = {\n          Component: DocumentView,\n        }\n\n        templateClassName = 'global-edit'\n        templateType = 'default'\n        viewType = 'document'\n\n        // add default view actions\n        serverProps.viewActions = serverProps.viewActions.concat(\n          getViewActions({\n            editConfig: matchedGlobal.admin?.components?.views?.edit,\n            viewKey: 'default',\n          }),\n        )\n      }\n      break\n    }\n    default:\n      if (segmentTwo === 'verify') {\n        // --> /:collectionSlug/verify/:token\n        initPageOptions.routeParams.collection = segmentOne\n\n        ViewToRender = {\n          Component: Verify,\n        }\n\n        templateClassName = 'verify'\n        templateType = 'minimal'\n        viewType = 'verify'\n      } else if (isCollection && matchedCollection) {\n        initPageOptions.routeParams.collection = matchedCollection.slug\n        if (config.folders && segmentThree === config.folders.slug && matchedCollection.folders) {\n          // Collection Folder Views\n          // --> /collections/:collectionSlug/:folderCollectionSlug\n          // --> /collections/:collectionSlug/:folderCollectionSlug/:folderID\n          initPageOptions.routeParams.folderCollection = segmentThree\n          initPageOptions.routeParams.folderID = segmentFour\n\n          ViewToRender = {\n            Component: CollectionFolderView,\n          }\n\n          templateClassName = `collection-folders`\n          templateType = 'default'\n          viewType = 'collection-folders'\n          folderID = segmentFour\n        } else {\n          // Collection Edit Views\n          // --> /collections/:collectionSlug/:id\n          // --> /collections/:collectionSlug/:id/api\n          // --> /collections/:collectionSlug/:id/versions\n          // --> /collections/:collectionSlug/:id/versions/:versionID\n          initPageOptions.routeParams.id = segmentThree\n          initPageOptions.routeParams.versionID = segmentFive\n\n          ViewToRender = {\n            Component: DocumentView,\n          }\n\n          templateClassName = `collection-default-edit`\n          templateType = 'default'\n\n          const viewInfo = getDocumentViewInfo([segmentFour, segmentFive])\n          viewType = viewInfo.viewType\n          documentSubViewType = viewInfo.documentSubViewType\n\n          attachViewActions({\n            collectionOrGlobal: matchedCollection,\n            serverProps,\n            viewKeyArg: documentSubViewType,\n          })\n        }\n      } else if (isGlobal && matchedGlobal) {\n        // Global Edit Views\n        // --> /globals/:globalSlug/versions\n        // --> /globals/:globalSlug/versions/:versionID\n        // --> /globals/:globalSlug/api\n        initPageOptions.routeParams.global = matchedGlobal.slug\n        initPageOptions.routeParams.versionID = segmentFour\n\n        ViewToRender = {\n          Component: DocumentView,\n        }\n\n        templateClassName = `global-edit`\n        templateType = 'default'\n\n        const viewInfo = getDocumentViewInfo([segmentThree, segmentFour])\n        viewType = viewInfo.viewType\n        documentSubViewType = viewInfo.documentSubViewType\n\n        attachViewActions({\n          collectionOrGlobal: matchedGlobal,\n          serverProps,\n          viewKeyArg: documentSubViewType,\n        })\n      }\n      break\n  }\n\n  if (!ViewToRender) {\n    ViewToRender = getCustomViewByRoute({ config, currentRoute })?.view\n  }\n\n  serverProps.viewActions.reverse()\n\n  return {\n    browseByFolderSlugs,\n    DefaultView: ViewToRender,\n    documentSubViewType,\n    folderID,\n    initPageOptions,\n    serverProps,\n    templateClassName,\n    templateType,\n    viewType,\n  }\n}\n"],"mappings":"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","ignoreList":[]}