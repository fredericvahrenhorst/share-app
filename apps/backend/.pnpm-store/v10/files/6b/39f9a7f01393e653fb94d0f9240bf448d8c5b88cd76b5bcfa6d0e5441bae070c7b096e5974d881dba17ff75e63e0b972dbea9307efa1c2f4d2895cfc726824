{"version":3,"sources":["../src/findOne.ts"],"sourcesContent":["import type { AggregateOptions, QueryOptions } from 'mongoose'\n\nimport { type FindOne } from 'payload'\n\nimport type { MongooseAdapter } from './index.js'\n\nimport { buildQuery } from './queries/buildQuery.js'\nimport { aggregatePaginate } from './utilities/aggregatePaginate.js'\nimport { buildJoinAggregation } from './utilities/buildJoinAggregation.js'\nimport { buildProjectionFromSelect } from './utilities/buildProjectionFromSelect.js'\nimport { getCollection } from './utilities/getEntity.js'\nimport { getSession } from './utilities/getSession.js'\nimport { transform } from './utilities/transform.js'\n\nexport const findOne: FindOne = async function findOne(\n  this: MongooseAdapter,\n  { collection: collectionSlug, draftsEnabled, joins, locale, req, select, where = {} },\n) {\n  const { collectionConfig, Model } = getCollection({ adapter: this, collectionSlug })\n\n  const session = await getSession(this, req)\n  const options: AggregateOptions & QueryOptions = {\n    lean: true,\n    session,\n  }\n\n  const query = await buildQuery({\n    adapter: this,\n    collectionSlug,\n    fields: collectionConfig.flattenedFields,\n    locale,\n    where,\n  })\n\n  const projection = buildProjectionFromSelect({\n    adapter: this,\n    fields: collectionConfig.flattenedFields,\n    select,\n  })\n\n  const aggregate = await buildJoinAggregation({\n    adapter: this,\n    collection: collectionSlug,\n    collectionConfig,\n    draftsEnabled,\n    joins,\n    locale,\n    projection,\n    query,\n  })\n\n  let doc\n  if (aggregate) {\n    const { docs } = await aggregatePaginate({\n      adapter: this,\n      joinAggregation: aggregate,\n      limit: 1,\n      Model,\n      pagination: false,\n      projection,\n      query,\n      session,\n    })\n    doc = docs[0]\n  } else {\n    ;(options as Record<string, unknown>).projection = projection\n    doc = await Model.findOne(query, {}, options)\n  }\n\n  if (!doc) {\n    return null\n  }\n\n  transform({ adapter: this, data: doc, fields: collectionConfig.fields, operation: 'read' })\n\n  return doc\n}\n"],"names":["buildQuery","aggregatePaginate","buildJoinAggregation","buildProjectionFromSelect","getCollection","getSession","transform","findOne","collection","collectionSlug","draftsEnabled","joins","locale","req","select","where","collectionConfig","Model","adapter","session","options","lean","query","fields","flattenedFields","projection","aggregate","doc","docs","joinAggregation","limit","pagination","data","operation"],"mappings":"AAMA,SAASA,UAAU,QAAQ,0BAAyB;AACpD,SAASC,iBAAiB,QAAQ,mCAAkC;AACpE,SAASC,oBAAoB,QAAQ,sCAAqC;AAC1E,SAASC,yBAAyB,QAAQ,2CAA0C;AACpF,SAASC,aAAa,QAAQ,2BAA0B;AACxD,SAASC,UAAU,QAAQ,4BAA2B;AACtD,SAASC,SAAS,QAAQ,2BAA0B;AAEpD,OAAO,MAAMC,UAAmB,eAAeA,QAE7C,EAAEC,YAAYC,cAAc,EAAEC,aAAa,EAAEC,KAAK,EAAEC,MAAM,EAAEC,GAAG,EAAEC,MAAM,EAAEC,QAAQ,CAAC,CAAC,EAAE;IAErF,MAAM,EAAEC,gBAAgB,EAAEC,KAAK,EAAE,GAAGb,cAAc;QAAEc,SAAS,IAAI;QAAET;IAAe;IAElF,MAAMU,UAAU,MAAMd,WAAW,IAAI,EAAEQ;IACvC,MAAMO,UAA2C;QAC/CC,MAAM;QACNF;IACF;IAEA,MAAMG,QAAQ,MAAMtB,WAAW;QAC7BkB,SAAS,IAAI;QACbT;QACAc,QAAQP,iBAAiBQ,eAAe;QACxCZ;QACAG;IACF;IAEA,MAAMU,aAAatB,0BAA0B;QAC3Ce,SAAS,IAAI;QACbK,QAAQP,iBAAiBQ,eAAe;QACxCV;IACF;IAEA,MAAMY,YAAY,MAAMxB,qBAAqB;QAC3CgB,SAAS,IAAI;QACbV,YAAYC;QACZO;QACAN;QACAC;QACAC;QACAa;QACAH;IACF;IAEA,IAAIK;IACJ,IAAID,WAAW;QACb,MAAM,EAAEE,IAAI,EAAE,GAAG,MAAM3B,kBAAkB;YACvCiB,SAAS,IAAI;YACbW,iBAAiBH;YACjBI,OAAO;YACPb;YACAc,YAAY;YACZN;YACAH;YACAH;QACF;QACAQ,MAAMC,IAAI,CAAC,EAAE;IACf,OAAO;;QACHR,QAAoCK,UAAU,GAAGA;QACnDE,MAAM,MAAMV,MAAMV,OAAO,CAACe,OAAO,CAAC,GAAGF;IACvC;IAEA,IAAI,CAACO,KAAK;QACR,OAAO;IACT;IAEArB,UAAU;QAAEY,SAAS,IAAI;QAAEc,MAAML;QAAKJ,QAAQP,iBAAiBO,MAAM;QAAEU,WAAW;IAAO;IAEzF,OAAON;AACT,EAAC"}