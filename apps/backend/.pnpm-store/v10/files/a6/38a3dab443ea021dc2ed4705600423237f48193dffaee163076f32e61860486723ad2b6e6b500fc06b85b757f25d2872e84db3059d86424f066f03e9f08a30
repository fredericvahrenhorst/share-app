{"version":3,"sources":["../src/staticHandler.ts"],"sourcesContent":["import type { CollectionConfig } from 'payload'\nimport type { Readable } from 'stream'\n\nimport type { CollectionCachingConfig, PluginOptions, StaticHandler } from './types.js'\n\nimport { createKey } from './utilities/createKey.js'\nimport { getStorageClient } from './utilities/getStorageClient.js'\n\ninterface Args {\n  cachingOptions?: PluginOptions['uploadCaching']\n  collection: CollectionConfig\n  debug?: boolean\n}\n\n// Type guard for NodeJS.Readable streams\nconst isNodeReadableStream = (body: unknown): body is Readable => {\n  return (\n    typeof body === 'object' &&\n    body !== null &&\n    'pipe' in body &&\n    typeof (body as any).pipe === 'function' &&\n    'destroy' in body &&\n    typeof (body as any).destroy === 'function'\n  )\n}\n\n// Convert a stream into a promise that resolves with a Buffer\nconst streamToBuffer = async (readableStream: any) => {\n  const chunks = []\n  for await (const chunk of readableStream) {\n    chunks.push(typeof chunk === 'string' ? Buffer.from(chunk) : chunk)\n  }\n  return Buffer.concat(chunks)\n}\n\nexport const getStaticHandler = ({ cachingOptions, collection, debug }: Args): StaticHandler => {\n  let maxAge = 86400 // 24 hours default\n  let collCacheConfig: CollectionCachingConfig | undefined\n  if (cachingOptions !== false) {\n    // Set custom maxAge for all collections\n    maxAge = cachingOptions?.maxAge || maxAge\n    collCacheConfig = cachingOptions?.collections?.[collection.slug] || {}\n  }\n\n  // Set maxAge using collection-specific override\n  maxAge = collCacheConfig?.maxAge || maxAge\n\n  const cachingEnabled =\n    cachingOptions !== false &&\n    !!process.env.PAYLOAD_CLOUD_CACHE_KEY &&\n    collCacheConfig?.enabled !== false\n\n  return async (req, { params }) => {\n    let key = ''\n    try {\n      const { identityID, storageClient } = await getStorageClient()\n\n      key = createKey({\n        collection: collection.slug,\n        filename: params.filename,\n        identityID,\n      })\n\n      const object = await storageClient.getObject({\n        Bucket: process.env.PAYLOAD_CLOUD_BUCKET,\n        Key: key,\n      })\n\n      if (!object.Body || !object.ContentType || !object.ETag) {\n        return new Response(null, { status: 404, statusText: 'Not Found' })\n      }\n\n      // On error, manually destroy stream to close socket\n      if (object.Body && isNodeReadableStream(object.Body)) {\n        const stream = object.Body\n        stream.on('error', (err) => {\n          req.payload.logger.error({\n            err,\n            key,\n            msg: 'Error streaming S3 object, destroying stream',\n          })\n          stream.destroy()\n        })\n      }\n\n      const bodyBuffer = await streamToBuffer(object.Body)\n\n      return new Response(bodyBuffer, {\n        headers: new Headers({\n          'Content-Length': String(object.ContentLength),\n          'Content-Type': object.ContentType,\n          ...(cachingEnabled && { 'Cache-Control': `public, max-age=${maxAge}` }),\n          ETag: object.ETag,\n        }),\n        status: 200,\n      })\n    } catch (err: unknown) {\n      // Handle each error explicitly\n      if (err instanceof Error) {\n        /**\n         * Note: If AccessDenied comes back, it typically means that the object key is not found.\n         * The AWS SDK throws this because it attempts an s3:ListBucket operation under the hood\n         * if it does not find the object key, which we have disallowed in our bucket policy.\n         */\n        if (err.name === 'AccessDenied') {\n          req.payload.logger.warn({\n            awsErr: debug ? err : err.name,\n            collectionSlug: collection.slug,\n            msg: `Requested file not found in cloud storage: ${params.filename}`,\n            params,\n            requestedKey: key,\n          })\n          return new Response(null, { status: 404, statusText: 'Not Found' })\n        } else if (err.name === 'NoSuchKey') {\n          req.payload.logger.warn({\n            awsErr: debug ? err : err.name,\n            collectionSlug: collection.slug,\n            msg: `Requested file not found in cloud storage: ${params.filename}`,\n            params,\n            requestedKey: key,\n          })\n          return new Response(null, { status: 404, statusText: 'Not Found' })\n        }\n      }\n\n      req.payload.logger.error({\n        collectionSlug: collection.slug,\n        err,\n        msg: `Error getting file from cloud storage: ${params.filename}`,\n        params,\n        requestedKey: key,\n      })\n      return new Response('Internal Server Error', { status: 500 })\n    }\n  }\n}\n"],"names":["createKey","getStorageClient","isNodeReadableStream","body","pipe","destroy","streamToBuffer","readableStream","chunks","chunk","push","Buffer","from","concat","getStaticHandler","cachingOptions","collection","debug","maxAge","collCacheConfig","collections","slug","cachingEnabled","process","env","PAYLOAD_CLOUD_CACHE_KEY","enabled","req","params","key","identityID","storageClient","filename","object","getObject","Bucket","PAYLOAD_CLOUD_BUCKET","Key","Body","ContentType","ETag","Response","status","statusText","stream","on","err","payload","logger","error","msg","bodyBuffer","headers","Headers","String","ContentLength","Error","name","warn","awsErr","collectionSlug","requestedKey"],"mappings":"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"}