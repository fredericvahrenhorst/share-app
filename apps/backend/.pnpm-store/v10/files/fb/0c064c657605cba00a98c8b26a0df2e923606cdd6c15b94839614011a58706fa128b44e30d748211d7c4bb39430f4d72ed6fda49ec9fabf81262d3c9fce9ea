{"version":3,"sources":["../../src/utilities/buildProjectionFromSelect.ts"],"sourcesContent":["import type {\n  FieldAffectingData,\n  FlattenedField,\n  SelectIncludeType,\n  SelectMode,\n  SelectType,\n} from 'payload'\n\nimport {\n  deepCopyObjectSimple,\n  fieldAffectsData,\n  fieldShouldBeLocalized,\n  getSelectMode,\n} from 'payload/shared'\n\nimport type { MongooseAdapter } from '../index.js'\n\nconst addFieldToProjection = ({\n  adapter,\n  databaseSchemaPath,\n  field,\n  parentIsLocalized,\n  projection,\n}: {\n  adapter: MongooseAdapter\n  databaseSchemaPath: string\n  field: FieldAffectingData\n  parentIsLocalized: boolean\n  projection: Record<string, true>\n}) => {\n  const { config } = adapter.payload\n\n  if (parentIsLocalized && config.localization) {\n    for (const locale of config.localization.localeCodes) {\n      const localeDatabaseSchemaPath = databaseSchemaPath.replace('<locale>', locale)\n      projection[`${localeDatabaseSchemaPath}${field.name}`] = true\n    }\n  } else {\n    projection[`${databaseSchemaPath}${field.name}`] = true\n  }\n}\n\nconst traverseFields = ({\n  adapter,\n  databaseSchemaPath = '',\n  fields,\n  parentIsLocalized = false,\n  projection,\n  select,\n  selectAllOnCurrentLevel = false,\n  selectMode,\n}: {\n  adapter: MongooseAdapter\n  databaseSchemaPath?: string\n  fields: FlattenedField[]\n  parentIsLocalized?: boolean\n  projection: Record<string, true>\n  select: SelectType\n  selectAllOnCurrentLevel?: boolean\n  selectMode: SelectMode\n}) => {\n  for (const field of fields) {\n    if (fieldAffectsData(field)) {\n      if (selectMode === 'include') {\n        if (select[field.name] === true || selectAllOnCurrentLevel) {\n          addFieldToProjection({\n            adapter,\n            databaseSchemaPath,\n            field,\n            parentIsLocalized,\n            projection,\n          })\n          continue\n        }\n\n        if (!select[field.name]) {\n          continue\n        }\n      }\n\n      if (selectMode === 'exclude') {\n        if (typeof select[field.name] === 'undefined') {\n          addFieldToProjection({\n            adapter,\n            databaseSchemaPath,\n            field,\n            parentIsLocalized,\n            projection,\n          })\n          continue\n        }\n\n        if (select[field.name] === false) {\n          continue\n        }\n      }\n    }\n\n    let fieldDatabaseSchemaPath = databaseSchemaPath\n\n    if (fieldAffectsData(field)) {\n      fieldDatabaseSchemaPath = `${databaseSchemaPath}${field.name}.`\n\n      if (fieldShouldBeLocalized({ field, parentIsLocalized })) {\n        fieldDatabaseSchemaPath = `${fieldDatabaseSchemaPath}<locale>.`\n      }\n    }\n\n    switch (field.type) {\n      case 'array':\n      case 'group':\n      case 'tab': {\n        const fieldSelect = select[field.name] as SelectType\n\n        if (field.type === 'array' && selectMode === 'include') {\n          fieldSelect.id = true\n        }\n\n        traverseFields({\n          adapter,\n          databaseSchemaPath: fieldDatabaseSchemaPath,\n          fields: field.flattenedFields,\n          parentIsLocalized: parentIsLocalized || field.localized,\n          projection,\n          select: fieldSelect,\n          selectMode,\n        })\n\n        break\n      }\n      case 'blocks': {\n        const blocksSelect = select[field.name] as SelectType\n\n        for (const _block of field.blockReferences ?? field.blocks) {\n          const block = typeof _block === 'string' ? adapter.payload.blocks[_block] : _block\n\n          if (!block) {\n            continue\n          }\n\n          if (\n            (selectMode === 'include' && blocksSelect[block.slug] === true) ||\n            (selectMode === 'exclude' && typeof blocksSelect[block.slug] === 'undefined')\n          ) {\n            traverseFields({\n              adapter,\n              databaseSchemaPath: fieldDatabaseSchemaPath,\n              fields: block.flattenedFields,\n              parentIsLocalized: parentIsLocalized || field.localized,\n              projection,\n              select: {},\n              selectAllOnCurrentLevel: true,\n              selectMode: 'include',\n            })\n            continue\n          }\n\n          let blockSelectMode = selectMode\n\n          if (selectMode === 'exclude' && blocksSelect[block.slug] === false) {\n            blockSelectMode = 'include'\n          }\n\n          if (typeof blocksSelect[block.slug] !== 'object') {\n            blocksSelect[block.slug] = {}\n          }\n\n          if (blockSelectMode === 'include' && typeof blocksSelect[block.slug] === 'object') {\n            const blockSelect = blocksSelect[block.slug] as SelectIncludeType\n            blockSelect.id = true\n            blockSelect.blockType = true\n          }\n\n          traverseFields({\n            adapter,\n            databaseSchemaPath: fieldDatabaseSchemaPath,\n            fields: block.flattenedFields,\n            parentIsLocalized: parentIsLocalized || field.localized,\n            projection,\n            select: blocksSelect[block.slug] as SelectType,\n            selectMode: blockSelectMode,\n          })\n        }\n\n        break\n      }\n\n      default:\n        break\n    }\n  }\n}\n\nexport const buildProjectionFromSelect = ({\n  adapter,\n  fields,\n  select,\n}: {\n  adapter: MongooseAdapter\n  fields: FlattenedField[]\n  select?: SelectType\n}): Record<string, true> | undefined => {\n  if (!select) {\n    return\n  }\n\n  const projection: Record<string, true> = {\n    _id: true,\n  }\n\n  traverseFields({\n    adapter,\n    fields,\n    projection,\n    // Clone to safely mutate it later\n    select: deepCopyObjectSimple(select),\n    selectMode: getSelectMode(select),\n  })\n\n  return projection\n}\n"],"names":["deepCopyObjectSimple","fieldAffectsData","fieldShouldBeLocalized","getSelectMode","addFieldToProjection","adapter","databaseSchemaPath","field","parentIsLocalized","projection","config","payload","localization","locale","localeCodes","localeDatabaseSchemaPath","replace","name","traverseFields","fields","select","selectAllOnCurrentLevel","selectMode","fieldDatabaseSchemaPath","type","fieldSelect","id","flattenedFields","localized","blocksSelect","_block","blockReferences","blocks","block","slug","blockSelectMode","blockSelect","blockType","buildProjectionFromSelect","_id"],"mappings":"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"}