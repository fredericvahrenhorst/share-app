{"version":3,"file":"getFieldsForRowComparison.spec.js","names":["getFieldsForRowComparison","describe","it","arrayFields","name","type","field","fields","versionRow","comparisonRow","row","baseVersionField","expect","toEqual","blockAFields","blocks","slug","blockType"],"sources":["../../../../../src/views/Version/RenderFieldsToDiff/utilities/getFieldsForRowComparison.spec.ts"],"sourcesContent":["import { getFieldsForRowComparison } from './getFieldsForRowComparison'\nimport type { ArrayFieldClient, BlocksFieldClient, ClientField } from 'payload'\n\ndescribe('getFieldsForRowComparison', () => {\n  describe('array fields', () => {\n    it('should return fields from array field', () => {\n      const arrayFields: ClientField[] = [\n        { name: 'title', type: 'text' },\n        { name: 'description', type: 'textarea' },\n      ]\n\n      const field: ArrayFieldClient = {\n        type: 'array',\n        name: 'items',\n        fields: arrayFields,\n      }\n\n      const { fields } = getFieldsForRowComparison({\n        field,\n        versionRow: {},\n        comparisonRow: {},\n        row: 0,\n        baseVersionField: { fields: [] },\n      })\n\n      expect(fields).toEqual(arrayFields)\n    })\n  })\n\n  describe('blocks fields', () => {\n    it('should return combined fields when block types match', () => {\n      const blockAFields: ClientField[] = [\n        { name: 'a', type: 'text' },\n        { name: 'b', type: 'text' },\n      ]\n\n      const field: BlocksFieldClient = {\n        type: 'blocks',\n        name: 'myBlocks',\n        blocks: [\n          {\n            slug: 'blockA',\n            fields: blockAFields,\n          },\n        ],\n      }\n\n      const versionRow = { blockType: 'blockA' }\n      const comparisonRow = { blockType: 'blockA' }\n\n      const { fields } = getFieldsForRowComparison({\n        field,\n        versionRow,\n        comparisonRow,\n        row: 0,\n        baseVersionField: { fields: [] },\n      })\n\n      expect(fields).toEqual(blockAFields)\n    })\n\n    it('should return unique combined fields when block types differ', () => {\n      const field: BlocksFieldClient = {\n        type: 'blocks',\n        name: 'myBlocks',\n        blocks: [\n          {\n            slug: 'blockA',\n            fields: [\n              { name: 'a', type: 'text' },\n              { name: 'b', type: 'text' },\n            ],\n          },\n          {\n            slug: 'blockB',\n            fields: [\n              { name: 'b', type: 'text' },\n              { name: 'c', type: 'text' },\n            ],\n          },\n        ],\n      }\n\n      const versionRow = { blockType: 'blockA' }\n      const comparisonRow = { blockType: 'blockB' }\n\n      const { fields } = getFieldsForRowComparison({\n        field,\n        versionRow,\n        comparisonRow,\n        row: 0,\n        baseVersionField: { fields: [] },\n      })\n\n      // Should contain all unique fields from both blocks\n      expect(fields).toEqual([\n        { name: 'a', type: 'text' },\n        { name: 'b', type: 'text' },\n        { name: 'c', type: 'text' },\n      ])\n    })\n  })\n})\n"],"mappings":"AAAA,SAASA,yBAAyB,QAAQ;AAG1CC,QAAA,CAAS,6BAA6B;EACpCA,QAAA,CAAS,gBAAgB;IACvBC,EAAA,CAAG,yCAAyC;MAC1C,MAAMC,WAAA,GAA6B,CACjC;QAAEC,IAAA,EAAM;QAASC,IAAA,EAAM;MAAO,GAC9B;QAAED,IAAA,EAAM;QAAeC,IAAA,EAAM;MAAW,EACzC;MAED,MAAMC,KAAA,GAA0B;QAC9BD,IAAA,EAAM;QACND,IAAA,EAAM;QACNG,MAAA,EAAQJ;MACV;MAEA,MAAM;QAAEI;MAAM,CAAE,GAAGP,yBAAA,CAA0B;QAC3CM,KAAA;QACAE,UAAA,EAAY,CAAC;QACbC,aAAA,EAAe,CAAC;QAChBC,GAAA,EAAK;QACLC,gBAAA,EAAkB;UAAEJ,MAAA,EAAQ;QAAG;MACjC;MAEAK,MAAA,CAAOL,MAAA,EAAQM,OAAO,CAACV,WAAA;IACzB;EACF;EAEAF,QAAA,CAAS,iBAAiB;IACxBC,EAAA,CAAG,wDAAwD;MACzD,MAAMY,YAAA,GAA8B,CAClC;QAAEV,IAAA,EAAM;QAAKC,IAAA,EAAM;MAAO,GAC1B;QAAED,IAAA,EAAM;QAAKC,IAAA,EAAM;MAAO,EAC3B;MAED,MAAMC,KAAA,GAA2B;QAC/BD,IAAA,EAAM;QACND,IAAA,EAAM;QACNW,MAAA,EAAQ,CACN;UACEC,IAAA,EAAM;UACNT,MAAA,EAAQO;QACV;MAEJ;MAEA,MAAMN,UAAA,GAAa;QAAES,SAAA,EAAW;MAAS;MACzC,MAAMR,aAAA,GAAgB;QAAEQ,SAAA,EAAW;MAAS;MAE5C,MAAM;QAAEV;MAAM,CAAE,GAAGP,yBAAA,CAA0B;QAC3CM,KAAA;QACAE,UAAA;QACAC,aAAA;QACAC,GAAA,EAAK;QACLC,gBAAA,EAAkB;UAAEJ,MAAA,EAAQ;QAAG;MACjC;MAEAK,MAAA,CAAOL,MAAA,EAAQM,OAAO,CAACC,YAAA;IACzB;IAEAZ,EAAA,CAAG,gEAAgE;MACjE,MAAMI,KAAA,GAA2B;QAC/BD,IAAA,EAAM;QACND,IAAA,EAAM;QACNW,MAAA,EAAQ,CACN;UACEC,IAAA,EAAM;UACNT,MAAA,EAAQ,CACN;YAAEH,IAAA,EAAM;YAAKC,IAAA,EAAM;UAAO,GAC1B;YAAED,IAAA,EAAM;YAAKC,IAAA,EAAM;UAAO;QAE9B,GACA;UACEW,IAAA,EAAM;UACNT,MAAA,EAAQ,CACN;YAAEH,IAAA,EAAM;YAAKC,IAAA,EAAM;UAAO,GAC1B;YAAED,IAAA,EAAM;YAAKC,IAAA,EAAM;UAAO;QAE9B;MAEJ;MAEA,MAAMG,UAAA,GAAa;QAAES,SAAA,EAAW;MAAS;MACzC,MAAMR,aAAA,GAAgB;QAAEQ,SAAA,EAAW;MAAS;MAE5C,MAAM;QAAEV;MAAM,CAAE,GAAGP,yBAAA,CAA0B;QAC3CM,KAAA;QACAE,UAAA;QACAC,aAAA;QACAC,GAAA,EAAK;QACLC,gBAAA,EAAkB;UAAEJ,MAAA,EAAQ;QAAG;MACjC;MAEA;MACAK,MAAA,CAAOL,MAAA,EAAQM,OAAO,CAAC,CACrB;QAAET,IAAA,EAAM;QAAKC,IAAA,EAAM;MAAO,GAC1B;QAAED,IAAA,EAAM;QAAKC,IAAA,EAAM;MAAO,GAC1B;QAAED,IAAA,EAAM;QAAKC,IAAA,EAAM;MAAO,EAC3B;IACH;EACF;AACF","ignoreList":[]}