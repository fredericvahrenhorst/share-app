{"version":3,"file":"index.js","names":["useRouter","useSearchParams","formatAdminURL","React","Fragment","useCallback","useEffect","useMemo","useRef","useState","DocumentControls","DocumentDrawerHeader","useDocumentDrawerContext","DocumentFields","DocumentLocked","DocumentTakeOver","LeaveWithoutSaving","LivePreviewWindow","Upload","Form","useAuth","useConfig","useDocumentEvents","useDocumentInfo","useEditDepth","useLivePreviewContext","OperationProvider","useRouteTransition","useServerFunctions","UploadControlsProvider","useUploadEdits","abortAndIgnore","handleAbortRef","handleBackToDashboard","handleGoBack","handleTakeOver","Auth","SetDocumentStepNav","SetDocumentTitle","baseClass","DefaultEditView","BeforeDocumentControls","Description","EditMenuItems","PreviewButton","PublishButton","SaveButton","SaveDraftButton","CustomUpload","UploadControls","id","action","AfterDocument","AfterFields","apiURL","BeforeFields","collectionSlug","currentEditor","disableActions","disableCreate","disableLeaveWithoutSaving","docPermissions","documentIsLocked","getDocPermissions","getDocPreferences","globalSlug","hasPublishPermission","hasSavePermission","incrementVersionCount","initialState","isEditing","isInitializing","lastUpdateTime","redirectAfterCreate","redirectAfterDelete","redirectAfterDuplicate","savedDocumentData","setCurrentEditor","setDocumentIsLocked","unlockDocument","updateDocumentEditor","updateSavedDocumentData","clearDoc","drawerSlug","onDelete","onDuplicate","onSave","onSaveFromContext","isInDrawer","Boolean","refreshCookieAsync","user","config","admin","userSlug","routes","adminRoute","getEntityConfig","collectionConfig","globalConfig","depth","router","params","reportUpdate","resetUploadEdits","getFormState","startRouteTransition","isLivePreviewEnabled","isLivePreviewing","previewWindowType","abortOnChangeRef","abortOnSaveRef","locale","get","entitySlug","slug","operation","auth","undefined","upload","docConfig","lockDocumentsProp","lockDocuments","isLockingEnabled","lockDurationDefault","lockDuration","duration","lockDurationInMilliseconds","autosaveEnabled","versions","drafts","autosave","preventLeaveWithoutSaving","isReadOnlyForIncomingUser","setIsReadOnlyForIncomingUser","showTakeOverModal","setShowTakeOverModal","editSessionStartTime","setEditSessionStartTime","Date","now","lockExpiryTime","isLockExpired","documentLockStateRef","hasShownLockedModal","isLocked","schemaPathSegments","validateBeforeSubmit","setValidateBeforeSubmit","disableLocalStrategy","handleDocumentLocking","lockedState","previousOwnerID","current","lockedUserID","json","controller","document","doc","result","updatedAt","toISOString","redirectRoute","path","push","docPreferences","state","data","renderAllFields","returnLockStatus","schemaPath","join","signal","skipValidation","onChange","formState","prevFormState","submitted","currentTime","timeSinceLastUpdate","updateLastEdited","shouldUnlockDocument","some","window","location","pathname","includes","abortOnChange","abortOnSave","shouldShowDocumentLockedModal","isFolderCollection","folders","_jsx","className","filter","_jsxs","disabled","disableValidationOnSubmit","isDocumentForm","method","onSuccess","showDocumentID","isActive","onReadOnly","onTakeOver","pluralLabel","labels","plural","useAsTitle","fallback","toString","customComponents","onDrawerCreateNew","permissions","readOnlyForIncomingUser","email","loginWithUsername","readOnly","requirePassword","useAPIKey","username","verify","uploadConfig","fields","forceSidebarWrap"],"sources":["../../../src/views/Edit/index.tsx"],"sourcesContent":["/* eslint-disable react-compiler/react-compiler -- TODO: fix */\n'use client'\n\nimport type { ClientUser, DocumentViewClientProps, FormState } from 'payload'\n\nimport { useRouter, useSearchParams } from 'next/navigation.js'\nimport { formatAdminURL } from 'payload/shared'\nimport React, { Fragment, useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\nimport type { FormProps } from '../../forms/Form/index.js'\nimport type { LockedState } from '../../utilities/buildFormState.js'\n\nimport { DocumentControls } from '../../elements/DocumentControls/index.js'\nimport { DocumentDrawerHeader } from '../../elements/DocumentDrawer/DrawerHeader/index.js'\nimport { useDocumentDrawerContext } from '../../elements/DocumentDrawer/Provider.js'\nimport { DocumentFields } from '../../elements/DocumentFields/index.js'\nimport { DocumentLocked } from '../../elements/DocumentLocked/index.js'\nimport { DocumentTakeOver } from '../../elements/DocumentTakeOver/index.js'\nimport { LeaveWithoutSaving } from '../../elements/LeaveWithoutSaving/index.js'\nimport { LivePreviewWindow } from '../../elements/LivePreview/Window/index.js'\nimport { Upload } from '../../elements/Upload/index.js'\nimport { Form } from '../../forms/Form/index.js'\nimport { useAuth } from '../../providers/Auth/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentEvents } from '../../providers/DocumentEvents/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useEditDepth } from '../../providers/EditDepth/index.js'\nimport { useLivePreviewContext } from '../../providers/LivePreview/context.js'\nimport { OperationProvider } from '../../providers/Operation/index.js'\nimport { useRouteTransition } from '../../providers/RouteTransition/index.js'\nimport { useServerFunctions } from '../../providers/ServerFunctions/index.js'\nimport { UploadControlsProvider } from '../../providers/UploadControls/index.js'\nimport { useUploadEdits } from '../../providers/UploadEdits/index.js'\nimport { abortAndIgnore, handleAbortRef } from '../../utilities/abortAndIgnore.js'\nimport { handleBackToDashboard } from '../../utilities/handleBackToDashboard.js'\nimport { handleGoBack } from '../../utilities/handleGoBack.js'\nimport { handleTakeOver } from '../../utilities/handleTakeOver.js'\nimport { Auth } from './Auth/index.js'\nimport { SetDocumentStepNav } from './SetDocumentStepNav/index.js'\nimport { SetDocumentTitle } from './SetDocumentTitle/index.js'\nimport './index.scss'\n\nconst baseClass = 'collection-edit'\n\n// This component receives props only on _pages_\n// When rendered within a drawer, props are empty\n// This is solely to support custom edit views which get server-rendered\nexport function DefaultEditView({\n  BeforeDocumentControls,\n  Description,\n  EditMenuItems,\n  PreviewButton,\n  PublishButton,\n  SaveButton,\n  SaveDraftButton,\n  Upload: CustomUpload,\n  UploadControls,\n}: DocumentViewClientProps) {\n  const {\n    id,\n    action,\n    AfterDocument,\n    AfterFields,\n    apiURL,\n    BeforeFields,\n    collectionSlug,\n    currentEditor,\n    disableActions,\n    disableCreate,\n    disableLeaveWithoutSaving,\n    docPermissions,\n    documentIsLocked,\n    getDocPermissions,\n    getDocPreferences,\n    globalSlug,\n    hasPublishPermission,\n    hasSavePermission,\n    incrementVersionCount,\n    initialState,\n    isEditing,\n    isInitializing,\n    lastUpdateTime,\n    redirectAfterCreate,\n    redirectAfterDelete,\n    redirectAfterDuplicate,\n    savedDocumentData,\n    setCurrentEditor,\n    setDocumentIsLocked,\n    unlockDocument,\n    updateDocumentEditor,\n    updateSavedDocumentData,\n  } = useDocumentInfo()\n\n  const {\n    clearDoc,\n    drawerSlug,\n    onDelete,\n    onDuplicate,\n    onSave: onSaveFromContext,\n  } = useDocumentDrawerContext()\n\n  const isInDrawer = Boolean(drawerSlug)\n\n  const { refreshCookieAsync, user } = useAuth()\n\n  const {\n    config,\n    config: {\n      admin: { user: userSlug },\n      routes: { admin: adminRoute },\n    },\n    getEntityConfig,\n  } = useConfig()\n\n  const collectionConfig = getEntityConfig({ collectionSlug })\n  const globalConfig = getEntityConfig({ globalSlug })\n\n  const depth = useEditDepth()\n\n  const router = useRouter()\n  const params = useSearchParams()\n  const { reportUpdate } = useDocumentEvents()\n  const { resetUploadEdits } = useUploadEdits()\n  const { getFormState } = useServerFunctions()\n  const { startRouteTransition } = useRouteTransition()\n  const { isLivePreviewEnabled, isLivePreviewing, previewWindowType } = useLivePreviewContext()\n\n  const abortOnChangeRef = useRef<AbortController>(null)\n  const abortOnSaveRef = useRef<AbortController>(null)\n\n  const locale = params.get('locale')\n\n  const entitySlug = collectionConfig?.slug || globalConfig?.slug\n\n  const operation = collectionSlug && !id ? 'create' : 'update'\n\n  const auth = collectionConfig ? collectionConfig.auth : undefined\n  const upload = collectionConfig ? collectionConfig.upload : undefined\n\n  const docConfig = collectionConfig || globalConfig\n\n  const lockDocumentsProp = docConfig?.lockDocuments !== undefined ? docConfig?.lockDocuments : true\n  const isLockingEnabled = lockDocumentsProp !== false\n\n  const lockDurationDefault = 300 // Default 5 minutes in seconds\n  const lockDuration =\n    typeof lockDocumentsProp === 'object' ? lockDocumentsProp.duration : lockDurationDefault\n  const lockDurationInMilliseconds = lockDuration * 1000\n\n  const autosaveEnabled = Boolean(\n    (collectionConfig?.versions?.drafts && collectionConfig?.versions?.drafts?.autosave) ||\n      (globalConfig?.versions?.drafts && globalConfig?.versions?.drafts?.autosave),\n  )\n\n  const preventLeaveWithoutSaving =\n    typeof disableLeaveWithoutSaving !== 'undefined' ? !disableLeaveWithoutSaving : !autosaveEnabled\n\n  const [isReadOnlyForIncomingUser, setIsReadOnlyForIncomingUser] = useState(false)\n  const [showTakeOverModal, setShowTakeOverModal] = useState(false)\n\n  const [editSessionStartTime, setEditSessionStartTime] = useState(Date.now())\n\n  const lockExpiryTime = lastUpdateTime + lockDurationInMilliseconds\n\n  const isLockExpired = Date.now() > lockExpiryTime\n\n  const documentLockStateRef = useRef<{\n    hasShownLockedModal: boolean\n    isLocked: boolean\n    user: ClientUser | number | string\n  } | null>({\n    hasShownLockedModal: false,\n    isLocked: false,\n    user: null,\n  })\n\n  const schemaPathSegments = useMemo(() => [entitySlug], [entitySlug])\n\n  const [validateBeforeSubmit, setValidateBeforeSubmit] = useState(() => {\n    if (operation === 'create' && auth && !auth.disableLocalStrategy) {\n      return true\n    }\n\n    return false\n  })\n\n  const handleDocumentLocking = useCallback(\n    (lockedState: LockedState) => {\n      setDocumentIsLocked(true)\n      const previousOwnerID =\n        typeof documentLockStateRef.current?.user === 'object'\n          ? documentLockStateRef.current?.user?.id\n          : documentLockStateRef.current?.user\n\n      if (lockedState) {\n        const lockedUserID =\n          typeof lockedState.user === 'string' || typeof lockedState.user === 'number'\n            ? lockedState.user\n            : lockedState.user.id\n\n        if (!documentLockStateRef.current || lockedUserID !== previousOwnerID) {\n          if (previousOwnerID === user.id && lockedUserID !== user.id) {\n            setShowTakeOverModal(true)\n            documentLockStateRef.current.hasShownLockedModal = true\n          }\n\n          documentLockStateRef.current = {\n            hasShownLockedModal: documentLockStateRef.current?.hasShownLockedModal || false,\n            isLocked: true,\n            user: lockedState.user as ClientUser,\n          }\n          setCurrentEditor(lockedState.user as ClientUser)\n        }\n      }\n    },\n    [setCurrentEditor, setDocumentIsLocked, user?.id],\n  )\n\n  const onSave = useCallback(\n    async (json): Promise<FormState> => {\n      const controller = handleAbortRef(abortOnSaveRef)\n\n      const document = json?.doc || json?.result\n\n      reportUpdate({\n        id,\n        entitySlug,\n        updatedAt: document?.updatedAt || new Date().toISOString(),\n      })\n\n      // If we're editing the doc of the logged-in user,\n      // Refresh the cookie to get new permissions\n      if (user && collectionSlug === userSlug && id === user.id) {\n        void refreshCookieAsync()\n      }\n\n      incrementVersionCount()\n\n      if (typeof updateSavedDocumentData === 'function') {\n        void updateSavedDocumentData(document || {})\n      }\n\n      if (typeof onSaveFromContext === 'function') {\n        const operation = id ? 'update' : 'create'\n\n        void onSaveFromContext({\n          ...json,\n          operation,\n          updatedAt:\n            operation === 'update'\n              ? new Date().toISOString()\n              : document?.updatedAt || new Date().toISOString(),\n        })\n      }\n\n      if (!isEditing && depth < 2 && redirectAfterCreate !== false) {\n        // Redirect to the same locale if it's been set\n        const redirectRoute = formatAdminURL({\n          adminRoute,\n          path: `/collections/${collectionSlug}/${document?.id}${locale ? `?locale=${locale}` : ''}`,\n        })\n\n        startRouteTransition(() => router.push(redirectRoute))\n      } else {\n        resetUploadEdits()\n      }\n\n      await getDocPermissions(json)\n\n      if ((id || globalSlug) && !autosaveEnabled) {\n        const docPreferences = await getDocPreferences()\n\n        const { state } = await getFormState({\n          id,\n          collectionSlug,\n          data: document,\n          docPermissions,\n          docPreferences,\n          globalSlug,\n          operation,\n          renderAllFields: true,\n          returnLockStatus: false,\n          schemaPath: schemaPathSegments.join('.'),\n          signal: controller.signal,\n          skipValidation: true,\n        })\n\n        // Unlock the document after save\n        if (isLockingEnabled) {\n          setDocumentIsLocked(false)\n        }\n\n        abortOnSaveRef.current = null\n\n        return state\n      }\n    },\n    [\n      reportUpdate,\n      id,\n      entitySlug,\n      user,\n      collectionSlug,\n      userSlug,\n      incrementVersionCount,\n      updateSavedDocumentData,\n      onSaveFromContext,\n      redirectAfterCreate,\n      isEditing,\n      depth,\n      getDocPermissions,\n      globalSlug,\n      autosaveEnabled,\n      refreshCookieAsync,\n      adminRoute,\n      locale,\n      router,\n      resetUploadEdits,\n      getDocPreferences,\n      getFormState,\n      docPermissions,\n      operation,\n      schemaPathSegments,\n      isLockingEnabled,\n      setDocumentIsLocked,\n      startRouteTransition,\n    ],\n  )\n\n  const onChange: FormProps['onChange'][0] = useCallback(\n    async ({ formState: prevFormState, submitted }) => {\n      const controller = handleAbortRef(abortOnChangeRef)\n\n      const currentTime = Date.now()\n      const timeSinceLastUpdate = currentTime - editSessionStartTime\n\n      const updateLastEdited = isLockingEnabled && timeSinceLastUpdate >= 10000 // 10 seconds\n\n      if (updateLastEdited) {\n        setEditSessionStartTime(currentTime)\n      }\n\n      const docPreferences = await getDocPreferences()\n\n      const { lockedState, state } = await getFormState({\n        id,\n        collectionSlug,\n        docPermissions,\n        docPreferences,\n        formState: prevFormState,\n        globalSlug,\n        operation,\n        skipValidation: !submitted,\n        // Performance optimization: Setting it to false ensure that only fields that have explicit requireRender set in the form state will be rendered (e.g. new array rows).\n        // We only want to render ALL fields on initial render, not in onChange.\n        renderAllFields: false,\n        returnLockStatus: isLockingEnabled,\n        schemaPath: schemaPathSegments.join('.'),\n        signal: controller.signal,\n        updateLastEdited,\n      })\n\n      if (isLockingEnabled) {\n        handleDocumentLocking(lockedState)\n      }\n\n      abortOnChangeRef.current = null\n\n      return state\n    },\n    [\n      id,\n      collectionSlug,\n      getDocPreferences,\n      getFormState,\n      globalSlug,\n      handleDocumentLocking,\n      isLockingEnabled,\n      operation,\n      schemaPathSegments,\n      docPermissions,\n      editSessionStartTime,\n    ],\n  )\n\n  // Clean up when the component unmounts or when the document is unlocked\n  useEffect(() => {\n    return () => {\n      if (isLockingEnabled && documentIsLocked && (id || globalSlug)) {\n        // Only retain the lock if the user is still viewing the document\n        const shouldUnlockDocument = !['preview', 'api', 'versions'].some((path) =>\n          window.location.pathname.includes(path),\n        )\n        if (shouldUnlockDocument) {\n          // Check if this user is still the current editor\n          if (\n            typeof documentLockStateRef.current?.user === 'object'\n              ? documentLockStateRef.current?.user?.id === user?.id\n              : documentLockStateRef.current?.user === user?.id\n          ) {\n            void unlockDocument(id, collectionSlug ?? globalSlug)\n            setDocumentIsLocked(false)\n            setCurrentEditor(null)\n          }\n        }\n      }\n\n      setShowTakeOverModal(false)\n    }\n  }, [\n    collectionSlug,\n    globalSlug,\n    id,\n    unlockDocument,\n    user,\n    setCurrentEditor,\n    isLockingEnabled,\n    documentIsLocked,\n    setDocumentIsLocked,\n  ])\n\n  useEffect(() => {\n    const abortOnChange = abortOnChangeRef.current\n    const abortOnSave = abortOnSaveRef.current\n\n    return () => {\n      abortAndIgnore(abortOnChange)\n      abortAndIgnore(abortOnSave)\n    }\n  }, [])\n\n  const shouldShowDocumentLockedModal =\n    documentIsLocked &&\n    currentEditor &&\n    (typeof currentEditor === 'object'\n      ? currentEditor.id !== user?.id\n      : currentEditor !== user?.id) &&\n    !isReadOnlyForIncomingUser &&\n    !showTakeOverModal &&\n    !documentLockStateRef.current?.hasShownLockedModal &&\n    !isLockExpired\n\n  const isFolderCollection = config.folders && collectionSlug === config.folders?.slug\n\n  return (\n    <main\n      className={[\n        baseClass,\n        (id || globalSlug) && `${baseClass}--is-editing`,\n        globalSlug && `global-edit--${globalSlug}`,\n        collectionSlug && `collection-edit--${collectionSlug}`,\n        isLivePreviewing && previewWindowType === 'iframe' && `${baseClass}--is-live-previewing`,\n      ]\n        .filter(Boolean)\n        .join(' ')}\n    >\n      <OperationProvider operation={operation}>\n        <Form\n          action={action}\n          className={`${baseClass}__form`}\n          disabled={isReadOnlyForIncomingUser || isInitializing || !hasSavePermission}\n          disableValidationOnSubmit={!validateBeforeSubmit}\n          initialState={!isInitializing && initialState}\n          isDocumentForm={true}\n          isInitializing={isInitializing}\n          method={id ? 'PATCH' : 'POST'}\n          onChange={[onChange]}\n          onSuccess={onSave}\n        >\n          {isInDrawer && (\n            <DocumentDrawerHeader drawerSlug={drawerSlug} showDocumentID={!isFolderCollection} />\n          )}\n          {isLockingEnabled && shouldShowDocumentLockedModal && (\n            <DocumentLocked\n              handleGoBack={() => handleGoBack({ adminRoute, collectionSlug, router })}\n              isActive={shouldShowDocumentLockedModal}\n              onReadOnly={() => {\n                setIsReadOnlyForIncomingUser(true)\n                setShowTakeOverModal(false)\n              }}\n              onTakeOver={() =>\n                handleTakeOver(\n                  id,\n                  collectionSlug,\n                  globalSlug,\n                  user,\n                  false,\n                  updateDocumentEditor,\n                  setCurrentEditor,\n                  documentLockStateRef,\n                  isLockingEnabled,\n                )\n              }\n              updatedAt={lastUpdateTime}\n              user={currentEditor}\n            />\n          )}\n          {isLockingEnabled && showTakeOverModal && (\n            <DocumentTakeOver\n              handleBackToDashboard={() => handleBackToDashboard({ adminRoute, router })}\n              isActive={showTakeOverModal}\n              onReadOnly={() => {\n                setIsReadOnlyForIncomingUser(true)\n                setShowTakeOverModal(false)\n              }}\n            />\n          )}\n          {!isReadOnlyForIncomingUser && preventLeaveWithoutSaving && <LeaveWithoutSaving />}\n          {!isInDrawer && (\n            <SetDocumentStepNav\n              collectionSlug={collectionConfig?.slug}\n              globalSlug={globalConfig?.slug}\n              id={id}\n              pluralLabel={collectionConfig?.labels?.plural}\n              useAsTitle={collectionConfig?.admin?.useAsTitle}\n            />\n          )}\n          <SetDocumentTitle\n            collectionConfig={collectionConfig}\n            config={config}\n            fallback={depth <= 1 ? id?.toString() : undefined}\n            globalConfig={globalConfig}\n          />\n          <DocumentControls\n            apiURL={apiURL}\n            BeforeDocumentControls={BeforeDocumentControls}\n            customComponents={{\n              PreviewButton,\n              PublishButton,\n              SaveButton,\n              SaveDraftButton,\n            }}\n            data={savedDocumentData}\n            disableActions={disableActions || isFolderCollection}\n            disableCreate={disableCreate}\n            EditMenuItems={EditMenuItems}\n            hasPublishPermission={hasPublishPermission}\n            hasSavePermission={hasSavePermission}\n            id={id}\n            isEditing={isEditing}\n            isInDrawer={isInDrawer}\n            onDelete={onDelete}\n            onDrawerCreateNew={clearDoc}\n            onDuplicate={onDuplicate}\n            onSave={onSave}\n            onTakeOver={() =>\n              handleTakeOver(\n                id,\n                collectionSlug,\n                globalSlug,\n                user,\n                true,\n                updateDocumentEditor,\n                setCurrentEditor,\n                documentLockStateRef,\n                isLockingEnabled,\n                setIsReadOnlyForIncomingUser,\n              )\n            }\n            permissions={docPermissions}\n            readOnlyForIncomingUser={isReadOnlyForIncomingUser}\n            redirectAfterDelete={redirectAfterDelete}\n            redirectAfterDuplicate={redirectAfterDuplicate}\n            slug={collectionConfig?.slug || globalConfig?.slug}\n            user={currentEditor}\n          />\n          <div\n            className={[\n              `${baseClass}__main-wrapper`,\n              previewWindowType === 'popup' && `${baseClass}--detached`,\n            ]\n              .filter(Boolean)\n              .join(' ')}\n          >\n            <div\n              className={[\n                `${baseClass}__main`,\n                previewWindowType === 'popup' && `${baseClass}__main--popup-open`,\n              ]\n                .filter(Boolean)\n                .join(' ')}\n            >\n              <DocumentFields\n                AfterFields={AfterFields}\n                BeforeFields={\n                  BeforeFields || (\n                    <Fragment>\n                      {auth && (\n                        <Auth\n                          className={`${baseClass}__auth`}\n                          collectionSlug={collectionConfig.slug}\n                          disableLocalStrategy={collectionConfig.auth?.disableLocalStrategy}\n                          email={savedDocumentData?.email}\n                          loginWithUsername={auth?.loginWithUsername}\n                          operation={operation}\n                          readOnly={!hasSavePermission}\n                          requirePassword={!id}\n                          setValidateBeforeSubmit={setValidateBeforeSubmit}\n                          useAPIKey={auth.useAPIKey}\n                          username={savedDocumentData?.username}\n                          verify={auth.verify}\n                        />\n                      )}\n                      {upload && (\n                        <React.Fragment>\n                          <UploadControlsProvider>\n                            {CustomUpload || (\n                              <Upload\n                                collectionSlug={collectionConfig.slug}\n                                initialState={initialState}\n                                uploadConfig={upload}\n                                UploadControls={UploadControls}\n                              />\n                            )}\n                          </UploadControlsProvider>\n                        </React.Fragment>\n                      )}\n                    </Fragment>\n                  )\n                }\n                Description={Description}\n                docPermissions={docPermissions}\n                fields={docConfig.fields}\n                forceSidebarWrap={isLivePreviewing}\n                readOnly={isReadOnlyForIncomingUser || !hasSavePermission}\n                schemaPathSegments={schemaPathSegments}\n              />\n              {AfterDocument}\n            </div>\n            {isLivePreviewEnabled && !isInDrawer && (\n              <LivePreviewWindow collectionSlug={collectionSlug} globalSlug={globalSlug} />\n            )}\n          </div>\n        </Form>\n      </OperationProvider>\n    </main>\n  )\n}\n"],"mappings":"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","ignoreList":[]}