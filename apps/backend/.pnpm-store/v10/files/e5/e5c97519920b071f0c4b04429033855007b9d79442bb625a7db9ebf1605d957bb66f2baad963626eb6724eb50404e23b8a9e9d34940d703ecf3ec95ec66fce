{"version":3,"file":"buildView.js","names":["DefaultCollectionFolderView","HydrateAuthProvider","RenderServerComponent","getFolderResultsComponentAndData","upsertPreferences","formatAdminURL","redirect","React","buildCollectionFolderView","args","disableBulkDelete","disableBulkEdit","enableRowSelections","folderID","initPageResult","isInDrawer","overrideEntityVisibility","params","query","queryFromArgs","searchParams","collectionConfig","slug","collectionSlug","locale","fullLocale","permissions","req","i18n","payload","config","queryFromReq","user","visibleEntities","folders","Error","collections","read","includes","collectionFolderPreferences","key","value","sort","sortPreference","viewPreference","routes","admin","adminRoute","breadcrumbs","documents","FolderResultsComponent","subfolders","activeCollectionSlugs","browseByFolder","displayAs","resolvedFolderID","length","id","path","serverURL","serverProps","search","View","_jsxs","_Fragment","_jsx","clientProps","allCollectionFolderSlugs","allowCreateCollectionSlugs","create","filter","Boolean","baseFolderPath","folderFieldName","fieldName","Fallback","importMap"],"sources":["../../../src/views/CollectionFolders/buildView.tsx"],"sourcesContent":["import type {\n  AdminViewServerProps,\n  BuildCollectionFolderViewResult,\n  FolderListViewClientProps,\n  FolderListViewServerPropsOnly,\n  FolderSortKeys,\n  ListQuery,\n} from 'payload'\n\nimport { DefaultCollectionFolderView, HydrateAuthProvider } from '@payloadcms/ui'\nimport { RenderServerComponent } from '@payloadcms/ui/elements/RenderServerComponent'\nimport { getFolderResultsComponentAndData, upsertPreferences } from '@payloadcms/ui/rsc'\nimport { formatAdminURL } from '@payloadcms/ui/shared'\nimport { redirect } from 'next/navigation.js'\nimport React from 'react'\n\n// import { renderFolderViewSlots } from './renderFolderViewSlots.js'\n\nexport type BuildCollectionFolderViewStateArgs = {\n  disableBulkDelete?: boolean\n  disableBulkEdit?: boolean\n  enableRowSelections: boolean\n  folderID?: number | string\n  isInDrawer?: boolean\n  overrideEntityVisibility?: boolean\n  query: ListQuery\n} & AdminViewServerProps\n\n/**\n * Builds the entire view for collection-folder views on the server\n */\nexport const buildCollectionFolderView = async (\n  args: BuildCollectionFolderViewStateArgs,\n): Promise<BuildCollectionFolderViewResult> => {\n  const {\n    disableBulkDelete,\n    disableBulkEdit,\n    enableRowSelections,\n    folderID,\n    initPageResult,\n    isInDrawer,\n    overrideEntityVisibility,\n    params,\n    query: queryFromArgs,\n    searchParams,\n  } = args\n\n  const {\n    collectionConfig,\n    collectionConfig: { slug: collectionSlug },\n    locale: fullLocale,\n    permissions,\n    req: {\n      i18n,\n      payload,\n      payload: { config },\n      query: queryFromReq,\n      user,\n    },\n    visibleEntities,\n  } = initPageResult\n\n  if (!config.folders) {\n    throw new Error('not-found')\n  }\n\n  if (\n    !permissions?.collections?.[collectionSlug]?.read ||\n    !permissions?.collections?.[config.folders.slug].read\n  ) {\n    throw new Error('not-found')\n  }\n\n  if (collectionConfig) {\n    if (\n      (!visibleEntities.collections.includes(collectionSlug) && !overrideEntityVisibility) ||\n      !config.folders\n    ) {\n      throw new Error('not-found')\n    }\n\n    const query = queryFromArgs || queryFromReq\n\n    /**\n     * @todo: find a pattern to avoid setting preferences on hard navigation, i.e. direct links, page refresh, etc.\n     * This will ensure that prefs are only updated when explicitly set by the user\n     * This could potentially be done by injecting a `sessionID` into the params and comparing it against a session cookie\n     */\n    const collectionFolderPreferences = await upsertPreferences<{\n      sort?: FolderSortKeys\n      viewPreference?: 'grid' | 'list'\n    }>({\n      key: `${collectionSlug}-collection-folder`,\n      req: initPageResult.req,\n      value: {\n        sort: query?.sort as FolderSortKeys,\n      },\n    })\n\n    const sortPreference: FolderSortKeys =\n      collectionFolderPreferences?.sort || '_folderOrDocumentTitle'\n    const viewPreference = collectionFolderPreferences?.viewPreference || 'grid'\n\n    const {\n      routes: { admin: adminRoute },\n    } = config\n\n    const { breadcrumbs, documents, FolderResultsComponent, subfolders } =\n      await getFolderResultsComponentAndData({\n        activeCollectionSlugs: [config.folders.slug, collectionSlug],\n        browseByFolder: false,\n        displayAs: viewPreference,\n        folderID,\n        req: initPageResult.req,\n        sort: sortPreference,\n      })\n\n    const resolvedFolderID = breadcrumbs[breadcrumbs.length - 1]?.id\n\n    if (\n      !isInDrawer &&\n      ((resolvedFolderID && folderID && folderID !== resolvedFolderID) ||\n        (folderID && !resolvedFolderID))\n    ) {\n      redirect(\n        formatAdminURL({\n          adminRoute,\n          path: `/collections/${collectionSlug}/${config.folders.slug}`,\n          serverURL: config.serverURL,\n        }),\n      )\n    }\n\n    const serverProps: FolderListViewServerPropsOnly = {\n      collectionConfig,\n      documents,\n      i18n,\n      locale: fullLocale,\n      params,\n      payload,\n      permissions,\n      searchParams,\n      subfolders,\n      user,\n    }\n\n    // We could support slots in the folder view in the future\n    // const folderViewSlots = renderFolderViewSlots({\n    //   clientProps: {\n    //     collectionSlug,\n    //     hasCreatePermission,\n    //     newDocumentURL,\n    //   },\n    //   collectionConfig,\n    //   description: typeof collectionConfig.admin.description === 'function'\n    //   ? collectionConfig.admin.description({ t: i18n.t })\n    //   : collectionConfig.admin.description,\n    //   payload,\n    //   serverProps,\n    // })\n\n    const search = query?.search as string\n\n    return {\n      View: (\n        <>\n          <HydrateAuthProvider permissions={permissions} />\n          {RenderServerComponent({\n            clientProps: {\n              // ...folderViewSlots,\n              allCollectionFolderSlugs: [config.folders.slug, collectionSlug],\n              allowCreateCollectionSlugs: [\n                permissions?.collections?.[config.folders.slug]?.create\n                  ? config.folders.slug\n                  : null,\n                permissions?.collections?.[collectionSlug]?.create ? collectionSlug : null,\n              ].filter(Boolean),\n              baseFolderPath: `/collections/${collectionSlug}/${config.folders.slug}`,\n              breadcrumbs,\n              collectionSlug,\n              disableBulkDelete,\n              disableBulkEdit,\n              documents,\n              enableRowSelections,\n              folderFieldName: config.folders.fieldName,\n              folderID: resolvedFolderID || null,\n              FolderResultsComponent,\n              search,\n              sort: sortPreference,\n              subfolders,\n              viewPreference,\n            } satisfies FolderListViewClientProps,\n            // Component: collectionConfig?.admin?.components?.views?.Folders?.Component,\n            Fallback: DefaultCollectionFolderView,\n            importMap: payload.importMap,\n            serverProps,\n          })}\n        </>\n      ),\n    }\n  }\n\n  throw new Error('not-found')\n}\n"],"mappings":"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","ignoreList":[]}