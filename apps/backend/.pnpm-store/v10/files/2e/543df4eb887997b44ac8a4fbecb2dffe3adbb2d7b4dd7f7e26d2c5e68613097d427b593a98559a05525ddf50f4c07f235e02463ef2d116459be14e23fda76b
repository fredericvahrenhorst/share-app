{"version":3,"sources":["../src/queryDrafts.ts"],"sourcesContent":["import type { PaginateOptions, PipelineStage, QueryOptions } from 'mongoose'\nimport type { QueryDrafts } from 'payload'\n\nimport { buildVersionCollectionFields, combineQueries, flattenWhereToOperators } from 'payload'\n\nimport type { MongooseAdapter } from './index.js'\n\nimport { buildQuery } from './queries/buildQuery.js'\nimport { buildSortParam } from './queries/buildSortParam.js'\nimport { aggregatePaginate } from './utilities/aggregatePaginate.js'\nimport { buildJoinAggregation } from './utilities/buildJoinAggregation.js'\nimport { buildProjectionFromSelect } from './utilities/buildProjectionFromSelect.js'\nimport { getCollection } from './utilities/getEntity.js'\nimport { getSession } from './utilities/getSession.js'\nimport { transform } from './utilities/transform.js'\n\nexport const queryDrafts: QueryDrafts = async function queryDrafts(\n  this: MongooseAdapter,\n  {\n    collection: collectionSlug,\n    joins,\n    limit,\n    locale,\n    page,\n    pagination,\n    req,\n    select,\n    sort: sortArg,\n    where = {},\n  },\n) {\n  const { collectionConfig, Model } = getCollection({\n    adapter: this,\n    collectionSlug,\n    versions: true,\n  })\n\n  const options: QueryOptions = {\n    session: await getSession(this, req),\n  }\n\n  let hasNearConstraint\n  let sort\n\n  if (where) {\n    const constraints = flattenWhereToOperators(where)\n    hasNearConstraint = constraints.some((prop) => Object.keys(prop).some((key) => key === 'near'))\n  }\n\n  const fields = buildVersionCollectionFields(this.payload.config, collectionConfig, true)\n\n  const sortAggregation: PipelineStage[] = []\n  if (!hasNearConstraint) {\n    sort = buildSortParam({\n      adapter: this,\n      config: this.payload.config,\n      fields,\n      locale,\n      sort: sortArg || collectionConfig.defaultSort,\n      sortAggregation,\n      timestamps: true,\n      versions: true,\n    })\n  }\n\n  const combinedWhere = combineQueries({ latest: { equals: true } }, where)\n\n  const versionQuery = await buildQuery({\n    adapter: this,\n    fields,\n    locale,\n    where: combinedWhere,\n  })\n\n  const projection = buildProjectionFromSelect({\n    adapter: this,\n    fields,\n    select,\n  })\n  // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.\n  const useEstimatedCount =\n    hasNearConstraint || !versionQuery || Object.keys(versionQuery).length === 0\n  const paginationOptions: PaginateOptions = {\n    lean: true,\n    leanWithId: true,\n    options,\n    page,\n    pagination,\n    projection,\n    sort,\n    useEstimatedCount,\n  }\n\n  if (this.collation) {\n    const defaultLocale = 'en'\n    paginationOptions.collation = {\n      locale: locale && locale !== 'all' && locale !== '*' ? locale : defaultLocale,\n      ...this.collation,\n    }\n  }\n\n  if (\n    !useEstimatedCount &&\n    Object.keys(versionQuery).length === 0 &&\n    this.disableIndexHints !== true\n  ) {\n    // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding\n    // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,\n    // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses\n    // the correct indexed field\n    paginationOptions.useCustomCountFn = () => {\n      return Promise.resolve(\n        Model.countDocuments(versionQuery, {\n          hint: { _id: 1 },\n        }),\n      )\n    }\n  }\n\n  if (limit && limit > 0) {\n    paginationOptions.limit = limit\n    // limit must also be set here, it's ignored when pagination is false\n\n    paginationOptions.options!.limit = limit\n  }\n\n  let result\n\n  const aggregate = await buildJoinAggregation({\n    adapter: this,\n    collection: collectionSlug,\n    collectionConfig,\n    joins,\n    locale,\n    projection,\n    query: versionQuery,\n    versions: true,\n  })\n\n  // build join aggregation\n  if (aggregate || sortAggregation.length > 0) {\n    result = await aggregatePaginate({\n      adapter: this,\n      collation: paginationOptions.collation,\n      joinAggregation: aggregate,\n      limit: paginationOptions.limit,\n      Model,\n      page: paginationOptions.page,\n      pagination: paginationOptions.pagination,\n      projection: paginationOptions.projection,\n      query: versionQuery,\n      session: paginationOptions.options?.session ?? undefined,\n      sort: paginationOptions.sort as object,\n      sortAggregation,\n      useEstimatedCount: paginationOptions.useEstimatedCount,\n    })\n  } else {\n    result = await Model.paginate(versionQuery, paginationOptions)\n  }\n\n  transform({\n    adapter: this,\n    data: result.docs,\n    fields: buildVersionCollectionFields(this.payload.config, collectionConfig),\n    operation: 'read',\n  })\n\n  for (let i = 0; i < result.docs.length; i++) {\n    const id = result.docs[i].parent\n    result.docs[i] = result.docs[i].version ?? {}\n    result.docs[i].id = id\n  }\n\n  return result\n}\n"],"names":["buildVersionCollectionFields","combineQueries","flattenWhereToOperators","buildQuery","buildSortParam","aggregatePaginate","buildJoinAggregation","buildProjectionFromSelect","getCollection","getSession","transform","queryDrafts","collection","collectionSlug","joins","limit","locale","page","pagination","req","select","sort","sortArg","where","collectionConfig","Model","adapter","versions","options","session","hasNearConstraint","constraints","some","prop","Object","keys","key","fields","payload","config","sortAggregation","defaultSort","timestamps","combinedWhere","latest","equals","versionQuery","projection","useEstimatedCount","length","paginationOptions","lean","leanWithId","collation","defaultLocale","disableIndexHints","useCustomCountFn","Promise","resolve","countDocuments","hint","_id","result","aggregate","query","joinAggregation","undefined","paginate","data","docs","operation","i","id","parent","version"],"mappings":"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"}