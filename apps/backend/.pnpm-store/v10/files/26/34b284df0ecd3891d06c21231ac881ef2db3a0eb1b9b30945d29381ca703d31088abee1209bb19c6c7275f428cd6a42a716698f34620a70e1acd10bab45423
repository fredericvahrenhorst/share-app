{"version":3,"sources":["../../src/queries/getLocalizedSortProperty.ts"],"sourcesContent":["import type { FlattenedField, SanitizedConfig } from 'payload'\n\nimport { fieldAffectsData, fieldIsPresentationalOnly, fieldShouldBeLocalized } from 'payload/shared'\n\ntype Args = {\n  config: SanitizedConfig\n  fields: FlattenedField[]\n  locale?: string\n  parentIsLocalized: boolean\n  result?: string\n  segments: string[]\n}\n\nexport const getLocalizedSortProperty = ({\n  config,\n  fields,\n  locale,\n  parentIsLocalized,\n  result: incomingResult,\n  segments: incomingSegments,\n}: Args): string => {\n  // If localization is not enabled, accept exactly\n  // what is sent in\n  if (!config.localization) {\n    return incomingSegments.join('.')\n  }\n\n  const segments = [...incomingSegments]\n\n  // Retrieve first segment, and remove from segments\n  const firstSegment = segments.shift()\n\n  // Attempt to find a matched field\n  const matchedField = fields.find(\n    (field) => fieldAffectsData(field) && field.name === firstSegment,\n  )\n\n  if (matchedField && !fieldIsPresentationalOnly(matchedField)) {\n    let nextFields: FlattenedField[] | null = null\n    let nextParentIsLocalized = parentIsLocalized\n    const remainingSegments = [...segments]\n    let localizedSegment = matchedField.name\n\n    if (\n      fieldShouldBeLocalized({ field: matchedField, parentIsLocalized: parentIsLocalized ?? false })\n    ) {\n      // Check to see if next segment is a locale\n      if (segments.length > 0 && remainingSegments[0]) {\n        const nextSegmentIsLocale = config.localization.localeCodes.includes(remainingSegments[0])\n\n        // If next segment is locale, remove it from remaining segments\n        // and use it to localize the current segment\n        if (nextSegmentIsLocale) {\n          const nextSegment = remainingSegments.shift()\n          localizedSegment = `${matchedField.name}.${nextSegment}`\n        }\n      } else {\n        // If no more segments, but field is localized, use default locale\n        localizedSegment = `${matchedField.name}.${locale}`\n      }\n    }\n\n    // If there are subfields, pass them through\n    if (\n      matchedField.type === 'tab' ||\n      matchedField.type === 'group' ||\n      matchedField.type === 'array'\n    ) {\n      nextFields = matchedField.flattenedFields\n      if (!nextParentIsLocalized) {\n        nextParentIsLocalized = matchedField.localized ?? false\n      }\n    }\n\n    if (matchedField.type === 'blocks') {\n      nextFields = (matchedField.blockReferences ?? matchedField.blocks).reduce<FlattenedField[]>(\n        (flattenedBlockFields, _block) => {\n          // TODO: iterate over blocks mapped to block slug in v4, or pass through payload.blocks\n          const block =\n            typeof _block === 'string' ? config.blocks?.find((b) => b.slug === _block) : _block\n\n          if (!block) {\n            return [...flattenedBlockFields]\n          }\n\n          return [\n            ...flattenedBlockFields,\n            ...block.flattenedFields.filter(\n              (blockField) =>\n                (fieldAffectsData(blockField) &&\n                  blockField.name !== 'blockType' &&\n                  blockField.name !== 'blockName') ||\n                !fieldAffectsData(blockField),\n            ),\n          ]\n        },\n        [],\n      )\n    }\n\n    const result = incomingResult ? `${incomingResult}.${localizedSegment}` : localizedSegment\n\n    if (nextFields !== null) {\n      return getLocalizedSortProperty({\n        config,\n        fields: nextFields,\n        locale,\n        parentIsLocalized: nextParentIsLocalized,\n        result,\n        segments: remainingSegments,\n      })\n    }\n\n    return result\n  }\n\n  return incomingSegments.join('.')\n}\n"],"names":["fieldAffectsData","fieldIsPresentationalOnly","fieldShouldBeLocalized","getLocalizedSortProperty","config","fields","locale","parentIsLocalized","result","incomingResult","segments","incomingSegments","localization","join","firstSegment","shift","matchedField","find","field","name","nextFields","nextParentIsLocalized","remainingSegments","localizedSegment","length","nextSegmentIsLocale","localeCodes","includes","nextSegment","type","flattenedFields","localized","blockReferences","blocks","reduce","flattenedBlockFields","_block","block","b","slug","filter","blockField"],"mappings":"AAEA,SAASA,gBAAgB,EAAEC,yBAAyB,EAAEC,sBAAsB,QAAQ,iBAAgB;AAWpG,OAAO,MAAMC,2BAA2B,CAAC,EACvCC,MAAM,EACNC,MAAM,EACNC,MAAM,EACNC,iBAAiB,EACjBC,QAAQC,cAAc,EACtBC,UAAUC,gBAAgB,EACrB;IACL,iDAAiD;IACjD,kBAAkB;IAClB,IAAI,CAACP,OAAOQ,YAAY,EAAE;QACxB,OAAOD,iBAAiBE,IAAI,CAAC;IAC/B;IAEA,MAAMH,WAAW;WAAIC;KAAiB;IAEtC,mDAAmD;IACnD,MAAMG,eAAeJ,SAASK,KAAK;IAEnC,kCAAkC;IAClC,MAAMC,eAAeX,OAAOY,IAAI,CAC9B,CAACC,QAAUlB,iBAAiBkB,UAAUA,MAAMC,IAAI,KAAKL;IAGvD,IAAIE,gBAAgB,CAACf,0BAA0Be,eAAe;QAC5D,IAAII,aAAsC;QAC1C,IAAIC,wBAAwBd;QAC5B,MAAMe,oBAAoB;eAAIZ;SAAS;QACvC,IAAIa,mBAAmBP,aAAaG,IAAI;QAExC,IACEjB,uBAAuB;YAAEgB,OAAOF;YAAcT,mBAAmBA,qBAAqB;QAAM,IAC5F;YACA,2CAA2C;YAC3C,IAAIG,SAASc,MAAM,GAAG,KAAKF,iBAAiB,CAAC,EAAE,EAAE;gBAC/C,MAAMG,sBAAsBrB,OAAOQ,YAAY,CAACc,WAAW,CAACC,QAAQ,CAACL,iBAAiB,CAAC,EAAE;gBAEzF,+DAA+D;gBAC/D,6CAA6C;gBAC7C,IAAIG,qBAAqB;oBACvB,MAAMG,cAAcN,kBAAkBP,KAAK;oBAC3CQ,mBAAmB,GAAGP,aAAaG,IAAI,CAAC,CAAC,EAAES,aAAa;gBAC1D;YACF,OAAO;gBACL,kEAAkE;gBAClEL,mBAAmB,GAAGP,aAAaG,IAAI,CAAC,CAAC,EAAEb,QAAQ;YACrD;QACF;QAEA,4CAA4C;QAC5C,IACEU,aAAaa,IAAI,KAAK,SACtBb,aAAaa,IAAI,KAAK,WACtBb,aAAaa,IAAI,KAAK,SACtB;YACAT,aAAaJ,aAAac,eAAe;YACzC,IAAI,CAACT,uBAAuB;gBAC1BA,wBAAwBL,aAAae,SAAS,IAAI;YACpD;QACF;QAEA,IAAIf,aAAaa,IAAI,KAAK,UAAU;YAClCT,aAAa,AAACJ,CAAAA,aAAagB,eAAe,IAAIhB,aAAaiB,MAAM,AAAD,EAAGC,MAAM,CACvE,CAACC,sBAAsBC;gBACrB,uFAAuF;gBACvF,MAAMC,QACJ,OAAOD,WAAW,WAAWhC,OAAO6B,MAAM,EAAEhB,KAAK,CAACqB,IAAMA,EAAEC,IAAI,KAAKH,UAAUA;gBAE/E,IAAI,CAACC,OAAO;oBACV,OAAO;2BAAIF;qBAAqB;gBAClC;gBAEA,OAAO;uBACFA;uBACAE,MAAMP,eAAe,CAACU,MAAM,CAC7B,CAACC,aACC,AAACzC,iBAAiByC,eAChBA,WAAWtB,IAAI,KAAK,eACpBsB,WAAWtB,IAAI,KAAK,eACtB,CAACnB,iBAAiByC;iBAEvB;YACH,GACA,EAAE;QAEN;QAEA,MAAMjC,SAASC,iBAAiB,GAAGA,eAAe,CAAC,EAAEc,kBAAkB,GAAGA;QAE1E,IAAIH,eAAe,MAAM;YACvB,OAAOjB,yBAAyB;gBAC9BC;gBACAC,QAAQe;gBACRd;gBACAC,mBAAmBc;gBACnBb;gBACAE,UAAUY;YACZ;QACF;QAEA,OAAOd;IACT;IAEA,OAAOG,iBAAiBE,IAAI,CAAC;AAC/B,EAAC"}