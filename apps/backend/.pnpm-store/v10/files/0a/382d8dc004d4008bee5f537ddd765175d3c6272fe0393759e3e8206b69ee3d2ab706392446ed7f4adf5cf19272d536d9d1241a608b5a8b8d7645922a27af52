{"version":3,"sources":["../../src/utilities/getDBName.ts"],"sourcesContent":["import { APIError, type DBIdentifierName } from 'payload'\n\ntype Args = {\n  config: {\n    dbName?: DBIdentifierName\n    enumName?: DBIdentifierName\n    name?: string\n    slug?: string\n  }\n  locales?: boolean\n  target?: 'dbName' | 'enumName'\n  versions?: boolean\n}\n\n/**\n * Used to name database enums and collections\n * Returns the collection or enum name for a given entity\n */\nexport const getDBName = ({\n  config: { name, slug },\n  config,\n  target = 'dbName',\n  versions = false,\n}: Args): string => {\n  let result: null | string = null\n  let custom = config[target]\n\n  if (!custom && target === 'enumName') {\n    custom = config['dbName']\n  }\n\n  if (custom) {\n    result = typeof custom === 'function' ? custom({}) : custom\n  } else {\n    result = name ?? slug ?? null\n  }\n\n  if (versions) {\n    result = `_${result}_versions`\n  }\n\n  if (!result) {\n    throw new APIError(`Assertion for DB name of ${name} ${slug} was failed.`)\n  }\n\n  return result\n}\n"],"names":["APIError","getDBName","config","name","slug","target","versions","result","custom"],"mappings":"AAAA,SAASA,QAAQ,QAA+B,UAAS;AAczD;;;CAGC,GACD,OAAO,MAAMC,YAAY,CAAC,EACxBC,QAAQ,EAAEC,IAAI,EAAEC,IAAI,EAAE,EACtBF,MAAM,EACNG,SAAS,QAAQ,EACjBC,WAAW,KAAK,EACX;IACL,IAAIC,SAAwB;IAC5B,IAAIC,SAASN,MAAM,CAACG,OAAO;IAE3B,IAAI,CAACG,UAAUH,WAAW,YAAY;QACpCG,SAASN,MAAM,CAAC,SAAS;IAC3B;IAEA,IAAIM,QAAQ;QACVD,SAAS,OAAOC,WAAW,aAAaA,OAAO,CAAC,KAAKA;IACvD,OAAO;QACLD,SAASJ,QAAQC,QAAQ;IAC3B;IAEA,IAAIE,UAAU;QACZC,SAAS,CAAC,CAAC,EAAEA,OAAO,SAAS,CAAC;IAChC;IAEA,IAAI,CAACA,QAAQ;QACX,MAAM,IAAIP,SAAS,CAAC,yBAAyB,EAAEG,KAAK,CAAC,EAAEC,KAAK,YAAY,CAAC;IAC3E;IAEA,OAAOG;AACT,EAAC"}