{"version":3,"file":"index.js","names":["c","_c","useCallback","useMemo","useRef","useThrottledEffect","useAuth","useConfig","useDocumentInfo","useOperation","useTranslation","useDocumentForm","useForm","useFormFields","useFormInitializing","useFormModified","useFormProcessing","useFormSubmitted","useFieldPath","useField","options","$","t0","disableFormData","t1","hasRows","path","pathFromOptions","potentiallyStalePath","validate","undefined","pathFromContext","submitted","processing","initializing","user","id","collectionSlug","operation","dispatchField","_temp","t2","t3","fields","field","t","config","getData","getDataByPath","getSiblingData","setModified","documentForm","filterOptions","value","initialValue","valid","showError","prevValid","prevErrorMessage","errorMessage","split","pathSegments","t4","e","t5","disableModifyingForm","isEvent","preventDefault","stopPropagation","val","target","type","setValue","t6","customComponents","t7","t8","t9","errorPaths","t10","rows","t11","selectFilterOptions","t12","t13","disabled","formInitializing","formProcessing","formSubmitted","result","t14","validateField","valueToValidate","Array","isArray","current","valid_0","data","isValid","blockData","event","preferences","req","payload","siblingData","update","t15","t16","dispatch"],"sources":["../../../src/forms/useField/index.tsx"],"sourcesContent":["'use client'\nimport type { PayloadRequest } from 'payload'\n\nimport { useCallback, useMemo, useRef } from 'react'\n\nimport type { UPDATE } from '../Form/types.js'\nimport type { FieldType, Options } from './types.js'\n\nexport type { FieldType, Options }\n\nimport { useThrottledEffect } from '../../hooks/useThrottledEffect.js'\nimport { useAuth } from '../../providers/Auth/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useOperation } from '../../providers/Operation/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport {\n  useDocumentForm,\n  useForm,\n  useFormFields,\n  useFormInitializing,\n  useFormModified,\n  useFormProcessing,\n  useFormSubmitted,\n} from '../Form/context.js'\nimport { useFieldPath } from '../RenderFields/context.js'\n\n/**\n * Get and set the value of a form field.\n *\n * @see https://payloadcms.com/docs/admin/react-hooks#usefield\n */\nexport const useField = <TValue,>(options?: Options): FieldType<TValue> => {\n  const {\n    disableFormData = false,\n    hasRows,\n    path: pathFromOptions,\n    potentiallyStalePath,\n    validate,\n  } = options || {}\n\n  const pathFromContext = useFieldPath()\n\n  // This is a workaround for stale props given to server rendered components.\n  // See the notes in the `potentiallyStalePath` type definition for more details.\n  const path = pathFromOptions || pathFromContext || potentiallyStalePath\n\n  const submitted = useFormSubmitted()\n  const processing = useFormProcessing()\n  const initializing = useFormInitializing()\n  const { user } = useAuth()\n  const { id, collectionSlug } = useDocumentInfo()\n  const operation = useOperation()\n\n  const dispatchField = useFormFields(([_, dispatch]) => dispatch)\n  const field = useFormFields(([fields]) => (fields && fields?.[path]) || null)\n\n  const { t } = useTranslation()\n  const { config } = useConfig()\n\n  const { getData, getDataByPath, getSiblingData, setModified } = useForm()\n  const documentForm = useDocumentForm()\n  const modified = useFormModified()\n\n  const filterOptions = field?.filterOptions\n  const value = field?.value as TValue\n  const initialValue = field?.initialValue as TValue\n  const valid = typeof field?.valid === 'boolean' ? field.valid : true\n  const showError = valid === false && submitted\n\n  const prevValid = useRef(valid)\n  const prevErrorMessage = useRef(field?.errorMessage)\n\n  const pathSegments = path ? path.split('.') : []\n\n  // Method to return from `useField`, used to\n  // update field values from field component(s)\n  const setValue = useCallback(\n    (e, disableModifyingForm = false) => {\n      // TODO:\n      // There are no built-in fields that pass events into `e`.\n      // Remove this check in the next major version.\n      const isEvent =\n        e &&\n        typeof e === 'object' &&\n        typeof e.preventDefault === 'function' &&\n        typeof e.stopPropagation === 'function'\n\n      const val = isEvent ? e.target.value : e\n\n      dispatchField({\n        type: 'UPDATE',\n        disableFormData: disableFormData || (hasRows && val > 0),\n        path,\n        value: val,\n      })\n\n      if (!disableModifyingForm) {\n        setModified(true)\n      }\n    },\n    [setModified, path, dispatchField, disableFormData, hasRows],\n  )\n\n  // Store result from hook as ref\n  // to prevent unnecessary rerenders\n  const result: FieldType<TValue> = useMemo(\n    () => ({\n      customComponents: field?.customComponents,\n      disabled: processing || initializing,\n      errorMessage: field?.errorMessage,\n      errorPaths: field?.errorPaths || [],\n      filterOptions,\n      formInitializing: initializing,\n      formProcessing: processing,\n      formSubmitted: submitted,\n      initialValue,\n      path,\n      rows: field?.rows,\n      selectFilterOptions: field?.selectFilterOptions,\n      setValue,\n      showError,\n      valid: field?.valid,\n      value,\n    }),\n    [\n      field,\n      processing,\n      setValue,\n      showError,\n      submitted,\n      value,\n      initialValue,\n      path,\n      filterOptions,\n      initializing,\n    ],\n  )\n\n  // Throttle the validate function\n  useThrottledEffect(\n    () => {\n      const validateField = async () => {\n        let valueToValidate = value\n\n        if (field?.rows && Array.isArray(field.rows)) {\n          valueToValidate = getDataByPath(path)\n        }\n\n        let errorMessage: string | undefined = prevErrorMessage.current\n        let valid: boolean | string = prevValid.current\n\n        const data = getData()\n        const isValid =\n          typeof validate === 'function'\n            ? await validate(valueToValidate, {\n                id,\n                blockData: undefined, // Will be expensive to get - not worth to pass to client-side validation, as this can be obtained by the user using `useFormFields()`\n                collectionSlug,\n                data: documentForm?.getData ? documentForm.getData() : data,\n                event: 'onChange',\n                operation,\n                path: pathSegments,\n                preferences: {} as any,\n                req: {\n                  payload: {\n                    config,\n                  },\n                  t,\n                  user,\n                } as unknown as PayloadRequest,\n                siblingData: getSiblingData(path),\n              })\n            : typeof prevErrorMessage.current === 'string'\n              ? prevErrorMessage.current\n              : prevValid.current\n\n        if (typeof isValid === 'string') {\n          valid = false\n          errorMessage = isValid\n        } else if (typeof isValid === 'boolean') {\n          valid = isValid\n          errorMessage = undefined\n        }\n\n        // Only dispatch if the validation result has changed\n        // This will prevent unnecessary rerenders\n        if (valid !== prevValid.current || errorMessage !== prevErrorMessage.current) {\n          prevValid.current = valid\n          prevErrorMessage.current = errorMessage\n\n          const update: UPDATE = {\n            type: 'UPDATE',\n            errorMessage,\n            path,\n            rows: field?.rows,\n            valid,\n            validate,\n            value,\n          }\n\n          if (disableFormData || (hasRows ? typeof value === 'number' && value > 0 : false)) {\n            update.disableFormData = true\n          }\n\n          if (typeof dispatchField === 'function') {\n            dispatchField(update)\n          }\n        }\n      }\n\n      void validateField()\n    },\n    150,\n    [\n      value,\n      disableFormData,\n      dispatchField,\n      getData,\n      getSiblingData,\n      getDataByPath,\n      id,\n      operation,\n      path,\n      user,\n      validate,\n      field?.rows,\n      collectionSlug,\n    ],\n  )\n\n  return result\n}\n"],"mappings":"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","ignoreList":[]}