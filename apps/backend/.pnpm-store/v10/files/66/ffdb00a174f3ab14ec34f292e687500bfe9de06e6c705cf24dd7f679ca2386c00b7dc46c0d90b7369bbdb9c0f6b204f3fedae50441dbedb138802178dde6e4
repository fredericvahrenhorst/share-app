{"version":3,"file":"feature.client.js","names":["TextStateIcon","createClientFeature","registerTextStates","setTextState","StatePlugin","toolbarGroups","props","items","stateKey","state","key","stateValue","meta","push","ChildComponent","_jsx","css","label","onSelect","editor","clearStyle","undefined","order","type","color","TextStateFeatureClient","plugins","Component","position","toolbarFixed","groups","toolbarInline"],"sources":["../../../src/features/textState/feature.client.tsx"],"sourcesContent":["'use client'\n\nimport type { ToolbarDropdownGroup, ToolbarGroup } from '../toolbars/types.js'\nimport type { TextStateFeatureProps } from './feature.server.js'\n\nimport { TextStateIcon } from '../../lexical/ui/icons/TextState/index.js'\nimport { createClientFeature } from '../../utilities/createClientFeature.js'\nimport { registerTextStates, setTextState, StatePlugin } from './textState.js'\n\nconst toolbarGroups = (props: TextStateFeatureProps): ToolbarGroup[] => {\n  const items: ToolbarDropdownGroup['items'] = []\n\n  for (const stateKey in props.state) {\n    const key = props.state[stateKey]!\n    for (const stateValue in key) {\n      const meta = key[stateValue]!\n      items.push({\n        ChildComponent: () => <TextStateIcon css={meta.css} />,\n        key: stateValue,\n        label: meta.label,\n        onSelect: ({ editor }) => {\n          setTextState(editor, stateKey, stateValue)\n        },\n      })\n    }\n  }\n\n  const clearStyle: ToolbarDropdownGroup['items'] = [\n    {\n      ChildComponent: () => <TextStateIcon />,\n      key: `clear-style`,\n      label: 'Default style',\n      onSelect: ({ editor }) => {\n        for (const stateKey in props.state) {\n          setTextState(editor, stateKey, undefined)\n        }\n      },\n      order: 1,\n    },\n  ]\n\n  return [\n    {\n      type: 'dropdown',\n      ChildComponent: () => <TextStateIcon css={{ color: 'var(--theme-elevation-600)' }} />,\n      items: [...clearStyle, ...items],\n      key: 'textState',\n      order: 30,\n    },\n  ]\n}\n\nexport const TextStateFeatureClient = createClientFeature<TextStateFeatureProps>(({ props }) => {\n  registerTextStates(props.state)\n  return {\n    plugins: [\n      {\n        Component: StatePlugin,\n        position: 'normal',\n      },\n    ],\n    toolbarFixed: {\n      groups: toolbarGroups(props),\n    },\n    toolbarInline: {\n      groups: toolbarGroups(props),\n    },\n  }\n})\n"],"mappings":"AAAA;;;AAKA,SAASA,aAAa,QAAQ;AAC9B,SAASC,mBAAmB,QAAQ;AACpC,SAASC,kBAAkB,EAAEC,YAAY,EAAEC,WAAW,QAAQ;AAE9D,MAAMC,aAAA,GAAiBC,KAAA;EACrB,MAAMC,KAAA,GAAuC,EAAE;EAE/C,KAAK,MAAMC,QAAA,IAAYF,KAAA,CAAMG,KAAK,EAAE;IAClC,MAAMC,GAAA,GAAMJ,KAAA,CAAMG,KAAK,CAACD,QAAA,CAAS;IACjC,KAAK,MAAMG,UAAA,IAAcD,GAAA,EAAK;MAC5B,MAAME,IAAA,GAAOF,GAAG,CAACC,UAAA,CAAW;MAC5BJ,KAAA,CAAMM,IAAI,CAAC;QACTC,cAAA,EAAgBA,CAAA,kBAAMC,IAAA,CAACf,aAAA;UAAcgB,GAAA,EAAKJ,IAAA,CAAKI;;QAC/CN,GAAA,EAAKC,UAAA;QACLM,KAAA,EAAOL,IAAA,CAAKK,KAAK;QACjBC,QAAA,EAAUA,CAAC;UAAEC;QAAM,CAAE;UACnBhB,YAAA,CAAagB,MAAA,EAAQX,QAAA,EAAUG,UAAA;QACjC;MACF;IACF;EACF;EAEA,MAAMS,UAAA,GAA4C,CAChD;IACEN,cAAA,EAAgBA,CAAA,kBAAMC,IAAA,CAACf,aAAA;IACvBU,GAAA,EAAK,aAAa;IAClBO,KAAA,EAAO;IACPC,QAAA,EAAUA,CAAC;MAAEC;IAAM,CAAE;MACnB,KAAK,MAAMX,QAAA,IAAYF,KAAA,CAAMG,KAAK,EAAE;QAClCN,YAAA,CAAagB,MAAA,EAAQX,QAAA,EAAUa,SAAA;MACjC;IACF;IACAC,KAAA,EAAO;EACT,EACD;EAED,OAAO,CACL;IACEC,IAAA,EAAM;IACNT,cAAA,EAAgBA,CAAA,kBAAMC,IAAA,CAACf,aAAA;MAAcgB,GAAA,EAAK;QAAEQ,KAAA,EAAO;MAA6B;;IAChFjB,KAAA,EAAO,C,GAAIa,UAAA,E,GAAeb,KAAA,CAAM;IAChCG,GAAA,EAAK;IACLY,KAAA,EAAO;EACT,EACD;AACH;AAEA,OAAO,MAAMG,sBAAA,GAAyBxB,mBAAA,CAA2C,CAAC;EAAEK;AAAK,CAAE;EACzFJ,kBAAA,CAAmBI,KAAA,CAAMG,KAAK;EAC9B,OAAO;IACLiB,OAAA,EAAS,CACP;MACEC,SAAA,EAAWvB,WAAA;MACXwB,QAAA,EAAU;IACZ,EACD;IACDC,YAAA,EAAc;MACZC,MAAA,EAAQzB,aAAA,CAAcC,KAAA;IACxB;IACAyB,aAAA,EAAe;MACbD,MAAA,EAAQzB,aAAA,CAAcC,KAAA;IACxB;EACF;AACF","ignoreList":[]}