{"version":3,"file":"index.js","names":["Gutter","ListQueryProvider","SetDocumentStepNav","notFound","isNumber","React","fetchLatestVersion","fetchVersions","VersionDrawerCreatedAtCell","buildVersionColumns","VersionsViewClient","baseClass","VersionsView","props","hasPublishedDoc","initPageResult","collectionConfig","docID","id","globalConfig","req","i18n","payload","config","t","user","searchParams","limit","page","sort","versions","disableGutter","useVersionDrawerCreatedAtCell","draftsEnabled","drafts","collectionSlug","slug","globalSlug","localization","routes","api","apiRoute","serverURL","whereQuery","and","push","snapshot","not_equals","defaultLimit","admin","pagination","limitToUse","Number","versionsData","depth","overrideAccess","parseInt","toString","undefined","parentID","where","currentlyPublishedVersion","latestDraftVersion","Promise","all","select","updatedAt","status","resolve","fetchURL","columns","CreatedAtCellOverride","docs","pluralLabel","labels","plural","label","GutterComponent","Fragment","_jsxs","_jsx","useAsTitle","view","className","data","defaultSort","modifySearchParams","orderableFieldName","orderable","paginationLimits","limits"],"sources":["../../../src/views/Versions/index.tsx"],"sourcesContent":["import { Gutter, ListQueryProvider, SetDocumentStepNav } from '@payloadcms/ui'\nimport { notFound } from 'next/navigation.js'\nimport { type DocumentViewServerProps, type PaginatedDocs, type Where } from 'payload'\nimport { isNumber } from 'payload/shared'\nimport React from 'react'\n\nimport { fetchLatestVersion, fetchVersions } from '../Version/fetchVersions.js'\nimport { VersionDrawerCreatedAtCell } from '../Version/SelectComparison/VersionDrawer/CreatedAtCell.js'\nimport { buildVersionColumns } from './buildColumns.js'\nimport { VersionsViewClient } from './index.client.js'\nimport './index.scss'\n\nconst baseClass = 'versions'\n\nexport async function VersionsView(props: DocumentViewServerProps) {\n  const {\n    hasPublishedDoc,\n    initPageResult: {\n      collectionConfig,\n      docID: id,\n      globalConfig,\n      req,\n      req: {\n        i18n,\n        payload: { config },\n        t,\n        user,\n      },\n    },\n    searchParams: { limit, page, sort },\n    versions: { disableGutter = false, useVersionDrawerCreatedAtCell = false } = {},\n  } = props\n\n  const draftsEnabled = (collectionConfig ?? globalConfig)?.versions?.drafts\n\n  const collectionSlug = collectionConfig?.slug\n  const globalSlug = globalConfig?.slug\n\n  const {\n    localization,\n    routes: { api: apiRoute },\n    serverURL,\n  } = config\n\n  const whereQuery: {\n    and: Array<{ parent?: { equals: number | string }; snapshot?: { not_equals: boolean } }>\n  } & Where = {\n    and: [],\n  }\n  if (localization && draftsEnabled) {\n    whereQuery.and.push({\n      snapshot: {\n        not_equals: true,\n      },\n    })\n  }\n\n  const defaultLimit = collectionSlug ? collectionConfig?.admin?.pagination?.defaultLimit : 10\n\n  const limitToUse = isNumber(limit) ? Number(limit) : defaultLimit\n\n  const versionsData: PaginatedDocs = await fetchVersions({\n    collectionSlug,\n    depth: 0,\n    globalSlug,\n    limit: limitToUse,\n    overrideAccess: false,\n    page: page ? parseInt(page.toString(), 10) : undefined,\n    parentID: id,\n    req,\n    sort: sort as string,\n    user,\n    where: whereQuery,\n  })\n\n  if (!versionsData) {\n    return notFound()\n  }\n\n  const [currentlyPublishedVersion, latestDraftVersion] = await Promise.all([\n    hasPublishedDoc\n      ? fetchLatestVersion({\n          collectionSlug,\n          depth: 0,\n          globalSlug,\n          overrideAccess: false,\n          parentID: id,\n          req,\n          select: {\n            id: true,\n            updatedAt: true,\n          },\n          status: 'published',\n          user,\n        })\n      : Promise.resolve(null),\n    draftsEnabled\n      ? fetchLatestVersion({\n          collectionSlug,\n          depth: 0,\n          globalSlug,\n          overrideAccess: false,\n          parentID: id,\n          req,\n          select: {\n            id: true,\n            updatedAt: true,\n          },\n          status: 'draft',\n          user,\n        })\n      : Promise.resolve(null),\n  ])\n\n  const fetchURL = collectionSlug\n    ? `${serverURL}${apiRoute}/${collectionSlug}/versions`\n    : `${serverURL}${apiRoute}/globals/${globalSlug}/versions`\n\n  const columns = buildVersionColumns({\n    collectionConfig,\n    CreatedAtCellOverride: useVersionDrawerCreatedAtCell ? VersionDrawerCreatedAtCell : undefined,\n    currentlyPublishedVersion,\n    docID: id,\n    docs: versionsData?.docs,\n    globalConfig,\n    i18n,\n    latestDraftVersion,\n  })\n\n  const pluralLabel =\n    typeof collectionConfig?.labels?.plural === 'function'\n      ? collectionConfig.labels.plural({ i18n, t })\n      : (collectionConfig?.labels?.plural ?? globalConfig?.label)\n\n  const GutterComponent = disableGutter ? React.Fragment : Gutter\n\n  return (\n    <React.Fragment>\n      <SetDocumentStepNav\n        collectionSlug={collectionSlug}\n        globalSlug={globalSlug}\n        id={id}\n        pluralLabel={pluralLabel}\n        useAsTitle={collectionConfig?.admin?.useAsTitle || globalSlug}\n        view={i18n.t('version:versions')}\n      />\n      <main className={baseClass}>\n        <GutterComponent className={`${baseClass}__wrap`}>\n          <ListQueryProvider\n            data={versionsData}\n            defaultLimit={limitToUse}\n            defaultSort={sort as string}\n            modifySearchParams\n            orderableFieldName={collectionConfig?.orderable === true ? '_order' : undefined}\n          >\n            <VersionsViewClient\n              baseClass={baseClass}\n              columns={columns}\n              fetchURL={fetchURL}\n              paginationLimits={collectionConfig?.admin?.pagination?.limits}\n            />\n          </ListQueryProvider>\n        </GutterComponent>\n      </main>\n    </React.Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]}