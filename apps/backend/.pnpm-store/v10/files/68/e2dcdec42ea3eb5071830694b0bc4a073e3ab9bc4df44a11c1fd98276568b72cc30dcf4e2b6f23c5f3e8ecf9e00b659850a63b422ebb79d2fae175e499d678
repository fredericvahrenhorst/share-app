{"version":3,"sources":["../../src/queries/parseParams.ts"],"sourcesContent":["import type { FilterQuery } from 'mongoose'\nimport type { FlattenedField, Operator, Payload, Where } from 'payload'\n\nimport { deepMergeWithCombinedArrays } from 'payload'\nimport { validOperatorSet } from 'payload/shared'\n\nimport { buildAndOrConditions } from './buildAndOrConditions.js'\nimport { buildSearchParam } from './buildSearchParams.js'\n\nexport async function parseParams({\n  collectionSlug,\n  fields,\n  globalSlug,\n  locale,\n  parentIsLocalized,\n  payload,\n  where,\n}: {\n  collectionSlug?: string\n  fields: FlattenedField[]\n  globalSlug?: string\n  locale?: string\n  parentIsLocalized: boolean\n  payload: Payload\n  where: Where\n}): Promise<Record<string, unknown>> {\n  let result = {} as FilterQuery<any>\n\n  if (typeof where === 'object') {\n    // We need to determine if the whereKey is an AND, OR, or a schema path\n    for (const relationOrPath of Object.keys(where)) {\n      const condition = where[relationOrPath]\n      let conditionOperator: '$and' | '$or' | null = null\n      if (relationOrPath.toLowerCase() === 'and') {\n        conditionOperator = '$and'\n      } else if (relationOrPath.toLowerCase() === 'or') {\n        conditionOperator = '$or'\n      }\n      if (Array.isArray(condition)) {\n        const builtConditions = await buildAndOrConditions({\n          collectionSlug,\n          fields,\n          globalSlug,\n          locale,\n          parentIsLocalized,\n          payload,\n          where: condition,\n        })\n        if (builtConditions.length > 0 && conditionOperator !== null) {\n          result[conditionOperator] = builtConditions\n        }\n      } else {\n        // It's a path - and there can be multiple comparisons on a single path.\n        // For example - title like 'test' and title not equal to 'tester'\n        // So we need to loop on keys again here to handle each operator independently\n        const pathOperators = where[relationOrPath]\n        if (typeof pathOperators === 'object') {\n          const validOperators = Object.keys(pathOperators).filter((operator) =>\n            validOperatorSet.has(operator as Operator),\n          )\n\n          for (const operator of validOperators) {\n            const searchParam = await buildSearchParam({\n              collectionSlug,\n              fields,\n              globalSlug,\n              incomingPath: relationOrPath,\n              locale,\n              operator,\n              parentIsLocalized,\n              payload,\n              val: (pathOperators as Record<string, Where>)[operator],\n            })\n\n            if (searchParam?.value && searchParam?.path) {\n              if (validOperators.length > 1) {\n                if (!result.$and) {\n                  result.$and = []\n                }\n                result.$and.push({\n                  [searchParam.path]: searchParam.value,\n                })\n              } else {\n                if (result[searchParam.path]) {\n                  if (!result.$and) {\n                    result.$and = []\n                  }\n\n                  result.$and.push({ [searchParam.path]: result[searchParam.path] })\n                  result.$and.push({\n                    [searchParam.path]: searchParam.value,\n                  })\n                  delete result[searchParam.path]\n                } else {\n                  result[searchParam.path] = searchParam.value\n                }\n              }\n            } else if (typeof searchParam?.value === 'object') {\n              result = deepMergeWithCombinedArrays(result, searchParam.value ?? {}, {\n                // dont clone Types.ObjectIDs\n                clone: false,\n              })\n            }\n          }\n        }\n      }\n    }\n  }\n\n  return result\n}\n"],"names":["deepMergeWithCombinedArrays","validOperatorSet","buildAndOrConditions","buildSearchParam","parseParams","collectionSlug","fields","globalSlug","locale","parentIsLocalized","payload","where","result","relationOrPath","Object","keys","condition","conditionOperator","toLowerCase","Array","isArray","builtConditions","length","pathOperators","validOperators","filter","operator","has","searchParam","incomingPath","val","value","path","$and","push","clone"],"mappings":"AAGA,SAASA,2BAA2B,QAAQ,UAAS;AACrD,SAASC,gBAAgB,QAAQ,iBAAgB;AAEjD,SAASC,oBAAoB,QAAQ,4BAA2B;AAChE,SAASC,gBAAgB,QAAQ,yBAAwB;AAEzD,OAAO,eAAeC,YAAY,EAChCC,cAAc,EACdC,MAAM,EACNC,UAAU,EACVC,MAAM,EACNC,iBAAiB,EACjBC,OAAO,EACPC,KAAK,EASN;IACC,IAAIC,SAAS,CAAC;IAEd,IAAI,OAAOD,UAAU,UAAU;QAC7B,uEAAuE;QACvE,KAAK,MAAME,kBAAkBC,OAAOC,IAAI,CAACJ,OAAQ;YAC/C,MAAMK,YAAYL,KAAK,CAACE,eAAe;YACvC,IAAII,oBAA2C;YAC/C,IAAIJ,eAAeK,WAAW,OAAO,OAAO;gBAC1CD,oBAAoB;YACtB,OAAO,IAAIJ,eAAeK,WAAW,OAAO,MAAM;gBAChDD,oBAAoB;YACtB;YACA,IAAIE,MAAMC,OAAO,CAACJ,YAAY;gBAC5B,MAAMK,kBAAkB,MAAMnB,qBAAqB;oBACjDG;oBACAC;oBACAC;oBACAC;oBACAC;oBACAC;oBACAC,OAAOK;gBACT;gBACA,IAAIK,gBAAgBC,MAAM,GAAG,KAAKL,sBAAsB,MAAM;oBAC5DL,MAAM,CAACK,kBAAkB,GAAGI;gBAC9B;YACF,OAAO;gBACL,wEAAwE;gBACxE,kEAAkE;gBAClE,8EAA8E;gBAC9E,MAAME,gBAAgBZ,KAAK,CAACE,eAAe;gBAC3C,IAAI,OAAOU,kBAAkB,UAAU;oBACrC,MAAMC,iBAAiBV,OAAOC,IAAI,CAACQ,eAAeE,MAAM,CAAC,CAACC,WACxDzB,iBAAiB0B,GAAG,CAACD;oBAGvB,KAAK,MAAMA,YAAYF,eAAgB;wBACrC,MAAMI,cAAc,MAAMzB,iBAAiB;4BACzCE;4BACAC;4BACAC;4BACAsB,cAAchB;4BACdL;4BACAkB;4BACAjB;4BACAC;4BACAoB,KAAK,AAACP,aAAuC,CAACG,SAAS;wBACzD;wBAEA,IAAIE,aAAaG,SAASH,aAAaI,MAAM;4BAC3C,IAAIR,eAAeF,MAAM,GAAG,GAAG;gCAC7B,IAAI,CAACV,OAAOqB,IAAI,EAAE;oCAChBrB,OAAOqB,IAAI,GAAG,EAAE;gCAClB;gCACArB,OAAOqB,IAAI,CAACC,IAAI,CAAC;oCACf,CAACN,YAAYI,IAAI,CAAC,EAAEJ,YAAYG,KAAK;gCACvC;4BACF,OAAO;gCACL,IAAInB,MAAM,CAACgB,YAAYI,IAAI,CAAC,EAAE;oCAC5B,IAAI,CAACpB,OAAOqB,IAAI,EAAE;wCAChBrB,OAAOqB,IAAI,GAAG,EAAE;oCAClB;oCAEArB,OAAOqB,IAAI,CAACC,IAAI,CAAC;wCAAE,CAACN,YAAYI,IAAI,CAAC,EAAEpB,MAAM,CAACgB,YAAYI,IAAI,CAAC;oCAAC;oCAChEpB,OAAOqB,IAAI,CAACC,IAAI,CAAC;wCACf,CAACN,YAAYI,IAAI,CAAC,EAAEJ,YAAYG,KAAK;oCACvC;oCACA,OAAOnB,MAAM,CAACgB,YAAYI,IAAI,CAAC;gCACjC,OAAO;oCACLpB,MAAM,CAACgB,YAAYI,IAAI,CAAC,GAAGJ,YAAYG,KAAK;gCAC9C;4BACF;wBACF,OAAO,IAAI,OAAOH,aAAaG,UAAU,UAAU;4BACjDnB,SAASZ,4BAA4BY,QAAQgB,YAAYG,KAAK,IAAI,CAAC,GAAG;gCACpE,6BAA6B;gCAC7BI,OAAO;4BACT;wBACF;oBACF;gBACF;YACF;QACF;IACF;IAEA,OAAOvB;AACT"}