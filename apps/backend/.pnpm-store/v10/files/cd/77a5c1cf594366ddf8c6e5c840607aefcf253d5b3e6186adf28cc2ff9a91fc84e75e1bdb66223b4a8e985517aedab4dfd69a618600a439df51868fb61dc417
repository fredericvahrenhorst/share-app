{"version":3,"file":"index.js","names":["Button","Collapsible","Drawer","EditDepthProvider","ErrorPill","Form","formatDrawerSlug","FormSubmit","Pill","RenderFields","SectionTitle","useConfig","useDocumentForm","useDocumentInfo","useEditDepth","useFormSubmitted","useServerFunctions","useTranslation","abortAndIgnore","deepCopyObjectSimpleWithoutReactComponents","reduceFieldsToValues","React","useCallback","useEffect","useMemo","useRef","baseClass","useLexicalComposerContext","getTranslation","$getNodeByKey","v4","uuid","useEditorConfigContext","useLexicalDrawer","$isBlockNode","BlockContent","removeEmptyArrayValues","BlockComponent","props","cacheBuster","formData","nodeKey","submitted","id","collectionSlug","globalSlug","fieldProps","featureClientSchemaMap","field","parentLexicalRichTextField","initialLexicalFormState","permissions","readOnly","schemaPath","uuidFromContext","fields","parentDocumentFields","onChangeAbortControllerRef","AbortController","editDepth","errorCount","setErrorCount","useState","config","drawerSlug","slug","depth","toggleDrawer","getDocPreferences","setDocFieldPreferences","editor","getFormState","schemaFieldsPath","blockType","initialState","setInitialState","formState","blockName","initialValue","passesCondition","valid","value","hasMounted","prevCacheBuster","current","CustomLabel","setCustomLabel","customComponents","BlockLabel","CustomBlock","setCustomBlock","Block","abortController","awaitInitialState","state","data","docPermissions","docPreferences","documentFormState","initialBlockData","operation","renderAllFields","signal","newFormStateData","update","node","newData","setFields","_components","isCollapsed","setIsCollapsed","collapsed","componentMapRenderedBlockPath","clientSchemaMap","blocksField","clientBlock","blockReferences","blocksMap","blocks","i18n","t","onChange","prevFormState","submit","controller","newFormState","initialBlockFormState","setTimeout","rowErrorCount","formField","Object","values","removeBlock","remove","blockDisplayName","labels","singular","onCollapsedChange","changedCollapsed","then","currentDocPreferences","currentFieldPreferences","name","collapsedArray","newCollapsed","length","includes","push","splice","indexOf","hello","EditButton","_jsx","buttonStyle","className","disabled","el","icon","onClick","e","preventDefault","stopPropagation","onMouseDown","round","size","tooltip","label","RemoveButton","admin","BlockCollapsible","children","disableBlockName","editButton","fieldHasErrors","Label","removeButton","join","collapsibleStyle","header","_jsxs","pillStyle","path","count","withMessage","isEditable","onToggle","incomingCollapsedState","BlockDrawer","title","_Fragment","forceRender","parentIndexPath","parentPath","parentSchemaPath","programmaticSubmit","beforeSubmit","onSubmit","formSchema"],"sources":["../../../../../src/features/blocks/client/component/index.tsx"],"sourcesContent":["'use client'\n\nimport {\n  Button,\n  Collapsible,\n  Drawer,\n  EditDepthProvider,\n  ErrorPill,\n  Form,\n  formatDrawerSlug,\n  FormSubmit,\n  Pill,\n  RenderFields,\n  SectionTitle,\n  useConfig,\n  useDocumentForm,\n  useDocumentInfo,\n  useEditDepth,\n  useFormSubmitted,\n  useServerFunctions,\n  useTranslation,\n} from '@payloadcms/ui'\nimport { abortAndIgnore } from '@payloadcms/ui/shared'\nimport { deepCopyObjectSimpleWithoutReactComponents, reduceFieldsToValues } from 'payload/shared'\nimport React, { useCallback, useEffect, useMemo, useRef } from 'react'\n\nconst baseClass = 'lexical-block'\n\nimport { useLexicalComposerContext } from '@lexical/react/LexicalComposerContext'\nimport { getTranslation } from '@payloadcms/translations'\nimport { $getNodeByKey } from 'lexical'\nimport {\n  type BlocksFieldClient,\n  type ClientBlock,\n  type CollapsedPreferences,\n  type FormState,\n} from 'payload'\nimport { v4 as uuid } from 'uuid'\n\nimport type { BlockFields } from '../../server/nodes/BlocksNode.js'\n\nimport { useEditorConfigContext } from '../../../../lexical/config/client/EditorConfigProvider.js'\nimport { useLexicalDrawer } from '../../../../utilities/fieldsDrawer/useLexicalDrawer.js'\nimport './index.scss'\nimport { $isBlockNode } from '../nodes/BlocksNode.js'\nimport { BlockContent } from './BlockContent.js'\nimport { removeEmptyArrayValues } from './removeEmptyArrayValues.js'\n\ntype Props = {\n  /**\n   * Can be modified by the node in order to trigger the re-fetch of the initial state based on the\n   * formData. This is useful when node.setFields() is explicitly called from outside of the form - in\n   * this case, the new field state is likely not reflected in the form state, so we need to re-fetch\n   */\n  readonly cacheBuster: number\n  readonly formData: BlockFields\n  readonly nodeKey: string\n}\n\nexport const BlockComponent: React.FC<Props> = (props) => {\n  const { cacheBuster, formData, nodeKey } = props\n  const submitted = useFormSubmitted()\n  const { id, collectionSlug, globalSlug } = useDocumentInfo()\n  const {\n    fieldProps: {\n      featureClientSchemaMap,\n      field: parentLexicalRichTextField,\n      initialLexicalFormState,\n      permissions,\n      readOnly,\n      schemaPath,\n    },\n    uuid: uuidFromContext,\n  } = useEditorConfigContext()\n\n  const { fields: parentDocumentFields } = useDocumentForm()\n  const onChangeAbortControllerRef = useRef(new AbortController())\n  const editDepth = useEditDepth()\n  const [errorCount, setErrorCount] = React.useState(0)\n\n  const { config } = useConfig()\n\n  const drawerSlug = formatDrawerSlug({\n    slug: `lexical-blocks-create-${uuidFromContext}-${formData.id}`,\n    depth: editDepth,\n  })\n  const { toggleDrawer } = useLexicalDrawer(drawerSlug)\n\n  // Used for saving collapsed to preferences (and gettin' it from there again)\n  // Remember, these preferences are scoped to the whole document, not just this form. This\n  // is important to consider for the data path used in setDocFieldPreferences\n  const { getDocPreferences, setDocFieldPreferences } = useDocumentInfo()\n  const [editor] = useLexicalComposerContext()\n\n  const { getFormState } = useServerFunctions()\n  const schemaFieldsPath = `${schemaPath}.lexical_internal_feature.blocks.lexical_blocks.${formData.blockType}.fields`\n\n  const [initialState, setInitialState] = React.useState<false | FormState | undefined>(() => {\n    return initialLexicalFormState?.[formData.id]?.formState\n      ? {\n          ...initialLexicalFormState?.[formData.id]?.formState,\n          blockName: {\n            initialValue: formData.blockName,\n            passesCondition: true,\n            valid: true,\n            value: formData.blockName,\n          },\n        }\n      : false\n  })\n\n  const hasMounted = useRef(false)\n  const prevCacheBuster = useRef(cacheBuster)\n  useEffect(() => {\n    if (hasMounted.current) {\n      if (prevCacheBuster.current !== cacheBuster) {\n        setInitialState(false)\n      }\n      prevCacheBuster.current = cacheBuster\n    } else {\n      hasMounted.current = true\n    }\n  }, [cacheBuster])\n\n  const [CustomLabel, setCustomLabel] = React.useState<React.ReactNode | undefined>(\n    // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n    initialState?.['_components']?.customComponents?.BlockLabel,\n  )\n\n  const [CustomBlock, setCustomBlock] = React.useState<React.ReactNode | undefined>(\n    // @ts-expect-error - vestiges of when tsconfig was not strict. Feel free to improve\n    initialState?.['_components']?.customComponents?.Block,\n  )\n\n  // Initial state for newly created blocks\n  useEffect(() => {\n    const abortController = new AbortController()\n\n    const awaitInitialState = async () => {\n      /*\n       * This will only run if a new block is created. For all existing blocks that are loaded when the document is loaded, or when the form is saved,\n       * this is not run, as the lexical field RSC will fetch the state server-side and pass it to the client. That way, we avoid unnecessary client-side\n       * requests. Though for newly created blocks, we need to fetch the state client-side, as the server doesn't know about the block yet.\n       */\n      const { state } = await getFormState({\n        id,\n        collectionSlug,\n        data: formData,\n        docPermissions: { fields: true },\n        docPreferences: await getDocPreferences(),\n        documentFormState: deepCopyObjectSimpleWithoutReactComponents(parentDocumentFields),\n        globalSlug,\n        initialBlockData: formData,\n        operation: 'update',\n        renderAllFields: true,\n        schemaPath: schemaFieldsPath,\n        signal: abortController.signal,\n      })\n\n      if (state) {\n        state.blockName = {\n          initialValue: formData.blockName,\n          passesCondition: true,\n          valid: true,\n          value: formData.blockName,\n        }\n\n        const newFormStateData: BlockFields = reduceFieldsToValues(\n          deepCopyObjectSimpleWithoutReactComponents(state),\n          true,\n        ) as BlockFields\n\n        // Things like default values may come back from the server => update the node with the new data\n        editor.update(() => {\n          const node = $getNodeByKey(nodeKey)\n          if (node && $isBlockNode(node)) {\n            const newData = newFormStateData\n            newData.blockType = formData.blockType\n\n            node.setFields(newData, true)\n          }\n        })\n\n        setInitialState(state)\n        setCustomLabel(state._components?.customComponents?.BlockLabel)\n        setCustomBlock(state._components?.customComponents?.Block)\n      }\n    }\n\n    if (formData && !initialState) {\n      void awaitInitialState()\n    }\n\n    return () => {\n      abortAndIgnore(abortController)\n    }\n  }, [\n    getFormState,\n    schemaFieldsPath,\n    id,\n    formData,\n    editor,\n    nodeKey,\n    initialState,\n    collectionSlug,\n    globalSlug,\n    getDocPreferences,\n    parentDocumentFields,\n  ])\n\n  const [isCollapsed, setIsCollapsed] = React.useState<boolean>(\n    initialLexicalFormState?.[formData.id]?.collapsed ?? false,\n  )\n\n  const componentMapRenderedBlockPath = `${schemaPath}.lexical_internal_feature.blocks.lexical_blocks.${formData.blockType}`\n\n  const clientSchemaMap = featureClientSchemaMap['blocks']\n\n  const blocksField: BlocksFieldClient | undefined = clientSchemaMap?.[\n    componentMapRenderedBlockPath\n  ]?.[0] as BlocksFieldClient\n\n  const clientBlock: ClientBlock | undefined = blocksField.blockReferences\n    ? typeof blocksField?.blockReferences?.[0] === 'string'\n      ? config.blocksMap[blocksField?.blockReferences?.[0]]\n      : blocksField?.blockReferences?.[0]\n    : blocksField?.blocks?.[0]\n\n  const { i18n, t } = useTranslation<object, string>()\n\n  const onChange = useCallback(\n    async ({ formState: prevFormState, submit }: { formState: FormState; submit?: boolean }) => {\n      abortAndIgnore(onChangeAbortControllerRef.current)\n\n      const controller = new AbortController()\n      onChangeAbortControllerRef.current = controller\n\n      const { state: newFormState } = await getFormState({\n        id,\n        collectionSlug,\n        docPermissions: {\n          fields: true,\n        },\n        docPreferences: await getDocPreferences(),\n        documentFormState: deepCopyObjectSimpleWithoutReactComponents(parentDocumentFields),\n        formState: prevFormState,\n        globalSlug,\n        initialBlockFormState: prevFormState,\n        operation: 'update',\n        renderAllFields: submit ? true : false,\n        schemaPath: schemaFieldsPath,\n        signal: controller.signal,\n      })\n\n      if (!newFormState) {\n        return prevFormState\n      }\n\n      if (prevFormState.blockName) {\n        newFormState.blockName = prevFormState.blockName\n      }\n\n      const newFormStateData: BlockFields = reduceFieldsToValues(\n        removeEmptyArrayValues({\n          fields: deepCopyObjectSimpleWithoutReactComponents(newFormState),\n        }),\n        true,\n      ) as BlockFields\n\n      setTimeout(() => {\n        editor.update(() => {\n          const node = $getNodeByKey(nodeKey)\n          if (node && $isBlockNode(node)) {\n            const newData = newFormStateData\n            newData.blockType = formData.blockType\n            node.setFields(newData, true)\n          }\n        })\n      }, 0)\n\n      if (submit) {\n        setCustomLabel(newFormState._components?.customComponents?.BlockLabel)\n        setCustomBlock(newFormState._components?.customComponents?.Block)\n\n        let rowErrorCount = 0\n        for (const formField of Object.values(newFormState)) {\n          if (formField?.valid === false) {\n            rowErrorCount++\n          }\n        }\n        setErrorCount(rowErrorCount)\n      }\n\n      return newFormState\n    },\n\n    [\n      getFormState,\n      id,\n      collectionSlug,\n      getDocPreferences,\n      globalSlug,\n      schemaFieldsPath,\n      formData.blockType,\n      parentDocumentFields,\n      editor,\n      nodeKey,\n    ],\n  )\n\n  useEffect(() => {\n    return () => {\n      abortAndIgnore(onChangeAbortControllerRef.current)\n    }\n  }, [])\n\n  const removeBlock = useCallback(() => {\n    editor.update(() => {\n      $getNodeByKey(nodeKey)?.remove()\n    })\n  }, [editor, nodeKey])\n\n  const blockDisplayName = clientBlock?.labels?.singular\n    ? getTranslation(clientBlock.labels.singular, i18n)\n    : clientBlock?.slug\n\n  const onCollapsedChange = useCallback(\n    (changedCollapsed: boolean) => {\n      void getDocPreferences().then((currentDocPreferences) => {\n        const currentFieldPreferences =\n          currentDocPreferences?.fields?.[parentLexicalRichTextField.name]\n\n        const collapsedArray = currentFieldPreferences?.collapsed\n\n        const newCollapsed: CollapsedPreferences =\n          collapsedArray && collapsedArray?.length ? collapsedArray : []\n\n        if (changedCollapsed) {\n          if (!newCollapsed.includes(formData.id)) {\n            newCollapsed.push(formData.id)\n          }\n        } else {\n          if (newCollapsed.includes(formData.id)) {\n            newCollapsed.splice(newCollapsed.indexOf(formData.id), 1)\n          }\n        }\n\n        setDocFieldPreferences(parentLexicalRichTextField.name, {\n          collapsed: newCollapsed,\n          hello: 'hi',\n        })\n      })\n    },\n    [getDocPreferences, parentLexicalRichTextField.name, setDocFieldPreferences, formData.id],\n  )\n\n  const EditButton = useMemo(\n    () => () => (\n      <Button\n        buttonStyle=\"icon-label\"\n        className={`${baseClass}__editButton`}\n        disabled={readOnly}\n        el=\"button\"\n        icon=\"edit\"\n        onClick={(e) => {\n          e.preventDefault()\n          e.stopPropagation()\n          toggleDrawer()\n          return false\n        }}\n        onMouseDown={(e) => {\n          // Needed to preserve lexical selection for toggleDrawer lexical selection restore.\n          // I believe this is needed due to this button (usually) being inside of a collapsible.\n          e.preventDefault()\n        }}\n        round\n        size=\"small\"\n        tooltip={t('lexical:blocks:inlineBlocks:edit', { label: blockDisplayName })}\n      />\n    ),\n    [blockDisplayName, readOnly, t, toggleDrawer],\n  )\n\n  const RemoveButton = useMemo(\n    () => () => (\n      <Button\n        buttonStyle=\"icon-label\"\n        className={`${baseClass}__removeButton`}\n        disabled={parentLexicalRichTextField?.admin?.readOnly || false}\n        icon=\"x\"\n        onClick={(e) => {\n          e.preventDefault()\n          removeBlock()\n        }}\n        round\n        tooltip=\"Remove Block\"\n      />\n    ),\n    [parentLexicalRichTextField?.admin?.readOnly, removeBlock],\n  )\n\n  const BlockCollapsible = useMemo(\n    () =>\n      ({\n        children,\n        disableBlockName,\n        editButton,\n        errorCount,\n        fieldHasErrors,\n        Label,\n        removeButton,\n      }: {\n        children?: React.ReactNode\n        disableBlockName?: boolean\n        editButton?: boolean\n        errorCount?: number\n        fieldHasErrors?: boolean\n        /**\n         * Override the default label with a custom label\n         */\n        Label?: React.ReactNode\n        removeButton?: boolean\n      }) => (\n        <div className={baseClass + ' ' + baseClass + '-' + formData.blockType}>\n          <Collapsible\n            className={[\n              `${baseClass}__row`,\n              fieldHasErrors ? `${baseClass}__row--has-errors` : `${baseClass}__row--no-errors`,\n            ].join(' ')}\n            collapsibleStyle={fieldHasErrors ? 'error' : 'default'}\n            header={\n              <div className={`${baseClass}__block-header`}>\n                {(Label ?? CustomLabel) ? (\n                  (Label ?? CustomLabel)\n                ) : (\n                  <div>\n                    <Pill\n                      className={`${baseClass}__block-pill ${baseClass}__block-pill-${formData?.blockType}`}\n                      pillStyle=\"white\"\n                      size=\"small\"\n                    >\n                      {blockDisplayName ?? formData?.blockType}\n                    </Pill>\n                    {!disableBlockName && !clientBlock?.admin?.disableBlockName && (\n                      <SectionTitle\n                        path=\"blockName\"\n                        readOnly={parentLexicalRichTextField?.admin?.readOnly || false}\n                      />\n                    )}\n\n                    {fieldHasErrors && (\n                      <ErrorPill count={errorCount ?? 0} i18n={i18n} withMessage />\n                    )}\n                  </div>\n                )}\n\n                <div>\n                  {(CustomBlock && editButton !== false) || (!CustomBlock && editButton) ? (\n                    <EditButton />\n                  ) : null}\n                  {removeButton !== false && editor.isEditable() ? <RemoveButton /> : null}\n                </div>\n              </div>\n            }\n            isCollapsed={isCollapsed}\n            key={0}\n            onToggle={(incomingCollapsedState) => {\n              onCollapsedChange(incomingCollapsedState)\n              setIsCollapsed(incomingCollapsedState)\n            }}\n          >\n            {children}\n          </Collapsible>\n        </div>\n      ),\n    [\n      CustomBlock,\n      CustomLabel,\n      EditButton,\n      RemoveButton,\n      blockDisplayName,\n      clientBlock?.admin?.disableBlockName,\n      editor,\n      formData.blockType,\n      i18n,\n      isCollapsed,\n      onCollapsedChange,\n      parentLexicalRichTextField?.admin?.readOnly,\n    ],\n  )\n\n  const BlockDrawer = useMemo(\n    () => () => (\n      <EditDepthProvider>\n        <Drawer\n          className={''}\n          slug={drawerSlug}\n          title={t(`lexical:blocks:inlineBlocks:${formData?.id ? 'edit' : 'create'}`, {\n            label: blockDisplayName ?? t('lexical:blocks:inlineBlocks:label'),\n          })}\n        >\n          {initialState ? (\n            <>\n              <RenderFields\n                fields={clientBlock?.fields ?? []}\n                forceRender\n                parentIndexPath=\"\"\n                parentPath=\"\" // See Blocks feature path for details as for why this is empty\n                parentSchemaPath={schemaFieldsPath}\n                permissions={true}\n                readOnly={false}\n              />\n              <FormSubmit programmaticSubmit={true}>{t('fields:saveChanges')}</FormSubmit>\n            </>\n          ) : null}\n        </Drawer>\n      </EditDepthProvider>\n    ),\n    [\n      initialState,\n      drawerSlug,\n      blockDisplayName,\n      t,\n      clientBlock?.fields,\n      schemaFieldsPath,\n      permissions,\n      // DO NOT ADD FORMDATA HERE! Adding formData will kick you out of sub block editors while writing.\n    ],\n  )\n\n  // Memoized Form JSX\n  const Block = useMemo(() => {\n    if (!initialState) {\n      return null\n    }\n    return (\n      <Form\n        beforeSubmit={[\n          async ({ formState }) => {\n            // This is only called when form is submitted from drawer - usually only the case if the block has a custom Block component\n            return await onChange({ formState, submit: true })\n          },\n        ]}\n        el=\"div\"\n        fields={clientBlock?.fields ?? []}\n        initialState={initialState}\n        onChange={[onChange]}\n        onSubmit={(formState, newData) => {\n          // This is only called when form is submitted from drawer - usually only the case if the block has a custom Block component\n          newData.blockType = formData.blockType\n          editor.update(() => {\n            const node = $getNodeByKey(nodeKey)\n            if (node && $isBlockNode(node)) {\n              node.setFields(newData as BlockFields, true)\n            }\n          })\n          toggleDrawer()\n        }}\n        submitted={submitted}\n        uuid={uuid()}\n      >\n        <BlockContent\n          baseClass={baseClass}\n          BlockDrawer={BlockDrawer}\n          Collapsible={BlockCollapsible}\n          CustomBlock={CustomBlock}\n          EditButton={EditButton}\n          errorCount={errorCount}\n          formSchema={clientBlock?.fields ?? []}\n          initialState={initialState}\n          nodeKey={nodeKey}\n          RemoveButton={RemoveButton}\n        />\n      </Form>\n    )\n  }, [\n    BlockCollapsible,\n    BlockDrawer,\n    CustomBlock,\n    clientBlock?.fields,\n    RemoveButton,\n    EditButton,\n    editor,\n    errorCount,\n    toggleDrawer,\n    clientBlock?.fields,\n    // DO NOT ADD FORMDATA HERE! Adding formData will kick you out of sub block editors while writing.\n    initialState,\n    nodeKey,\n    onChange,\n    submitted,\n  ])\n\n  if (!clientBlock) {\n    return (\n      <BlockCollapsible disableBlockName={true} fieldHasErrors={true}>\n        <div className=\"lexical-block-not-found\">\n          Error: Block '{formData.blockType}' not found in the config but exists in the lexical data\n        </div>\n      </BlockCollapsible>\n    )\n  }\n\n  return Block\n}\n"],"mappings":"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","ignoreList":[]}