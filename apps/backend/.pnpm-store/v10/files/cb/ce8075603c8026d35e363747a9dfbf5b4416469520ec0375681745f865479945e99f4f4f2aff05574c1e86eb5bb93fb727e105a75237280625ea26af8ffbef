{"version":3,"file":"index.js","names":["React","createContext","use","useCallback","useEffect","useMemo","useRef","useState","RootConfigContext","undefined","sanitizeClientConfig","unSanitizedConfig","blocks","length","blocksMap","sanitizedConfig","block","slug","ConfigProvider","children","config","configFromProps","setConfig","isFirstRenderRef","current","collectionsBySlug","globalsBySlug","collection","collections","global","globals","getEntityConfig","args","collectionSlug","globalSlug","value","_jsx","useConfig"],"sources":["../../../src/providers/Config/index.tsx"],"sourcesContent":["/* eslint-disable perfectionist/sort-object-types  */ // Need to disable this rule because the order of the overloads is important\n'use client'\nimport type {\n  ClientCollectionConfig,\n  ClientConfig,\n  ClientGlobalConfig,\n  CollectionSlug,\n  GlobalSlug,\n  UnsanitizedClientConfig,\n} from 'payload'\n\nimport React, { createContext, use, useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\ntype GetEntityConfigFn = {\n  // Overload #1: collectionSlug only\n  // @todo remove \"{} |\" in 4.0, which would be a breaking change\n  (args: { collectionSlug: {} | CollectionSlug; globalSlug?: never }): ClientCollectionConfig\n\n  // Overload #2: globalSlug only\n  // @todo remove \"{} |\" in 4.0, which would be a breaking change\n  (args: { collectionSlug?: never; globalSlug: {} | GlobalSlug }): ClientGlobalConfig\n\n  // Overload #3: both/none (fall back to union | null)\n  (args: {\n    collectionSlug?: {} | CollectionSlug\n    globalSlug?: {} | GlobalSlug\n  }): ClientCollectionConfig | ClientGlobalConfig | null\n}\n\nexport type ClientConfigContext = {\n  config: ClientConfig\n  /**\n   * Get a collection or global config by its slug. This is preferred over\n   * using `config.collections.find` or `config.globals.find`, because\n   * getEntityConfig uses a lookup map for O(1) lookups.\n   */\n  getEntityConfig: GetEntityConfigFn\n  setConfig: (config: ClientConfig) => void\n}\n\nconst RootConfigContext = createContext<ClientConfigContext | undefined>(undefined)\n\nfunction sanitizeClientConfig(\n  unSanitizedConfig: ClientConfig | UnsanitizedClientConfig,\n): ClientConfig {\n  if (!unSanitizedConfig?.blocks?.length || (unSanitizedConfig as ClientConfig).blocksMap) {\n    ;(unSanitizedConfig as ClientConfig).blocksMap = {}\n    return unSanitizedConfig as ClientConfig\n  }\n  const sanitizedConfig: ClientConfig = { ...unSanitizedConfig } as ClientConfig\n\n  sanitizedConfig.blocksMap = {}\n\n  for (const block of unSanitizedConfig.blocks) {\n    sanitizedConfig.blocksMap[block.slug] = block\n  }\n\n  return sanitizedConfig\n}\n\nexport const ConfigProvider: React.FC<{\n  readonly children: React.ReactNode\n  readonly config: ClientConfig | UnsanitizedClientConfig\n}> = ({ children, config: configFromProps }) => {\n  const [config, setConfig] = useState<ClientConfig>(() => sanitizeClientConfig(configFromProps))\n\n  const isFirstRenderRef = useRef(true)\n\n  // Need to update local config state if config from props changes, for HMR.\n  // That way, config changes will be updated in the UI immediately without needing a refresh.\n  useEffect(() => {\n    if (isFirstRenderRef.current) {\n      isFirstRenderRef.current = false\n      return\n    }\n    setConfig(sanitizeClientConfig(configFromProps))\n  }, [configFromProps])\n\n  // Build lookup maps for collections and globals so we can do O(1) lookups by slug\n  const { collectionsBySlug, globalsBySlug } = useMemo(() => {\n    const collectionsBySlug: Record<string, ClientCollectionConfig> = {}\n    const globalsBySlug: Record<string, ClientGlobalConfig> = {}\n\n    for (const collection of config.collections) {\n      collectionsBySlug[collection.slug] = collection\n    }\n    for (const global of config.globals) {\n      globalsBySlug[global.slug] = global\n    }\n\n    return { collectionsBySlug, globalsBySlug }\n  }, [config])\n\n  const getEntityConfig = useCallback<GetEntityConfigFn>(\n    (args) => {\n      if ('collectionSlug' in args) {\n        return collectionsBySlug[args.collectionSlug] ?? null\n      }\n      if ('globalSlug' in args) {\n        return globalsBySlug[args.globalSlug] ?? null\n      }\n      return null as any\n    },\n    [collectionsBySlug, globalsBySlug],\n  )\n\n  const value = useMemo(() => ({ config, getEntityConfig, setConfig }), [config, getEntityConfig])\n\n  return <RootConfigContext value={value}>{children}</RootConfigContext>\n}\n\nexport const useConfig = (): ClientConfigContext => use(RootConfigContext)\n"],"mappings":"AAAA,sDAAsD;AACtD;;;AAUA,OAAOA,KAAA,IAASC,aAAa,EAAEC,GAAG,EAAEC,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ;AA6B7F,MAAMC,iBAAA,gBAAoBP,aAAA,CAA+CQ,SAAA;AAEzE,SAASC,qBACPC,iBAAyD;EAEzD,IAAI,CAACA,iBAAA,EAAmBC,MAAA,EAAQC,MAAA,IAAUF,iBAAC,CAAmCG,SAAS,EAAE;;IACrFH,iBAAA,CAAmCG,SAAS,GAAG,CAAC;IAClD,OAAOH,iBAAA;EACT;EACA,MAAMI,eAAA,GAAgC;IAAE,GAAGJ;EAAkB;EAE7DI,eAAA,CAAgBD,SAAS,GAAG,CAAC;EAE7B,KAAK,MAAME,KAAA,IAASL,iBAAA,CAAkBC,MAAM,EAAE;IAC5CG,eAAA,CAAgBD,SAAS,CAACE,KAAA,CAAMC,IAAI,CAAC,GAAGD,KAAA;EAC1C;EAEA,OAAOD,eAAA;AACT;AAEA,OAAO,MAAMG,cAAA,GAGRA,CAAC;EAAEC,QAAQ;EAAEC,MAAA,EAAQC;AAAe,CAAE;EACzC,MAAM,CAACD,MAAA,EAAQE,SAAA,CAAU,GAAGf,QAAA,CAAuB,MAAMG,oBAAA,CAAqBW,eAAA;EAE9E,MAAME,gBAAA,GAAmBjB,MAAA,CAAO;EAEhC;EACA;EACAF,SAAA,CAAU;IACR,IAAImB,gBAAA,CAAiBC,OAAO,EAAE;MAC5BD,gBAAA,CAAiBC,OAAO,GAAG;MAC3B;IACF;IACAF,SAAA,CAAUZ,oBAAA,CAAqBW,eAAA;EACjC,GAAG,CAACA,eAAA,CAAgB;EAEpB;EACA,MAAM;IAAEI,iBAAiB,EAAjBA,mBAAiB;IAAEC,aAAa,EAAbA;EAAa,CAAE,GAAGrB,OAAA,CAAQ;IACnD,MAAMoB,iBAAA,GAA4D,CAAC;IACnE,MAAMC,aAAA,GAAoD,CAAC;IAE3D,KAAK,MAAMC,UAAA,IAAcP,MAAA,CAAOQ,WAAW,EAAE;MAC3CH,iBAAiB,CAACE,UAAA,CAAWV,IAAI,CAAC,GAAGU,UAAA;IACvC;IACA,KAAK,MAAME,MAAA,IAAUT,MAAA,CAAOU,OAAO,EAAE;MACnCJ,aAAa,CAACG,MAAA,CAAOZ,IAAI,CAAC,GAAGY,MAAA;IAC/B;IAEA,OAAO;MAAEJ,iBAAA;MAAmBC;IAAc;EAC5C,GAAG,CAACN,MAAA,CAAO;EAEX,MAAMW,eAAA,GAAkB5B,WAAA,CACrB6B,IAAA;IACC,IAAI,oBAAoBA,IAAA,EAAM;MAC5B,OAAOP,mBAAiB,CAACO,IAAA,CAAKC,cAAc,CAAC,IAAI;IACnD;IACA,IAAI,gBAAgBD,IAAA,EAAM;MACxB,OAAON,eAAa,CAACM,IAAA,CAAKE,UAAU,CAAC,IAAI;IAC3C;IACA,OAAO;EACT,GACA,CAACT,mBAAA,EAAmBC,eAAA,CAAc;EAGpC,MAAMS,KAAA,GAAQ9B,OAAA,CAAQ,OAAO;IAAEe,MAAA;IAAQW,eAAA;IAAiBT;EAAU,IAAI,CAACF,MAAA,EAAQW,eAAA,CAAgB;EAE/F,oBAAOK,IAAA,CAAC5B,iBAAA;IAAkB2B,KAAA,EAAOA,KAAA;cAAQhB;;AAC3C;AAEA,OAAO,MAAMkB,SAAA,GAAYA,CAAA,KAA2BnC,GAAA,CAAIM,iBAAA","ignoreList":[]}