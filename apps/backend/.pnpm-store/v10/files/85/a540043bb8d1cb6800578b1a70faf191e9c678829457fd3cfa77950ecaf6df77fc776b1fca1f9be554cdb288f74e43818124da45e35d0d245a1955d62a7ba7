{"version":3,"sources":["../../src/utilities/aggregatePaginate.ts"],"sourcesContent":["import type { CollationOptions } from 'mongodb'\nimport type { ClientSession, Model, PipelineStage } from 'mongoose'\nimport type { PaginatedDocs } from 'payload'\n\nimport type { MongooseAdapter } from '../index.js'\n\nexport const aggregatePaginate = async ({\n  adapter,\n  collation,\n  joinAggregation,\n  limit,\n  Model,\n  page,\n  pagination,\n  projection,\n  query,\n  session,\n  sort,\n  sortAggregation,\n  useEstimatedCount,\n}: {\n  adapter: MongooseAdapter\n  collation?: CollationOptions\n  joinAggregation?: PipelineStage[]\n  limit?: number\n  Model: Model<any>\n  page?: number\n  pagination?: boolean\n  projection?: Record<string, boolean>\n  query: Record<string, unknown>\n  session?: ClientSession\n  sort?: object\n  sortAggregation?: PipelineStage[]\n  useEstimatedCount?: boolean\n}): Promise<PaginatedDocs<any>> => {\n  const aggregation: PipelineStage[] = [{ $match: query }]\n\n  if (sortAggregation && sortAggregation.length > 0) {\n    for (const stage of sortAggregation) {\n      aggregation.push(stage)\n    }\n  }\n\n  if (sort) {\n    const $sort: Record<string, -1 | 1> = {}\n\n    Object.entries(sort).forEach(([key, value]) => {\n      $sort[key] = value === 'desc' ? -1 : 1\n    })\n\n    aggregation.push({ $sort })\n  }\n\n  if (page) {\n    aggregation.push({ $skip: (page - 1) * (limit ?? 0) })\n  }\n\n  if (limit) {\n    aggregation.push({ $limit: limit })\n  }\n\n  if (joinAggregation) {\n    for (const stage of joinAggregation) {\n      aggregation.push(stage)\n    }\n  }\n\n  if (projection) {\n    aggregation.push({ $project: projection })\n  }\n\n  let countPromise: Promise<null | number> = Promise.resolve(null)\n\n  if (pagination !== false && limit) {\n    if (useEstimatedCount) {\n      countPromise = Model.estimatedDocumentCount(query)\n    } else {\n      const hint = adapter.disableIndexHints !== true ? { _id: 1 } : undefined\n      countPromise = Model.countDocuments(query, { collation, hint, session })\n    }\n  }\n\n  const [docs, countResult] = await Promise.all([\n    Model.aggregate(aggregation, { collation, session }),\n    countPromise,\n  ])\n\n  const count = countResult === null ? docs.length : countResult\n\n  const totalPages =\n    pagination !== false && typeof limit === 'number' && limit !== 0 ? Math.ceil(count / limit) : 1\n\n  const hasPrevPage = typeof page === 'number' && pagination !== false && page > 1\n  const hasNextPage = typeof page === 'number' && pagination !== false && totalPages > page\n  const pagingCounter =\n    typeof page === 'number' && pagination !== false && typeof limit === 'number'\n      ? (page - 1) * limit + 1\n      : 1\n\n  const result: PaginatedDocs = {\n    docs,\n    hasNextPage,\n    hasPrevPage,\n    limit: limit ?? 0,\n    nextPage: hasNextPage ? page + 1 : null,\n    page,\n    pagingCounter,\n    prevPage: hasPrevPage ? page - 1 : null,\n    totalDocs: count,\n    totalPages,\n  }\n\n  return result\n}\n"],"names":["aggregatePaginate","adapter","collation","joinAggregation","limit","Model","page","pagination","projection","query","session","sort","sortAggregation","useEstimatedCount","aggregation","$match","length","stage","push","$sort","Object","entries","forEach","key","value","$skip","$limit","$project","countPromise","Promise","resolve","estimatedDocumentCount","hint","disableIndexHints","_id","undefined","countDocuments","docs","countResult","all","aggregate","count","totalPages","Math","ceil","hasPrevPage","hasNextPage","pagingCounter","result","nextPage","prevPage","totalDocs"],"mappings":"AAMA,OAAO,MAAMA,oBAAoB,OAAO,EACtCC,OAAO,EACPC,SAAS,EACTC,eAAe,EACfC,KAAK,EACLC,KAAK,EACLC,IAAI,EACJC,UAAU,EACVC,UAAU,EACVC,KAAK,EACLC,OAAO,EACPC,IAAI,EACJC,eAAe,EACfC,iBAAiB,EAelB;IACC,MAAMC,cAA+B;QAAC;YAAEC,QAAQN;QAAM;KAAE;IAExD,IAAIG,mBAAmBA,gBAAgBI,MAAM,GAAG,GAAG;QACjD,KAAK,MAAMC,SAASL,gBAAiB;YACnCE,YAAYI,IAAI,CAACD;QACnB;IACF;IAEA,IAAIN,MAAM;QACR,MAAMQ,QAAgC,CAAC;QAEvCC,OAAOC,OAAO,CAACV,MAAMW,OAAO,CAAC,CAAC,CAACC,KAAKC,MAAM;YACxCL,KAAK,CAACI,IAAI,GAAGC,UAAU,SAAS,CAAC,IAAI;QACvC;QAEAV,YAAYI,IAAI,CAAC;YAAEC;QAAM;IAC3B;IAEA,IAAIb,MAAM;QACRQ,YAAYI,IAAI,CAAC;YAAEO,OAAO,AAACnB,CAAAA,OAAO,CAAA,IAAMF,CAAAA,SAAS,CAAA;QAAG;IACtD;IAEA,IAAIA,OAAO;QACTU,YAAYI,IAAI,CAAC;YAAEQ,QAAQtB;QAAM;IACnC;IAEA,IAAID,iBAAiB;QACnB,KAAK,MAAMc,SAASd,gBAAiB;YACnCW,YAAYI,IAAI,CAACD;QACnB;IACF;IAEA,IAAIT,YAAY;QACdM,YAAYI,IAAI,CAAC;YAAES,UAAUnB;QAAW;IAC1C;IAEA,IAAIoB,eAAuCC,QAAQC,OAAO,CAAC;IAE3D,IAAIvB,eAAe,SAASH,OAAO;QACjC,IAAIS,mBAAmB;YACrBe,eAAevB,MAAM0B,sBAAsB,CAACtB;QAC9C,OAAO;YACL,MAAMuB,OAAO/B,QAAQgC,iBAAiB,KAAK,OAAO;gBAAEC,KAAK;YAAE,IAAIC;YAC/DP,eAAevB,MAAM+B,cAAc,CAAC3B,OAAO;gBAAEP;gBAAW8B;gBAAMtB;YAAQ;QACxE;IACF;IAEA,MAAM,CAAC2B,MAAMC,YAAY,GAAG,MAAMT,QAAQU,GAAG,CAAC;QAC5ClC,MAAMmC,SAAS,CAAC1B,aAAa;YAAEZ;YAAWQ;QAAQ;QAClDkB;KACD;IAED,MAAMa,QAAQH,gBAAgB,OAAOD,KAAKrB,MAAM,GAAGsB;IAEnD,MAAMI,aACJnC,eAAe,SAAS,OAAOH,UAAU,YAAYA,UAAU,IAAIuC,KAAKC,IAAI,CAACH,QAAQrC,SAAS;IAEhG,MAAMyC,cAAc,OAAOvC,SAAS,YAAYC,eAAe,SAASD,OAAO;IAC/E,MAAMwC,cAAc,OAAOxC,SAAS,YAAYC,eAAe,SAASmC,aAAapC;IACrF,MAAMyC,gBACJ,OAAOzC,SAAS,YAAYC,eAAe,SAAS,OAAOH,UAAU,WACjE,AAACE,CAAAA,OAAO,CAAA,IAAKF,QAAQ,IACrB;IAEN,MAAM4C,SAAwB;QAC5BX;QACAS;QACAD;QACAzC,OAAOA,SAAS;QAChB6C,UAAUH,cAAcxC,OAAO,IAAI;QACnCA;QACAyC;QACAG,UAAUL,cAAcvC,OAAO,IAAI;QACnC6C,WAAWV;QACXC;IACF;IAEA,OAAOM;AACT,EAAC"}