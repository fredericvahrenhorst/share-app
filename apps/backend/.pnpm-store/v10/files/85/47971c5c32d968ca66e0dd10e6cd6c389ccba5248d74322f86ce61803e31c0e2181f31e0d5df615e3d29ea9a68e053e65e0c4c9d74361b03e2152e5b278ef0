{"version":3,"file":"index.js","names":["c","_c","getTranslation","React","Fragment","useCallback","Banner","Button","DraggableSortableItem","DraggableSortable","DrawerToggler","useDrawerSlug","ErrorPill","RenderCustomComponent","useForm","useFormSubmitted","extractRowsAndCollapsedIDs","toggleAllRows","NullifyLocaleField","useField","withCondition","useConfig","useDocumentInfo","useLocale","useTranslation","scrollToID","FieldDescription","FieldError","FieldLabel","fieldBaseClass","BlockRow","BlocksDrawer","baseClass","BlocksFieldComponent","props","$","i18n","t","field","t0","path","pathFromProps","permissions","readOnly","schemaPath","schemaPathFromProps","validate","name","admin","t1","blockReferences","blocks","label","labels","labelsFromProps","localized","maxRows","minRows","minRowsProp","required","t2","undefined","className","description","isSortable","t3","setDocFieldPreferences","addFieldRow","dispatchFields","moveFieldRow","removeFieldRow","setModified","code","locale","config","t4","localization","drawerSlug","submitted","plural","singular","t5","bb0","fallback","defaultLocale","editingDefaultLocale","t6","value","options","memoizedValidate","t7","hasRows","potentiallyStalePath","customComponents","t8","disabled","errorPaths","rows","t9","showError","valid","value_0","t10","AfterInput","BeforeInput","Description","Error","Label","t11","t12","rowIndex","blockType","setTimeout","addRow","t13","rowIndex_0","type","duplicateRow","t14","rowIndex_1","removeRow","t15","moveFromIndex","moveToIndex","moveRow","t16","collapsed","collapsedIDs","updatedRows","toggleCollapseAll","t17","rowID","collapsed_0","collapsedIDs_0","updatedRows_0","setCollapse","hasMaxRows","length","fieldErrorCount","fieldHasErrors","showMinRows","showRequired","t18","t19","filter","Boolean","t20","_jsx","CustomComponent","Fallback","t21","count","withMessage","_jsxs","join","id","replace","children","onClick","fieldValue","ids","map","_temp","onDragEnd","t22","moveFromIndex_0","moveToIndex_0","row_0","i","blockType_0","isLoading","row","blockConfig","blocksMap","find","block","slug","rowPath","rowErrorCount","errorPath","startsWith","draggableSortableItemProps","errorCount","fields","RowLabel","parentPath","rowCount","buttonStyle","el","icon","iconPosition","iconStyle","addRowIndex","BlocksField"],"sources":["../../../src/fields/Blocks/index.tsx"],"sourcesContent":["'use client'\nimport type { BlocksFieldClientComponent, ClientBlock } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport React, { Fragment, useCallback } from 'react'\n\nimport { Banner } from '../../elements/Banner/index.js'\nimport { Button } from '../../elements/Button/index.js'\nimport { DraggableSortableItem } from '../../elements/DraggableSortable/DraggableSortableItem/index.js'\nimport { DraggableSortable } from '../../elements/DraggableSortable/index.js'\nimport { DrawerToggler } from '../../elements/Drawer/index.js'\nimport { useDrawerSlug } from '../../elements/Drawer/useDrawerSlug.js'\nimport { ErrorPill } from '../../elements/ErrorPill/index.js'\nimport { RenderCustomComponent } from '../../elements/RenderCustomComponent/index.js'\nimport { useForm, useFormSubmitted } from '../../forms/Form/context.js'\nimport { extractRowsAndCollapsedIDs, toggleAllRows } from '../../forms/Form/rowHelpers.js'\nimport { NullifyLocaleField } from '../../forms/NullifyField/index.js'\nimport { useField } from '../../forms/useField/index.js'\nimport { withCondition } from '../../forms/withCondition/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { scrollToID } from '../../utilities/scrollToID.js'\nimport { FieldDescription } from '../FieldDescription/index.js'\nimport { FieldError } from '../FieldError/index.js'\nimport { FieldLabel } from '../FieldLabel/index.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport { BlockRow } from './BlockRow.js'\nimport { BlocksDrawer } from './BlocksDrawer/index.js'\nimport './index.scss'\n\nconst baseClass = 'blocks-field'\n\nconst BlocksFieldComponent: BlocksFieldClientComponent = (props) => {\n  const { i18n, t } = useTranslation()\n\n  const {\n    field: {\n      name,\n      admin: { className, description, isSortable = true } = {},\n      blockReferences,\n      blocks,\n      label,\n      labels: labelsFromProps,\n      localized,\n      maxRows,\n      minRows: minRowsProp,\n      required,\n    },\n    path: pathFromProps,\n    permissions,\n    readOnly,\n    schemaPath: schemaPathFromProps,\n    validate,\n  } = props\n\n  const schemaPath = schemaPathFromProps ?? name\n\n  const minRows = (minRowsProp ?? required) ? 1 : 0\n\n  const { setDocFieldPreferences } = useDocumentInfo()\n  const { addFieldRow, dispatchFields, moveFieldRow, removeFieldRow, setModified } = useForm()\n  const { code: locale } = useLocale()\n  const {\n    config: { localization },\n    config,\n  } = useConfig()\n  const drawerSlug = useDrawerSlug('blocks-drawer')\n  const submitted = useFormSubmitted()\n\n  const labels = {\n    plural: t('fields:blocks'),\n    singular: t('fields:block'),\n    ...labelsFromProps,\n  }\n\n  const editingDefaultLocale = (() => {\n    if (localization && localization.fallback) {\n      const defaultLocale = localization.defaultLocale\n      return locale === defaultLocale\n    }\n\n    return true\n  })()\n\n  const memoizedValidate = useCallback(\n    (value, options) => {\n      // alternative locales can be null\n      if (!editingDefaultLocale && value === null) {\n        return true\n      }\n      if (typeof validate === 'function') {\n        return validate(value, { ...options, maxRows, minRows, required })\n      }\n    },\n    [maxRows, minRows, required, validate, editingDefaultLocale],\n  )\n\n  const {\n    customComponents: { AfterInput, BeforeInput, Description, Error, Label } = {},\n    disabled,\n    errorPaths,\n    path,\n    rows = [],\n    showError,\n    valid,\n    value,\n  } = useField<number>({\n    hasRows: true,\n    potentiallyStalePath: pathFromProps,\n    validate: memoizedValidate,\n  })\n\n  const addRow = useCallback(\n    (rowIndex: number, blockType: string) => {\n      addFieldRow({\n        blockType,\n        path,\n        rowIndex,\n        schemaPath,\n      })\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex + 1}`)\n      }, 0)\n    },\n    [addFieldRow, path, schemaPath],\n  )\n\n  const duplicateRow = useCallback(\n    (rowIndex: number) => {\n      dispatchFields({ type: 'DUPLICATE_ROW', path, rowIndex })\n      setModified(true)\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex + 1}`)\n      }, 0)\n    },\n    [dispatchFields, path, setModified],\n  )\n\n  const removeRow = useCallback(\n    (rowIndex: number) => {\n      removeFieldRow({\n        path,\n        rowIndex,\n      })\n    },\n    [path, removeFieldRow],\n  )\n\n  const moveRow = useCallback(\n    (moveFromIndex: number, moveToIndex: number) => {\n      moveFieldRow({ moveFromIndex, moveToIndex, path })\n    },\n    [moveFieldRow, path],\n  )\n\n  const toggleCollapseAll = useCallback(\n    (collapsed: boolean) => {\n      const { collapsedIDs, updatedRows } = toggleAllRows({\n        collapsed,\n        rows,\n      })\n\n      dispatchFields({ type: 'SET_ALL_ROWS_COLLAPSED', path, updatedRows })\n      setDocFieldPreferences(path, { collapsed: collapsedIDs })\n    },\n    [dispatchFields, path, rows, setDocFieldPreferences],\n  )\n\n  const setCollapse = useCallback(\n    (rowID: string, collapsed: boolean) => {\n      const { collapsedIDs, updatedRows } = extractRowsAndCollapsedIDs({\n        collapsed,\n        rowID,\n        rows,\n      })\n\n      dispatchFields({ type: 'SET_ROW_COLLAPSED', path, updatedRows })\n      setDocFieldPreferences(path, { collapsed: collapsedIDs })\n    },\n    [dispatchFields, path, rows, setDocFieldPreferences],\n  )\n\n  const hasMaxRows = maxRows && rows.length >= maxRows\n\n  const fieldErrorCount = errorPaths.length\n  const fieldHasErrors = submitted && fieldErrorCount + (valid ? 0 : 1) > 0\n\n  const showMinRows = rows.length < minRows || (required && rows.length === 0)\n  const showRequired = readOnly && rows.length === 0\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        baseClass,\n        className,\n        fieldHasErrors ? `${baseClass}--has-error` : `${baseClass}--has-no-error`,\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      id={`field-${path?.replace(/\\./g, '__')}`}\n    >\n      {showError && (\n        <RenderCustomComponent\n          CustomComponent={Error}\n          Fallback={<FieldError path={path} showError={showError} />}\n        />\n      )}\n      <header className={`${baseClass}__header`}>\n        <div className={`${baseClass}__header-wrap`}>\n          <div className={`${baseClass}__heading-with-error`}>\n            <h3>\n              <RenderCustomComponent\n                CustomComponent={Label}\n                Fallback={\n                  <FieldLabel label={label} localized={localized} path={path} required={required} />\n                }\n              />\n            </h3>\n            {fieldHasErrors && fieldErrorCount > 0 && (\n              <ErrorPill count={fieldErrorCount} i18n={i18n} withMessage />\n            )}\n          </div>\n          {rows.length > 0 && (\n            <ul className={`${baseClass}__header-actions`}>\n              <li>\n                <button\n                  className={`${baseClass}__header-action`}\n                  onClick={() => toggleCollapseAll(true)}\n                  type=\"button\"\n                >\n                  {t('fields:collapseAll')}\n                </button>\n              </li>\n              <li>\n                <button\n                  className={`${baseClass}__header-action`}\n                  onClick={() => toggleCollapseAll(false)}\n                  type=\"button\"\n                >\n                  {t('fields:showAll')}\n                </button>\n              </li>\n            </ul>\n          )}\n        </div>\n        <RenderCustomComponent\n          CustomComponent={Description}\n          Fallback={<FieldDescription description={description} path={path} />}\n        />\n      </header>\n      {BeforeInput}\n      <NullifyLocaleField fieldValue={value} localized={localized} path={path} />\n      {(rows.length > 0 || (!valid && (showRequired || showMinRows))) && (\n        <DraggableSortable\n          className={`${baseClass}__rows`}\n          ids={rows.map((row) => row.id)}\n          onDragEnd={({ moveFromIndex, moveToIndex }) => moveRow(moveFromIndex, moveToIndex)}\n        >\n          {rows.map((row, i) => {\n            const { blockType, isLoading } = row\n            const blockConfig: ClientBlock =\n              config.blocksMap[blockType] ??\n              ((blockReferences ?? blocks).find(\n                (block) => typeof block !== 'string' && block.slug === blockType,\n              ) as ClientBlock)\n\n            if (blockConfig) {\n              const rowPath = `${path}.${i}`\n\n              const rowErrorCount = errorPaths.filter((errorPath) =>\n                errorPath.startsWith(rowPath + '.'),\n              ).length\n\n              return (\n                <DraggableSortableItem\n                  disabled={readOnly || disabled || !isSortable}\n                  id={row.id}\n                  key={row.id}\n                >\n                  {(draggableSortableItemProps) => (\n                    <BlockRow\n                      {...draggableSortableItemProps}\n                      addRow={addRow}\n                      block={blockConfig}\n                      blocks={blockReferences ?? blocks}\n                      duplicateRow={duplicateRow}\n                      errorCount={rowErrorCount}\n                      fields={blockConfig.fields}\n                      hasMaxRows={hasMaxRows}\n                      isLoading={isLoading}\n                      isSortable={isSortable}\n                      Label={rows?.[i]?.customComponents?.RowLabel}\n                      labels={labels}\n                      moveRow={moveRow}\n                      parentPath={path}\n                      path={rowPath}\n                      permissions={permissions}\n                      readOnly={readOnly || disabled}\n                      removeRow={removeRow}\n                      row={row}\n                      rowCount={rows.length}\n                      rowIndex={i}\n                      schemaPath={schemaPath + blockConfig.slug}\n                      setCollapse={setCollapse}\n                    />\n                  )}\n                </DraggableSortableItem>\n              )\n            }\n\n            return null\n          })}\n          {!editingDefaultLocale && (\n            <React.Fragment>\n              {showMinRows && (\n                <Banner type=\"error\">\n                  {t('validation:requiresAtLeast', {\n                    count: minRows,\n                    label:\n                      getTranslation(minRows > 1 ? labels.plural : labels.singular, i18n) ||\n                      t(minRows > 1 ? 'general:row' : 'general:rows'),\n                  })}\n                </Banner>\n              )}\n              {showRequired && (\n                <Banner>\n                  {t('validation:fieldHasNo', { label: getTranslation(labels.plural, i18n) })}\n                </Banner>\n              )}\n            </React.Fragment>\n          )}\n        </DraggableSortable>\n      )}\n      {!hasMaxRows && (\n        <Fragment>\n          <DrawerToggler\n            className={`${baseClass}__drawer-toggler`}\n            disabled={readOnly || disabled}\n            slug={drawerSlug}\n          >\n            <Button\n              buttonStyle=\"icon-label\"\n              disabled={readOnly || disabled}\n              el=\"span\"\n              icon=\"plus\"\n              iconPosition=\"left\"\n              iconStyle=\"with-border\"\n            >\n              {t('fields:addLabel', { label: getTranslation(labels.singular, i18n) })}\n            </Button>\n          </DrawerToggler>\n          <BlocksDrawer\n            addRow={addRow}\n            addRowIndex={rows?.length || 0}\n            blocks={blockReferences ?? blocks}\n            drawerSlug={drawerSlug}\n            labels={labels}\n          />\n        </Fragment>\n      )}\n      {AfterInput}\n    </div>\n  )\n}\n\nexport const BlocksField = withCondition(BlocksFieldComponent)\n"],"mappings":"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","ignoreList":[]}