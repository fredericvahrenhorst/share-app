{"version":3,"file":"index.js","names":["c","_c","getTranslation","useConfig","useTranslation","fieldIsArrayType","fieldIsBlockType","React","useSelectedLocales","DiffCollapser","RenderVersionFieldsToDiff","getFieldsForRowComparison","baseClass","Iterable","t0","$","baseVersionField","comparisonValue","valueFrom","field","locale","parentIsLocalized","versionValue","valueTo","i18n","selectedLocales","config","versionRowCount","Array","isArray","length","comparisonRowCount","maxRows","Math","max","Error","type","t1","label","_jsxs","children","_jsx","className","t2","isIterable","Label","from","keys","map","row","i","versionRow","comparisonRow","fields","versionFields","rowNumber","String","padStart","rowLabel","hideGutter","localized","t","labels","plural"],"sources":["../../../../../../src/views/Version/RenderFieldsToDiff/fields/Iterable/index.tsx"],"sourcesContent":["'use client'\n\nimport type { FieldDiffClientProps } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { useConfig, useTranslation } from '@payloadcms/ui'\n\nimport './index.scss'\n\nimport { fieldIsArrayType, fieldIsBlockType } from 'payload/shared'\nimport React from 'react'\n\nimport { useSelectedLocales } from '../../../Default/SelectedLocalesContext.js'\nimport { DiffCollapser } from '../../DiffCollapser/index.js'\nimport { RenderVersionFieldsToDiff } from '../../RenderVersionFieldsToDiff.js'\nimport { getFieldsForRowComparison } from '../../utilities/getFieldsForRowComparison.js'\n\nconst baseClass = 'iterable-diff'\n\nexport const Iterable: React.FC<FieldDiffClientProps> = ({\n  baseVersionField,\n  comparisonValue: valueFrom,\n  field,\n  locale,\n  parentIsLocalized,\n  versionValue: valueTo,\n}) => {\n  const { i18n } = useTranslation()\n  const { selectedLocales } = useSelectedLocales()\n  const { config } = useConfig()\n\n  const versionRowCount = Array.isArray(valueTo) ? valueTo.length : 0\n  const comparisonRowCount = Array.isArray(valueFrom) ? valueFrom.length : 0\n  const maxRows = Math.max(versionRowCount, comparisonRowCount)\n\n  if (!fieldIsArrayType(field) && !fieldIsBlockType(field)) {\n    throw new Error(`Expected field to be an array or blocks type but got: ${field.type}`)\n  }\n\n  return (\n    <div className={baseClass}>\n      <DiffCollapser\n        field={field}\n        isIterable\n        Label={\n          'label' in field &&\n          field.label &&\n          typeof field.label !== 'function' && (\n            <span>\n              {locale && <span className={`${baseClass}__locale-label`}>{locale}</span>}\n              {getTranslation(field.label, i18n)}\n            </span>\n          )\n        }\n        locales={selectedLocales}\n        parentIsLocalized={parentIsLocalized}\n        valueFrom={valueFrom}\n        valueTo={valueTo}\n      >\n        {maxRows > 0 && (\n          <div className={`${baseClass}__rows`}>\n            {Array.from(Array(maxRows).keys()).map((row, i) => {\n              const versionRow = valueTo?.[i] || {}\n              const comparisonRow = valueFrom?.[i] || {}\n\n              const { fields, versionFields } = getFieldsForRowComparison({\n                baseVersionField,\n                comparisonRow,\n                config,\n                field,\n                row: i,\n                versionRow,\n              })\n\n              const rowNumber = String(i + 1).padStart(2, '0')\n              const rowLabel = fieldIsArrayType(field) ? `Item ${rowNumber}` : `Block ${rowNumber}`\n\n              return (\n                <div className={`${baseClass}__row`} key={i}>\n                  <DiffCollapser\n                    fields={fields}\n                    hideGutter={true}\n                    Label={\n                      <div className={`${baseClass}-label-container`}>\n                        <div className={`${baseClass}-label-prefix`}></div>\n                        <span className={`${baseClass}__label`}>{rowLabel}</span>\n                      </div>\n                    }\n                    locales={selectedLocales}\n                    parentIsLocalized={parentIsLocalized || field.localized}\n                    valueFrom={comparisonRow}\n                    valueTo={versionRow}\n                  >\n                    <RenderVersionFieldsToDiff versionFields={versionFields} />\n                  </DiffCollapser>\n                </div>\n              )\n            })}\n          </div>\n        )}\n        {maxRows === 0 && (\n          <div className={`${baseClass}__no-rows`}>\n            {i18n.t('version:noRowsFound', {\n              label:\n                'labels' in field && field.labels?.plural\n                  ? getTranslation(field.labels.plural, i18n)\n                  : i18n.t('general:rows'),\n            })}\n          </div>\n        )}\n      </DiffCollapser>\n    </div>\n  )\n}\n"],"mappings":"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","ignoreList":[]}