{"version":3,"sources":["../src/init.ts"],"sourcesContent":["import type { PaginateOptions } from 'mongoose'\nimport type { Init, SanitizedCollectionConfig } from 'payload'\n\nimport mongoose from 'mongoose'\nimport paginate from 'mongoose-paginate-v2'\nimport {\n  buildVersionCollectionFields,\n  buildVersionCompoundIndexes,\n  buildVersionGlobalFields,\n} from 'payload'\n\nimport type { MongooseAdapter } from './index.js'\nimport type { CollectionModel, GlobalModel } from './types.js'\n\nimport { buildCollectionSchema } from './models/buildCollectionSchema.js'\nimport { buildGlobalModel } from './models/buildGlobalModel.js'\nimport { buildSchema } from './models/buildSchema.js'\nimport { getBuildQueryPlugin } from './queries/getBuildQueryPlugin.js'\nimport { getDBName } from './utilities/getDBName.js'\n\nexport const init: Init = function init(this: MongooseAdapter) {\n  this.payload.config.collections.forEach((collection: SanitizedCollectionConfig) => {\n    const schemaOptions = this.collectionsSchemaOptions?.[collection.slug]\n\n    const schema = buildCollectionSchema(collection, this.payload, schemaOptions)\n\n    if (collection.versions) {\n      const versionModelName = getDBName({ config: collection, versions: true })\n\n      const versionCollectionFields = buildVersionCollectionFields(this.payload.config, collection)\n\n      const versionSchema = buildSchema({\n        buildSchemaOptions: {\n          disableUnique: true,\n          draftsEnabled: true,\n          indexSortableFields: this.payload.config.indexSortableFields,\n          options: {\n            minimize: false,\n            timestamps: false,\n            ...schemaOptions,\n          },\n        },\n        compoundIndexes: buildVersionCompoundIndexes({ indexes: collection.sanitizedIndexes }),\n        configFields: versionCollectionFields,\n        payload: this.payload,\n      })\n\n      versionSchema.plugin<any, PaginateOptions>(paginate, { useEstimatedCount: true }).plugin(\n        getBuildQueryPlugin({\n          collectionSlug: collection.slug,\n          versionsFields: buildVersionCollectionFields(this.payload.config, collection, true),\n        }),\n      )\n\n      const versionCollectionName =\n        this.autoPluralization === true && !collection.dbName ? undefined : versionModelName\n\n      this.versions[collection.slug] = mongoose.model(\n        versionModelName,\n        versionSchema,\n        versionCollectionName,\n      ) as unknown as CollectionModel\n    }\n\n    const modelName = getDBName({ config: collection })\n    const collectionName =\n      this.autoPluralization === true && !collection.dbName ? undefined : modelName\n\n    this.collections[collection.slug] = mongoose.model<any>(\n      modelName,\n      schema,\n      collectionName,\n    ) as CollectionModel\n  })\n\n  this.globals = buildGlobalModel(this.payload) as GlobalModel\n\n  this.payload.config.globals.forEach((global) => {\n    if (global.versions) {\n      const versionModelName = getDBName({ config: global, versions: true })\n\n      const versionGlobalFields = buildVersionGlobalFields(this.payload.config, global)\n\n      const versionSchema = buildSchema({\n        buildSchemaOptions: {\n          disableUnique: true,\n          draftsEnabled: true,\n          indexSortableFields: this.payload.config.indexSortableFields,\n          options: {\n            minimize: false,\n            timestamps: false,\n          },\n        },\n        configFields: versionGlobalFields,\n        payload: this.payload,\n      })\n\n      versionSchema.plugin<any, PaginateOptions>(paginate, { useEstimatedCount: true }).plugin(\n        getBuildQueryPlugin({\n          versionsFields: buildVersionGlobalFields(this.payload.config, global, true),\n        }),\n      )\n\n      this.versions[global.slug] = mongoose.model<any>(\n        versionModelName,\n        versionSchema,\n        versionModelName,\n      ) as CollectionModel\n    }\n  })\n}\n"],"names":["mongoose","paginate","buildVersionCollectionFields","buildVersionCompoundIndexes","buildVersionGlobalFields","buildCollectionSchema","buildGlobalModel","buildSchema","getBuildQueryPlugin","getDBName","init","payload","config","collections","forEach","collection","schemaOptions","collectionsSchemaOptions","slug","schema","versions","versionModelName","versionCollectionFields","versionSchema","buildSchemaOptions","disableUnique","draftsEnabled","indexSortableFields","options","minimize","timestamps","compoundIndexes","indexes","sanitizedIndexes","configFields","plugin","useEstimatedCount","collectionSlug","versionsFields","versionCollectionName","autoPluralization","dbName","undefined","model","modelName","collectionName","globals","global","versionGlobalFields"],"mappings":"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"}