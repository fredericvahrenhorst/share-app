{"version":3,"file":"rscEntry.js","names":["getTranslation","renderField","React","RichTextField","buildInitialState","initLexicalFeatures","RscEntryLexicalField","args","field","path","clientField","name","schemaPath","Error","clientFeatures","featureClientImportMap","featureClientSchemaMap","clientFieldSchemaMap","fieldSchemaMap","i18n","payload","sanitizedEditorConfig","initialLexicalFormState","siblingData","root","children","length","context","id","collectionSlug","documentData","data","lexicalFieldSchemaPath","operation","permissions","preferences","renderFieldFn","req","nodeData","placeholderFromArgs","admin","placeholder","undefined","hideGutter","hideInsertParagraphAtEnd","props","forceRender","lexicalEditorConfig","lexical","readOnly","renderedBlocks","Object","keys","key","_jsx"],"sources":["../../src/field/rscEntry.tsx"],"sourcesContent":["import type { SerializedLexicalNode } from 'lexical'\nimport type {\n  ClientComponentProps,\n  FieldPaths,\n  RichTextFieldClient,\n  RichTextField as RichTextFieldType,\n  ServerComponentProps,\n} from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { renderField } from '@payloadcms/ui/forms/renderField'\nimport React from 'react'\n\nimport type { SanitizedServerEditorConfig } from '../lexical/config/types.js'\nimport type {\n  LexicalFieldAdminClientProps,\n  LexicalFieldAdminProps,\n  LexicalRichTextFieldProps,\n} from '../types.js'\n\n// eslint-disable-next-line payload/no-imports-from-exports-dir\nimport { RichTextField } from '../exports/client/index.js'\nimport { buildInitialState } from '../utilities/buildInitialState.js'\nimport { initLexicalFeatures } from '../utilities/initLexicalFeatures.js'\n\nexport const RscEntryLexicalField: React.FC<\n  {\n    admin: LexicalFieldAdminProps\n    sanitizedEditorConfig: SanitizedServerEditorConfig\n  } & ClientComponentProps &\n    Pick<FieldPaths, 'path'> &\n    ServerComponentProps\n> = async (args) => {\n  const field: RichTextFieldType = args.field as RichTextFieldType\n  const path = args.path ?? (args.clientField as RichTextFieldClient).name\n  const schemaPath = args.schemaPath ?? path\n\n  if (!(args?.clientField as RichTextFieldClient)?.name) {\n    throw new Error('Initialized lexical RSC field without a field name')\n  }\n\n  const { clientFeatures, featureClientImportMap, featureClientSchemaMap } = initLexicalFeatures({\n    clientFieldSchemaMap: args.clientFieldSchemaMap,\n    fieldSchemaMap: args.fieldSchemaMap,\n    i18n: args.i18n,\n    path,\n    payload: args.payload,\n    sanitizedEditorConfig: args.sanitizedEditorConfig,\n    schemaPath,\n  })\n\n  let initialLexicalFormState = {}\n  if (args.siblingData?.[field.name]?.root?.children?.length) {\n    initialLexicalFormState = await buildInitialState({\n      context: {\n        id: args.id,\n        clientFieldSchemaMap: args.clientFieldSchemaMap,\n        collectionSlug: args.collectionSlug,\n        documentData: args.data,\n        field,\n        fieldSchemaMap: args.fieldSchemaMap,\n        lexicalFieldSchemaPath: schemaPath,\n        operation: args.operation,\n        permissions: args.permissions,\n        preferences: args.preferences,\n        renderFieldFn: renderField,\n        req: args.req,\n      },\n      nodeData: args.siblingData?.[field.name]?.root?.children as SerializedLexicalNode[],\n    })\n  }\n\n  const placeholderFromArgs = args.admin?.placeholder\n  const placeholder = placeholderFromArgs\n    ? getTranslation(placeholderFromArgs, args.i18n)\n    : undefined\n\n  const admin: LexicalFieldAdminClientProps = {}\n  if (placeholder) {\n    admin.placeholder = placeholder\n  }\n  if (args.admin?.hideGutter) {\n    admin.hideGutter = true\n  }\n  if (args.admin?.hideInsertParagraphAtEnd) {\n    admin.hideInsertParagraphAtEnd = true\n  }\n\n  const props: LexicalRichTextFieldProps = {\n    clientFeatures,\n    featureClientImportMap,\n    featureClientSchemaMap, // TODO: Does client need this? Why cant this just live in the server\n    field: args.clientField as RichTextFieldClient,\n    forceRender: args.forceRender,\n    initialLexicalFormState,\n    lexicalEditorConfig: args.sanitizedEditorConfig.lexical,\n    path,\n    permissions: args.permissions,\n    readOnly: args.readOnly,\n    renderedBlocks: args.renderedBlocks,\n    schemaPath,\n  }\n  if (Object.keys(admin).length) {\n    props.admin = admin\n  }\n\n  for (const key in props) {\n    if (props[key as keyof LexicalRichTextFieldProps] === undefined) {\n      delete props[key as keyof LexicalRichTextFieldProps]\n    }\n  }\n\n  return <RichTextField {...props} />\n}\n"],"mappings":"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","ignoreList":[]}