{"version":3,"sources":["../src/countGlobalVersions.ts"],"sourcesContent":["import type { CountOptions } from 'mongodb'\nimport type { CountGlobalVersions } from 'payload'\n\nimport { buildVersionGlobalFields, flattenWhereToOperators } from 'payload'\n\nimport type { MongooseAdapter } from './index.js'\n\nimport { buildQuery } from './queries/buildQuery.js'\nimport { getGlobal } from './utilities/getEntity.js'\nimport { getSession } from './utilities/getSession.js'\n\nexport const countGlobalVersions: CountGlobalVersions = async function countGlobalVersions(\n  this: MongooseAdapter,\n  { global: globalSlug, locale, req, where = {} },\n) {\n  const { globalConfig, Model } = getGlobal({ adapter: this, globalSlug, versions: true })\n\n  const options: CountOptions = {\n    session: await getSession(this, req),\n  }\n\n  let hasNearConstraint = false\n\n  if (where) {\n    const constraints = flattenWhereToOperators(where)\n    hasNearConstraint = constraints.some((prop) => Object.keys(prop).some((key) => key === 'near'))\n  }\n\n  const query = await buildQuery({\n    adapter: this,\n    fields: buildVersionGlobalFields(this.payload.config, globalConfig, true),\n    locale,\n    where,\n  })\n\n  // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.\n  const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0\n\n  if (!useEstimatedCount && Object.keys(query).length === 0 && this.disableIndexHints !== true) {\n    // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding\n    // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,\n    // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses\n    // the correct indexed field\n    options.hint = {\n      _id: 1,\n    }\n  }\n\n  let result: number\n  if (useEstimatedCount) {\n    result = await Model.estimatedDocumentCount({ session: options.session })\n  } else {\n    result = await Model.countDocuments(query, options)\n  }\n\n  return {\n    totalDocs: result,\n  }\n}\n"],"names":["buildVersionGlobalFields","flattenWhereToOperators","buildQuery","getGlobal","getSession","countGlobalVersions","global","globalSlug","locale","req","where","globalConfig","Model","adapter","versions","options","session","hasNearConstraint","constraints","some","prop","Object","keys","key","query","fields","payload","config","useEstimatedCount","length","disableIndexHints","hint","_id","result","estimatedDocumentCount","countDocuments","totalDocs"],"mappings":"AAGA,SAASA,wBAAwB,EAAEC,uBAAuB,QAAQ,UAAS;AAI3E,SAASC,UAAU,QAAQ,0BAAyB;AACpD,SAASC,SAAS,QAAQ,2BAA0B;AACpD,SAASC,UAAU,QAAQ,4BAA2B;AAEtD,OAAO,MAAMC,sBAA2C,eAAeA,oBAErE,EAAEC,QAAQC,UAAU,EAAEC,MAAM,EAAEC,GAAG,EAAEC,QAAQ,CAAC,CAAC,EAAE;IAE/C,MAAM,EAAEC,YAAY,EAAEC,KAAK,EAAE,GAAGT,UAAU;QAAEU,SAAS,IAAI;QAAEN;QAAYO,UAAU;IAAK;IAEtF,MAAMC,UAAwB;QAC5BC,SAAS,MAAMZ,WAAW,IAAI,EAAEK;IAClC;IAEA,IAAIQ,oBAAoB;IAExB,IAAIP,OAAO;QACT,MAAMQ,cAAcjB,wBAAwBS;QAC5CO,oBAAoBC,YAAYC,IAAI,CAAC,CAACC,OAASC,OAAOC,IAAI,CAACF,MAAMD,IAAI,CAAC,CAACI,MAAQA,QAAQ;IACzF;IAEA,MAAMC,QAAQ,MAAMtB,WAAW;QAC7BW,SAAS,IAAI;QACbY,QAAQzB,yBAAyB,IAAI,CAAC0B,OAAO,CAACC,MAAM,EAAEhB,cAAc;QACpEH;QACAE;IACF;IAEA,4HAA4H;IAC5H,MAAMkB,oBAAoBX,qBAAqB,CAACO,SAASH,OAAOC,IAAI,CAACE,OAAOK,MAAM,KAAK;IAEvF,IAAI,CAACD,qBAAqBP,OAAOC,IAAI,CAACE,OAAOK,MAAM,KAAK,KAAK,IAAI,CAACC,iBAAiB,KAAK,MAAM;QAC5F,mHAAmH;QACnH,qHAAqH;QACrH,mHAAmH;QACnH,4BAA4B;QAC5Bf,QAAQgB,IAAI,GAAG;YACbC,KAAK;QACP;IACF;IAEA,IAAIC;IACJ,IAAIL,mBAAmB;QACrBK,SAAS,MAAMrB,MAAMsB,sBAAsB,CAAC;YAAElB,SAASD,QAAQC,OAAO;QAAC;IACzE,OAAO;QACLiB,SAAS,MAAMrB,MAAMuB,cAAc,CAACX,OAAOT;IAC7C;IAEA,OAAO;QACLqB,WAAWH;IACb;AACF,EAAC"}