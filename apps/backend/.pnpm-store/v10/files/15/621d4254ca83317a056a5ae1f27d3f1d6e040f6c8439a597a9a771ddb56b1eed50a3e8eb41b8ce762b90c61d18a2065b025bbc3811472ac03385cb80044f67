'use client';

import { c as _c } from "react/compiler-runtime";
import { jsx as _jsx, jsxs as _jsxs } from "react/jsx-runtime";
import { useDroppable } from '@dnd-kit/core';
import React from 'react';
import { DocumentIcon } from '../../../icons/Document/index.js';
import { ThreeDotsIcon } from '../../../icons/ThreeDots/index.js';
import { useFolder } from '../../../providers/Folders/index.js';
import { Popup } from '../../Popup/index.js';
import { Thumbnail } from '../../Thumbnail/index.js';
import { ColoredFolderIcon } from '../ColoredFolderIcon/index.js';
import { DraggableWithClick } from '../DraggableWithClick/index.js';
import './index.scss';
const baseClass = 'folder-file-card';
export function FolderFileCard({
  id,
  type,
  className = '',
  disabled = false,
  isDeleting = false,
  isFocused = false,
  isSelected = false,
  itemKey,
  onClick,
  onKeyDown,
  PopupActions,
  previewUrl,
  selectedCount = 0,
  title
}) {
  const disableDrop = !id || disabled || type !== 'folder';
  const {
    isOver,
    setNodeRef
  } = useDroppable({
    id: itemKey,
    data: {
      id,
      type
    },
    disabled: disableDrop
  });
  const ref = React.useRef(null);
  React.useEffect(() => {
    const copyOfRef = ref.current;
    if (isFocused && ref.current) {
      ref.current.focus();
    } else if (!isFocused && ref.current) {
      ref.current.blur();
    }
    return () => {
      if (copyOfRef) {
        copyOfRef.blur();
      }
    };
  }, [isFocused]);
  return /*#__PURE__*/_jsxs("div", {
    className: [baseClass, className, isSelected && `${baseClass}--selected`, disabled && `${baseClass}--disabled`, isDeleting && `${baseClass}--deleting`, isFocused && `${baseClass}--focused`, isOver && `${baseClass}--over`, `${baseClass}--${type}`].filter(Boolean).join(' '),
    children: [!disabled && (onClick || onKeyDown) && /*#__PURE__*/_jsx(DraggableWithClick, {
      className: `${baseClass}__drag-handle`,
      id: itemKey,
      onClick: onClick,
      onKeyDown: onKeyDown,
      ref: ref
    }, itemKey), !disableDrop ? /*#__PURE__*/_jsx("div", {
      className: `${baseClass}__drop-area`,
      ref: setNodeRef
    }) : null, type === 'file' ? /*#__PURE__*/_jsx("div", {
      className: `${baseClass}__preview-area`,
      children: previewUrl ? /*#__PURE__*/_jsx(Thumbnail, {
        fileSrc: previewUrl
      }) : /*#__PURE__*/_jsx(DocumentIcon, {})
    }) : null, /*#__PURE__*/_jsxs("div", {
      className: `${baseClass}__titlebar-area`,
      children: [/*#__PURE__*/_jsx("div", {
        className: `${baseClass}__icon-wrap`,
        children: type === 'file' ? /*#__PURE__*/_jsx(DocumentIcon, {}) : /*#__PURE__*/_jsx(ColoredFolderIcon, {})
      }), /*#__PURE__*/_jsx("p", {
        className: `${baseClass}__name`,
        title: title,
        children: /*#__PURE__*/_jsx("span", {
          children: title
        })
      }), PopupActions ? /*#__PURE__*/_jsx(Popup, {
        button: /*#__PURE__*/_jsx(ThreeDotsIcon, {}),
        disabled: selectedCount > 1 || selectedCount === 1 && !isSelected,
        horizontalAlign: "right",
        size: "large",
        verticalAlign: "bottom",
        children: PopupActions
      }) : null]
    })]
  }, itemKey);
}
export function ContextFolderFileCard(t0) {
  const $ = _c(19);
  const {
    type,
    className,
    index,
    item
  } = t0;
  const {
    focusedRowIndex,
    isDragging,
    itemKeysToMove,
    onItemClick,
    onItemKeyPress,
    selectedItemKeys
  } = useFolder();
  let t1;
  if ($[0] !== className || $[1] !== focusedRowIndex || $[2] !== index || $[3] !== isDragging || $[4] !== item || $[5] !== itemKeysToMove || $[6] !== onItemClick || $[7] !== onItemKeyPress || $[8] !== selectedItemKeys || $[9] !== type) {
    const isSelected = selectedItemKeys.has(item.itemKey);
    let t2;
    if ($[11] !== index || $[12] !== item || $[13] !== onItemClick) {
      t2 = event => {
        onItemClick({
          event,
          index,
          item
        });
      };
      $[11] = index;
      $[12] = item;
      $[13] = onItemClick;
      $[14] = t2;
    } else {
      t2 = $[14];
    }
    let t3;
    if ($[15] !== index || $[16] !== item || $[17] !== onItemKeyPress) {
      t3 = event_0 => {
        onItemKeyPress({
          event: event_0,
          index,
          item
        });
      };
      $[15] = index;
      $[16] = item;
      $[17] = onItemKeyPress;
      $[18] = t3;
    } else {
      t3 = $[18];
    }
    t1 = _jsx(FolderFileCard, {
      className,
      disabled: isDragging && isSelected || itemKeysToMove.has(item.itemKey),
      id: item.value.id,
      isFocused: focusedRowIndex === index,
      isSelected,
      itemKey: item.itemKey,
      onClick: t2,
      onKeyDown: t3,
      previewUrl: item.value.url,
      title: item.value._folderOrDocumentTitle,
      type
    });
    $[0] = className;
    $[1] = focusedRowIndex;
    $[2] = index;
    $[3] = isDragging;
    $[4] = item;
    $[5] = itemKeysToMove;
    $[6] = onItemClick;
    $[7] = onItemKeyPress;
    $[8] = selectedItemKeys;
    $[9] = type;
    $[10] = t1;
  } else {
    t1 = $[10];
  }
  return t1;
}
//# sourceMappingURL=index.js.map