{"version":3,"file":"index.js","names":["useRouter","useSearchParams","isNumber","transformColumnsToSearchParams","qs","React","useCallback","useEffect","useMemo","useRef","useState","useListDrawerContext","useEffectEvent","useRouteTransition","parseSearchParams","ListQueryContext","ListQueryModifiedContext","useListQuery","ListQueryProvider","children","collectionSlug","columns","data","defaultLimit","defaultSort","listPreferences","modifySearchParams","onQueryChange","onQueryChangeFromProps","orderableFieldName","router","rawSearchParams","startRouteTransition","modified","setModified","searchParams","contextRef","current","currentQuery","setCurrentQuery","limit","String","sort","mergeQuery","newQuery","page","mergedQuery","preset","search","where","refineListData","incomingQuery","undefined","replace","stringify","JSON","addQueryPrefix","onChangeFn","handlePageChange","arg","handlePerPageChange","handleSearchChange","handleSortChange","handleWhereChange","syncQuery","shouldUpdateQueryString","window","history","replaceState","_jsx","value","query"],"sources":["../../../src/providers/ListQuery/index.tsx"],"sourcesContent":["'use client'\nimport { useRouter, useSearchParams } from 'next/navigation.js'\nimport { type ListQuery, type Where } from 'payload'\nimport { isNumber, transformColumnsToSearchParams } from 'payload/shared'\nimport * as qs from 'qs-esm'\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react'\n\nimport type { IListQueryContext, ListQueryProps } from './types.js'\n\nimport { useListDrawerContext } from '../../elements/ListDrawer/Provider.js'\nimport { useEffectEvent } from '../../hooks/useEffectEvent.js'\nimport { useRouteTransition } from '../../providers/RouteTransition/index.js'\nimport { parseSearchParams } from '../../utilities/parseSearchParams.js'\nimport { ListQueryContext, ListQueryModifiedContext } from './context.js'\n\nexport { useListQuery } from './context.js'\n\nexport const ListQueryProvider: React.FC<ListQueryProps> = ({\n  children,\n  collectionSlug,\n  columns,\n  data,\n  defaultLimit,\n  defaultSort,\n  listPreferences,\n  modifySearchParams,\n  onQueryChange: onQueryChangeFromProps,\n  orderableFieldName,\n}) => {\n  // TODO: Investigate if this is still needed\n  // eslint-disable-next-line react-compiler/react-compiler\n  'use no memo'\n  const router = useRouter()\n  const rawSearchParams = useSearchParams()\n  const { startRouteTransition } = useRouteTransition()\n  const [modified, setModified] = useState(false)\n\n  const searchParams = useMemo<ListQuery>(\n    () => parseSearchParams(rawSearchParams),\n    [rawSearchParams],\n  )\n\n  const contextRef = useRef({} as IListQueryContext)\n\n  contextRef.current.modified = modified\n\n  const { onQueryChange } = useListDrawerContext()\n\n  const [currentQuery, setCurrentQuery] = useState<ListQuery>(() => {\n    if (modifySearchParams) {\n      return searchParams\n    } else {\n      return {\n        limit: String(defaultLimit),\n        sort: defaultSort,\n      }\n    }\n  })\n\n  const mergeQuery = useCallback(\n    (newQuery: ListQuery = {}): ListQuery => {\n      let page = 'page' in newQuery ? newQuery.page : currentQuery?.page\n\n      if ('where' in newQuery || 'search' in newQuery) {\n        page = '1'\n      }\n\n      const mergedQuery: ListQuery = {\n        ...currentQuery,\n        ...newQuery,\n        columns: 'columns' in newQuery ? newQuery.columns : currentQuery.columns,\n        limit: 'limit' in newQuery ? newQuery.limit : (currentQuery?.limit ?? String(defaultLimit)),\n        page,\n        preset: 'preset' in newQuery ? newQuery.preset : currentQuery?.preset,\n        search: 'search' in newQuery ? newQuery.search : currentQuery?.search,\n        sort: 'sort' in newQuery ? newQuery.sort : ((currentQuery?.sort as string) ?? defaultSort),\n        where: 'where' in newQuery ? newQuery.where : currentQuery?.where,\n      }\n\n      return mergedQuery\n    },\n    [currentQuery, defaultLimit, defaultSort],\n  )\n\n  const refineListData = useCallback(\n    // eslint-disable-next-line @typescript-eslint/require-await\n    async (incomingQuery: ListQuery, modified?: boolean) => {\n      if (modified !== undefined) {\n        setModified(modified)\n      } else {\n        setModified(true)\n      }\n\n      const newQuery = mergeQuery(incomingQuery)\n\n      if (modifySearchParams) {\n        startRouteTransition(() =>\n          router.replace(\n            `${qs.stringify({ ...newQuery, columns: JSON.stringify(newQuery.columns) }, { addQueryPrefix: true })}`,\n          ),\n        )\n      } else if (\n        typeof onQueryChange === 'function' ||\n        typeof onQueryChangeFromProps === 'function'\n      ) {\n        const onChangeFn = onQueryChange || onQueryChangeFromProps\n        onChangeFn(newQuery)\n      }\n\n      setCurrentQuery(newQuery)\n    },\n    [\n      mergeQuery,\n      modifySearchParams,\n      onQueryChange,\n      onQueryChangeFromProps,\n      startRouteTransition,\n      router,\n    ],\n  )\n\n  const handlePageChange = useCallback(\n    async (arg: number) => {\n      await refineListData({ page: String(arg) })\n    },\n    [refineListData],\n  )\n\n  const handlePerPageChange = React.useCallback(\n    async (arg: number) => {\n      await refineListData({ limit: String(arg), page: '1' })\n    },\n    [refineListData],\n  )\n\n  const handleSearchChange = useCallback(\n    async (arg: string) => {\n      const search = arg === '' ? undefined : arg\n      await refineListData({ search })\n    },\n    [refineListData],\n  )\n\n  const handleSortChange = useCallback(\n    async (arg: string) => {\n      await refineListData({ sort: arg })\n    },\n    [refineListData],\n  )\n\n  const handleWhereChange = useCallback(\n    async (arg: Where) => {\n      await refineListData({ where: arg })\n    },\n    [refineListData],\n  )\n\n  const syncQuery = useEffectEvent(() => {\n    let shouldUpdateQueryString = false\n    const newQuery = { ...(currentQuery || {}) }\n\n    // Allow the URL to override the default limit\n    if (isNumber(defaultLimit) && !('limit' in currentQuery)) {\n      newQuery.limit = String(defaultLimit)\n      shouldUpdateQueryString = true\n    }\n\n    // Allow the URL to override the default sort\n    if (defaultSort && !('sort' in currentQuery)) {\n      newQuery.sort = defaultSort\n      shouldUpdateQueryString = true\n    }\n\n    // Only modify columns if they originated from preferences\n    // We can assume they did if `listPreferences.columns` is defined\n    if (columns && listPreferences?.columns && !('columns' in currentQuery)) {\n      newQuery.columns = transformColumnsToSearchParams(columns)\n      shouldUpdateQueryString = true\n    }\n\n    if (shouldUpdateQueryString) {\n      setCurrentQuery(newQuery)\n      // Do not use router.replace here to avoid re-rendering on initial load\n      window.history.replaceState(\n        null,\n        '',\n        `?${qs.stringify({ ...newQuery, columns: JSON.stringify(newQuery.columns) })}`,\n      )\n    }\n  })\n\n  // If `defaultLimit` or `defaultSort` are updated externally, update the query\n  // I.e. when HMR runs, these properties may be different\n  useEffect(() => {\n    if (modifySearchParams) {\n      syncQuery()\n    }\n  }, [defaultSort, defaultLimit, modifySearchParams, columns])\n\n  return (\n    <ListQueryContext\n      value={{\n        collectionSlug,\n        data,\n        handlePageChange,\n        handlePerPageChange,\n        handleSearchChange,\n        handleSortChange,\n        handleWhereChange,\n        orderableFieldName,\n        query: currentQuery,\n        refineListData,\n        setModified,\n\n        ...contextRef.current,\n      }}\n    >\n      <ListQueryModifiedContext value={modified}>{children}</ListQueryModifiedContext>\n    </ListQueryContext>\n  )\n}\n"],"mappings":"AAAA;;;AACA,SAASA,SAAS,EAAEC,eAAe,QAAQ;AAE3C,SAASC,QAAQ,EAAEC,8BAA8B,QAAQ;AACzD,YAAYC,EAAA,MAAQ;AACpB,OAAOC,KAAA,IAASC,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,EAAEC,QAAQ,QAAQ;AAIzE,SAASC,oBAAoB,QAAQ;AACrC,SAASC,cAAc,QAAQ;AAC/B,SAASC,kBAAkB,QAAQ;AACnC,SAASC,iBAAiB,QAAQ;AAClC,SAASC,gBAAgB,EAAEC,wBAAwB,QAAQ;AAE3D,SAASC,YAAY,QAAQ;AAE7B,OAAO,MAAMC,iBAAA,GAA8CA,CAAC;EAC1DC,QAAQ;EACRC,cAAc;EACdC,OAAO;EACPC,IAAI;EACJC,YAAY;EACZC,WAAW;EACXC,eAAe;EACfC,kBAAkB;EAClBC,aAAA,EAAeC,sBAAsB;EACrCC;AAAkB,CACnB;EACC;EACA;EACA;;EACA,MAAMC,MAAA,GAAS9B,SAAA;EACf,MAAM+B,eAAA,GAAkB9B,eAAA;EACxB,MAAM;IAAE+B;EAAoB,CAAE,GAAGnB,kBAAA;EACjC,MAAM,CAACoB,QAAA,EAAUC,WAAA,CAAY,GAAGxB,QAAA,CAAS;EAEzC,MAAMyB,YAAA,GAAe3B,OAAA,CACnB,MAAMM,iBAAA,CAAkBiB,eAAA,GACxB,CAACA,eAAA,CAAgB;EAGnB,MAAMK,UAAA,GAAa3B,MAAA,CAAO,CAAC;EAE3B2B,UAAA,CAAWC,OAAO,CAACJ,QAAQ,GAAGA,QAAA;EAE9B,MAAM;IAAEN;EAAa,CAAE,GAAGhB,oBAAA;EAE1B,MAAM,CAAC2B,YAAA,EAAcC,eAAA,CAAgB,GAAG7B,QAAA,CAAoB;IAC1D,IAAIgB,kBAAA,EAAoB;MACtB,OAAOS,YAAA;IACT,OAAO;MACL,OAAO;QACLK,KAAA,EAAOC,MAAA,CAAOlB,YAAA;QACdmB,IAAA,EAAMlB;MACR;IACF;EACF;EAEA,MAAMmB,UAAA,GAAarC,WAAA,CACjB,CAACsC,QAAA,GAAsB,CAAC,CAAC;IACvB,IAAIC,IAAA,GAAO,UAAUD,QAAA,GAAWA,QAAA,CAASC,IAAI,GAAGP,YAAA,EAAcO,IAAA;IAE9D,IAAI,WAAWD,QAAA,IAAY,YAAYA,QAAA,EAAU;MAC/CC,IAAA,GAAO;IACT;IAEA,MAAMC,WAAA,GAAyB;MAC7B,GAAGR,YAAY;MACf,GAAGM,QAAQ;MACXvB,OAAA,EAAS,aAAauB,QAAA,GAAWA,QAAA,CAASvB,OAAO,GAAGiB,YAAA,CAAajB,OAAO;MACxEmB,KAAA,EAAO,WAAWI,QAAA,GAAWA,QAAA,CAASJ,KAAK,GAAIF,YAAA,EAAcE,KAAA,IAASC,MAAA,CAAOlB,YAAA;MAC7EsB,IAAA;MACAE,MAAA,EAAQ,YAAYH,QAAA,GAAWA,QAAA,CAASG,MAAM,GAAGT,YAAA,EAAcS,MAAA;MAC/DC,MAAA,EAAQ,YAAYJ,QAAA,GAAWA,QAAA,CAASI,MAAM,GAAGV,YAAA,EAAcU,MAAA;MAC/DN,IAAA,EAAM,UAAUE,QAAA,GAAWA,QAAA,CAASF,IAAI,GAAIJ,YAAC,EAAcI,IAAA,IAAmBlB,WAAA;MAC9EyB,KAAA,EAAO,WAAWL,QAAA,GAAWA,QAAA,CAASK,KAAK,GAAGX,YAAA,EAAcW;IAC9D;IAEA,OAAOH,WAAA;EACT,GACA,CAACR,YAAA,EAAcf,YAAA,EAAcC,WAAA,CAAY;EAG3C,MAAM0B,cAAA,GAAiB5C,WAAA;EACrB;EACA,OAAO6C,aAAA,EAA0BlB,UAAA;IAC/B,IAAIA,UAAA,KAAamB,SAAA,EAAW;MAC1BlB,WAAA,CAAYD,UAAA;IACd,OAAO;MACLC,WAAA,CAAY;IACd;IAEA,MAAMU,UAAA,GAAWD,UAAA,CAAWQ,aAAA;IAE5B,IAAIzB,kBAAA,EAAoB;MACtBM,oBAAA,CAAqB,MACnBF,MAAA,CAAOuB,OAAO,CACZ,GAAGjD,EAAA,CAAGkD,SAAS,CAAC;QAAE,GAAGV,UAAQ;QAAEvB,OAAA,EAASkC,IAAA,CAAKD,SAAS,CAACV,UAAA,CAASvB,OAAO;MAAE,GAAG;QAAEmC,cAAA,EAAgB;MAAK,IAAI;IAG7G,OAAO,IACL,OAAO7B,aAAA,KAAkB,cACzB,OAAOC,sBAAA,KAA2B,YAClC;MACA,MAAM6B,UAAA,GAAa9B,aAAA,IAAiBC,sBAAA;MACpC6B,UAAA,CAAWb,UAAA;IACb;IAEAL,eAAA,CAAgBK,UAAA;EAClB,GACA,CACED,UAAA,EACAjB,kBAAA,EACAC,aAAA,EACAC,sBAAA,EACAI,oBAAA,EACAF,MAAA,CACD;EAGH,MAAM4B,gBAAA,GAAmBpD,WAAA,CACvB,MAAOqD,GAAA;IACL,MAAMT,cAAA,CAAe;MAAEL,IAAA,EAAMJ,MAAA,CAAOkB,GAAA;IAAK;EAC3C,GACA,CAACT,cAAA,CAAe;EAGlB,MAAMU,mBAAA,GAAsBvD,KAAA,CAAMC,WAAW,CAC3C,MAAOqD,KAAA;IACL,MAAMT,cAAA,CAAe;MAAEV,KAAA,EAAOC,MAAA,CAAOkB,KAAA;MAAMd,IAAA,EAAM;IAAI;EACvD,GACA,CAACK,cAAA,CAAe;EAGlB,MAAMW,kBAAA,GAAqBvD,WAAA,CACzB,MAAOqD,KAAA;IACL,MAAMX,MAAA,GAASW,KAAA,KAAQ,KAAKP,SAAA,GAAYO,KAAA;IACxC,MAAMT,cAAA,CAAe;MAAEF;IAAO;EAChC,GACA,CAACE,cAAA,CAAe;EAGlB,MAAMY,gBAAA,GAAmBxD,WAAA,CACvB,MAAOqD,KAAA;IACL,MAAMT,cAAA,CAAe;MAAER,IAAA,EAAMiB;IAAI;EACnC,GACA,CAACT,cAAA,CAAe;EAGlB,MAAMa,iBAAA,GAAoBzD,WAAA,CACxB,MAAOqD,KAAA;IACL,MAAMT,cAAA,CAAe;MAAED,KAAA,EAAOU;IAAI;EACpC,GACA,CAACT,cAAA,CAAe;EAGlB,MAAMc,SAAA,GAAYpD,cAAA,CAAe;IAC/B,IAAIqD,uBAAA,GAA0B;IAC9B,MAAMrB,UAAA,GAAW;MAAE,IAAIN,YAAA,IAAgB,CAAC,CAAC;IAAE;IAE3C;IACA,IAAIpC,QAAA,CAASqB,YAAA,KAAiB,EAAE,WAAWe,YAAW,GAAI;MACxDM,UAAA,CAASJ,KAAK,GAAGC,MAAA,CAAOlB,YAAA;MACxB0C,uBAAA,GAA0B;IAC5B;IAEA;IACA,IAAIzC,WAAA,IAAe,EAAE,UAAUc,YAAW,GAAI;MAC5CM,UAAA,CAASF,IAAI,GAAGlB,WAAA;MAChByC,uBAAA,GAA0B;IAC5B;IAEA;IACA;IACA,IAAI5C,OAAA,IAAWI,eAAA,EAAiBJ,OAAA,IAAW,EAAE,aAAaiB,YAAW,GAAI;MACvEM,UAAA,CAASvB,OAAO,GAAGlB,8BAAA,CAA+BkB,OAAA;MAClD4C,uBAAA,GAA0B;IAC5B;IAEA,IAAIA,uBAAA,EAAyB;MAC3B1B,eAAA,CAAgBK,UAAA;MAChB;MACAsB,MAAA,CAAOC,OAAO,CAACC,YAAY,CACzB,MACA,IACA,IAAIhE,EAAA,CAAGkD,SAAS,CAAC;QAAE,GAAGV,UAAQ;QAAEvB,OAAA,EAASkC,IAAA,CAAKD,SAAS,CAACV,UAAA,CAASvB,OAAO;MAAE,IAAI;IAElF;EACF;EAEA;EACA;EACAd,SAAA,CAAU;IACR,IAAImB,kBAAA,EAAoB;MACtBsC,SAAA;IACF;EACF,GAAG,CAACxC,WAAA,EAAaD,YAAA,EAAcG,kBAAA,EAAoBL,OAAA,CAAQ;EAE3D,oBACEgD,IAAA,CAACtD,gBAAA;IACCuD,KAAA,EAAO;MACLlD,cAAA;MACAE,IAAA;MACAoC,gBAAA;MACAE,mBAAA;MACAC,kBAAA;MACAC,gBAAA;MACAC,iBAAA;MACAlC,kBAAA;MACA0C,KAAA,EAAOjC,YAAA;MACPY,cAAA;MACAhB,WAAA;MAEA,GAAGE,UAAA,CAAWC;IAChB;cAEA,aAAAgC,IAAA,CAACrD,wBAAA;MAAyBsD,KAAA,EAAOrC,QAAA;gBAAWd;;;AAGlD","ignoreList":[]}