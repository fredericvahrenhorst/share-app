{"version":3,"sources":["../src/email.ts"],"sourcesContent":["import { nodemailerAdapter } from '@payloadcms/email-nodemailer'\nimport nodemailer from 'nodemailer'\n\nimport type { PayloadCloudEmailOptions } from './types.js'\n\ntype NodemailerAdapter = ReturnType<typeof nodemailerAdapter>\n\nexport const payloadCloudEmail = async (\n  args: PayloadCloudEmailOptions,\n): Promise<NodemailerAdapter | undefined> => {\n  if (process.env.PAYLOAD_CLOUD !== 'true' || !args) {\n    return undefined\n  }\n\n  if (!args.apiKey) {\n    throw new Error('apiKey must be provided to use Payload Cloud Email')\n  }\n  if (!args.defaultDomain) {\n    throw new Error('defaultDomain must be provided to use Payload Cloud Email')\n  }\n\n  // Check if already has email configuration\n\n  if (args.config.email) {\n    // eslint-disable-next-line no-console\n    console.log(\n      'Payload Cloud Email is enabled but email configuration is already provided in Payload config. If this is intentional, set `email: false` in the Payload Cloud plugin options.',\n    )\n    return args.config.email\n  }\n\n  const { apiKey, defaultDomain, skipVerify } = args\n\n  const customDomainEnvs = Object.keys(process.env).filter(\n    (e) => e.startsWith('PAYLOAD_CLOUD_EMAIL_DOMAIN_') && !e.endsWith('API_KEY'),\n  )\n\n  const customDomains = customDomainEnvs.map((e) => process.env[e]).filter(Boolean)\n\n  if (customDomains.length) {\n    // eslint-disable-next-line no-console\n    console.log(\n      `Configuring Payload Cloud Email for ${[defaultDomain, ...(customDomains || [])].join(', ')}`,\n    )\n  }\n\n  const defaultFromName = args.defaultFromName || 'Payload CMS'\n  const defaultFromAddress =\n    args.defaultFromAddress || `cms@${customDomains.length ? customDomains[0] : defaultDomain}`\n\n  const emailAdapter = await nodemailerAdapter({\n    defaultFromAddress,\n    defaultFromName,\n    skipVerify,\n    transport: nodemailer.createTransport({\n      auth: {\n        pass: apiKey,\n        user: 'resend',\n      },\n      host: 'smtp.resend.com',\n      port: 465,\n      secure: true,\n    }),\n  })\n\n  return emailAdapter\n}\n"],"names":["nodemailerAdapter","nodemailer","payloadCloudEmail","args","process","env","PAYLOAD_CLOUD","undefined","apiKey","Error","defaultDomain","config","email","console","log","skipVerify","customDomainEnvs","Object","keys","filter","e","startsWith","endsWith","customDomains","map","Boolean","length","join","defaultFromName","defaultFromAddress","emailAdapter","transport","createTransport","auth","pass","user","host","port","secure"],"mappings":"AAAA,SAASA,iBAAiB,QAAQ,+BAA8B;AAChE,OAAOC,gBAAgB,aAAY;AAMnC,OAAO,MAAMC,oBAAoB,OAC/BC;IAEA,IAAIC,QAAQC,GAAG,CAACC,aAAa,KAAK,UAAU,CAACH,MAAM;QACjD,OAAOI;IACT;IAEA,IAAI,CAACJ,KAAKK,MAAM,EAAE;QAChB,MAAM,IAAIC,MAAM;IAClB;IACA,IAAI,CAACN,KAAKO,aAAa,EAAE;QACvB,MAAM,IAAID,MAAM;IAClB;IAEA,2CAA2C;IAE3C,IAAIN,KAAKQ,MAAM,CAACC,KAAK,EAAE;QACrB,sCAAsC;QACtCC,QAAQC,GAAG,CACT;QAEF,OAAOX,KAAKQ,MAAM,CAACC,KAAK;IAC1B;IAEA,MAAM,EAAEJ,MAAM,EAAEE,aAAa,EAAEK,UAAU,EAAE,GAAGZ;IAE9C,MAAMa,mBAAmBC,OAAOC,IAAI,CAACd,QAAQC,GAAG,EAAEc,MAAM,CACtD,CAACC,IAAMA,EAAEC,UAAU,CAAC,kCAAkC,CAACD,EAAEE,QAAQ,CAAC;IAGpE,MAAMC,gBAAgBP,iBAAiBQ,GAAG,CAAC,CAACJ,IAAMhB,QAAQC,GAAG,CAACe,EAAE,EAAED,MAAM,CAACM;IAEzE,IAAIF,cAAcG,MAAM,EAAE;QACxB,sCAAsC;QACtCb,QAAQC,GAAG,CACT,CAAC,oCAAoC,EAAE;YAACJ;eAAmBa,iBAAiB,EAAE;SAAE,CAACI,IAAI,CAAC,OAAO;IAEjG;IAEA,MAAMC,kBAAkBzB,KAAKyB,eAAe,IAAI;IAChD,MAAMC,qBACJ1B,KAAK0B,kBAAkB,IAAI,CAAC,IAAI,EAAEN,cAAcG,MAAM,GAAGH,aAAa,CAAC,EAAE,GAAGb,eAAe;IAE7F,MAAMoB,eAAe,MAAM9B,kBAAkB;QAC3C6B;QACAD;QACAb;QACAgB,WAAW9B,WAAW+B,eAAe,CAAC;YACpCC,MAAM;gBACJC,MAAM1B;gBACN2B,MAAM;YACR;YACAC,MAAM;YACNC,MAAM;YACNC,QAAQ;QACV;IACF;IAEA,OAAOR;AACT,EAAC"}