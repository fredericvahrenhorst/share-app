{"version":3,"sources":["../../src/utilities/createPayloadRequest.ts"],"sourcesContent":["import { initI18n } from '@payloadcms/translations'\nimport * as qs from 'qs-esm'\n\nimport type { SanitizedConfig } from '../config/types.js'\nimport type { CustomPayloadRequestProperties, PayloadRequest } from '../types/index.js'\n\nimport { executeAuthStrategies } from '../auth/executeAuthStrategies.js'\nimport { getDataLoader } from '../collections/dataloader.js'\nimport { getPayload } from '../index.js'\nimport { sanitizeLocales } from './addLocalesToRequest.js'\nimport { getRequestLanguage } from './getRequestLanguage.js'\nimport { parseCookies } from './parseCookies.js'\n\ntype Args = {\n  canSetHeaders?: boolean\n  config: Promise<SanitizedConfig> | SanitizedConfig\n  params?: {\n    collection: string\n  }\n  request: Request\n}\n\nexport const createPayloadRequest = async ({\n  canSetHeaders,\n  config: configPromise,\n  params,\n  request,\n}: Args): Promise<PayloadRequest> => {\n  const cookies = parseCookies(request.headers)\n  const payload = await getPayload({ config: configPromise })\n\n  const { config } = payload\n  const localization = config.localization\n\n  const urlProperties = new URL(request.url)\n  const { pathname, searchParams } = urlProperties\n\n  const isGraphQL =\n    !config.graphQL.disable && pathname === `${config.routes.api}${config.routes.graphQL}`\n\n  const language = getRequestLanguage({\n    config,\n    cookies,\n    headers: request.headers,\n  })\n\n  const i18n = await initI18n({\n    config: config.i18n,\n    context: 'api',\n    language,\n  })\n\n  const fallbackFromRequest =\n    searchParams.get('fallback-locale') || searchParams.get('fallbackLocale')\n  let locale = searchParams.get('locale')\n  let fallbackLocale = fallbackFromRequest\n\n  const { search: queryToParse } = urlProperties\n\n  const query = queryToParse\n    ? qs.parse(queryToParse, {\n        arrayLimit: 1000,\n        depth: 10,\n        ignoreQueryPrefix: true,\n      })\n    : {}\n\n  if (localization) {\n    const locales = sanitizeLocales({\n      fallbackLocale: fallbackLocale!,\n      locale: locale!,\n      localization,\n    })\n\n    fallbackLocale = locales.fallbackLocale!\n    locale = locales.locale!\n  }\n\n  const customRequest: CustomPayloadRequestProperties = {\n    context: {},\n    fallbackLocale: fallbackLocale!,\n    hash: urlProperties.hash,\n    host: urlProperties.host,\n    href: urlProperties.href,\n    i18n,\n    locale,\n    origin: urlProperties.origin,\n    pathname: urlProperties.pathname,\n    payload,\n    payloadAPI: isGraphQL ? 'GraphQL' : 'REST',\n    payloadDataLoader: undefined!,\n    payloadUploadSizes: {},\n    port: urlProperties.port,\n    protocol: urlProperties.protocol,\n    query,\n    routeParams: params || {},\n    search: urlProperties.search,\n    searchParams: urlProperties.searchParams,\n    t: i18n.t,\n    transactionID: undefined,\n    user: null,\n  }\n\n  const req: PayloadRequest = Object.assign(request, customRequest)\n\n  req.payloadDataLoader = getDataLoader(req)\n\n  const { responseHeaders, user } = await executeAuthStrategies({\n    canSetHeaders,\n    headers: req.headers,\n    isGraphQL,\n    payload,\n  })\n\n  req.user = user\n\n  if (responseHeaders) {\n    req.responseHeaders = responseHeaders\n  }\n\n  return req\n}\n"],"names":["initI18n","qs","executeAuthStrategies","getDataLoader","getPayload","sanitizeLocales","getRequestLanguage","parseCookies","createPayloadRequest","canSetHeaders","config","configPromise","params","request","cookies","headers","payload","localization","urlProperties","URL","url","pathname","searchParams","isGraphQL","graphQL","disable","routes","api","language","i18n","context","fallbackFromRequest","get","locale","fallbackLocale","search","queryToParse","query","parse","arrayLimit","depth","ignoreQueryPrefix","locales","customRequest","hash","host","href","origin","payloadAPI","payloadDataLoader","undefined","payloadUploadSizes","port","protocol","routeParams","t","transactionID","user","req","Object","assign","responseHeaders"],"mappings":"AAAA,SAASA,QAAQ,QAAQ,2BAA0B;AACnD,YAAYC,QAAQ,SAAQ;AAK5B,SAASC,qBAAqB,QAAQ,mCAAkC;AACxE,SAASC,aAAa,QAAQ,+BAA8B;AAC5D,SAASC,UAAU,QAAQ,cAAa;AACxC,SAASC,eAAe,QAAQ,2BAA0B;AAC1D,SAASC,kBAAkB,QAAQ,0BAAyB;AAC5D,SAASC,YAAY,QAAQ,oBAAmB;AAWhD,OAAO,MAAMC,uBAAuB,OAAO,EACzCC,aAAa,EACbC,QAAQC,aAAa,EACrBC,MAAM,EACNC,OAAO,EACF;IACL,MAAMC,UAAUP,aAAaM,QAAQE,OAAO;IAC5C,MAAMC,UAAU,MAAMZ,WAAW;QAAEM,QAAQC;IAAc;IAEzD,MAAM,EAAED,MAAM,EAAE,GAAGM;IACnB,MAAMC,eAAeP,OAAOO,YAAY;IAExC,MAAMC,gBAAgB,IAAIC,IAAIN,QAAQO,GAAG;IACzC,MAAM,EAAEC,QAAQ,EAAEC,YAAY,EAAE,GAAGJ;IAEnC,MAAMK,YACJ,CAACb,OAAOc,OAAO,CAACC,OAAO,IAAIJ,aAAa,GAAGX,OAAOgB,MAAM,CAACC,GAAG,GAAGjB,OAAOgB,MAAM,CAACF,OAAO,EAAE;IAExF,MAAMI,WAAWtB,mBAAmB;QAClCI;QACAI;QACAC,SAASF,QAAQE,OAAO;IAC1B;IAEA,MAAMc,OAAO,MAAM7B,SAAS;QAC1BU,QAAQA,OAAOmB,IAAI;QACnBC,SAAS;QACTF;IACF;IAEA,MAAMG,sBACJT,aAAaU,GAAG,CAAC,sBAAsBV,aAAaU,GAAG,CAAC;IAC1D,IAAIC,SAASX,aAAaU,GAAG,CAAC;IAC9B,IAAIE,iBAAiBH;IAErB,MAAM,EAAEI,QAAQC,YAAY,EAAE,GAAGlB;IAEjC,MAAMmB,QAAQD,eACVnC,GAAGqC,KAAK,CAACF,cAAc;QACrBG,YAAY;QACZC,OAAO;QACPC,mBAAmB;IACrB,KACA,CAAC;IAEL,IAAIxB,cAAc;QAChB,MAAMyB,UAAUrC,gBAAgB;YAC9B6B,gBAAgBA;YAChBD,QAAQA;YACRhB;QACF;QAEAiB,iBAAiBQ,QAAQR,cAAc;QACvCD,SAASS,QAAQT,MAAM;IACzB;IAEA,MAAMU,gBAAgD;QACpDb,SAAS,CAAC;QACVI,gBAAgBA;QAChBU,MAAM1B,cAAc0B,IAAI;QACxBC,MAAM3B,cAAc2B,IAAI;QACxBC,MAAM5B,cAAc4B,IAAI;QACxBjB;QACAI;QACAc,QAAQ7B,cAAc6B,MAAM;QAC5B1B,UAAUH,cAAcG,QAAQ;QAChCL;QACAgC,YAAYzB,YAAY,YAAY;QACpC0B,mBAAmBC;QACnBC,oBAAoB,CAAC;QACrBC,MAAMlC,cAAckC,IAAI;QACxBC,UAAUnC,cAAcmC,QAAQ;QAChChB;QACAiB,aAAa1C,UAAU,CAAC;QACxBuB,QAAQjB,cAAciB,MAAM;QAC5Bb,cAAcJ,cAAcI,YAAY;QACxCiC,GAAG1B,KAAK0B,CAAC;QACTC,eAAeN;QACfO,MAAM;IACR;IAEA,MAAMC,MAAsBC,OAAOC,MAAM,CAAC/C,SAAS8B;IAEnDe,IAAIT,iBAAiB,GAAG9C,cAAcuD;IAEtC,MAAM,EAAEG,eAAe,EAAEJ,IAAI,EAAE,GAAG,MAAMvD,sBAAsB;QAC5DO;QACAM,SAAS2C,IAAI3C,OAAO;QACpBQ;QACAP;IACF;IAEA0C,IAAID,IAAI,GAAGA;IAEX,IAAII,iBAAiB;QACnBH,IAAIG,eAAe,GAAGA;IACxB;IAEA,OAAOH;AACT,EAAC"}