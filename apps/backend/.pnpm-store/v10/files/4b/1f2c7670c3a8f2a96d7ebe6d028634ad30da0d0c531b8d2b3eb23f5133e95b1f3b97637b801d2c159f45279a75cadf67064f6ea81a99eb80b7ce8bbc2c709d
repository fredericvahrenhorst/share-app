{"version":3,"sources":["../../src/queries/getBuildQueryPlugin.ts"],"sourcesContent":["import type { FlattenedField, Payload, Where } from 'payload'\n\nimport { APIError } from 'payload'\n\nimport { parseParams } from './parseParams.js'\n\ntype GetBuildQueryPluginArgs = {\n  collectionSlug?: string\n  versionsFields?: FlattenedField[]\n}\n\nexport type BuildQueryArgs = {\n  globalSlug?: string\n  locale?: string\n  payload: Payload\n  where: Where\n}\n\n// This plugin asynchronously builds a list of Mongoose query constraints\n// which can then be used in subsequent Mongoose queries.\n// Deprecated in favor of using simpler buildQuery directly\nexport const getBuildQueryPlugin = ({\n  collectionSlug,\n  versionsFields,\n}: GetBuildQueryPluginArgs = {}) => {\n  return function buildQueryPlugin(schema: any) {\n    const modifiedSchema = schema\n    async function schemaBuildQuery({\n      globalSlug,\n      locale,\n      payload,\n      where,\n    }: BuildQueryArgs): Promise<Record<string, unknown>> {\n      let fields: FlattenedField[] | null = null\n\n      if (versionsFields) {\n        fields = versionsFields\n      } else {\n        if (globalSlug) {\n          const globalConfig = payload.globals.config.find(({ slug }) => slug === globalSlug)\n\n          if (!globalConfig) {\n            throw new APIError(`Global with the slug ${globalSlug} was not found`)\n          }\n\n          fields = globalConfig.flattenedFields\n        }\n        if (collectionSlug) {\n          const collectionConfig = payload.collections[collectionSlug]?.config\n\n          if (!collectionConfig) {\n            throw new APIError(`Collection with the slug ${globalSlug} was not found`)\n          }\n\n          fields = collectionConfig.flattenedFields\n        }\n      }\n\n      if (fields === null) {\n        throw new APIError('Fields are not initialized.')\n      }\n\n      const result = await parseParams({\n        collectionSlug,\n        fields,\n        globalSlug,\n        locale,\n        parentIsLocalized: false,\n        payload,\n        where,\n      })\n\n      return result\n    }\n    modifiedSchema.statics.buildQuery = schemaBuildQuery\n  }\n}\n"],"names":["APIError","parseParams","getBuildQueryPlugin","collectionSlug","versionsFields","buildQueryPlugin","schema","modifiedSchema","schemaBuildQuery","globalSlug","locale","payload","where","fields","globalConfig","globals","config","find","slug","flattenedFields","collectionConfig","collections","result","parentIsLocalized","statics","buildQuery"],"mappings":"AAEA,SAASA,QAAQ,QAAQ,UAAS;AAElC,SAASC,WAAW,QAAQ,mBAAkB;AAc9C,yEAAyE;AACzE,yDAAyD;AACzD,2DAA2D;AAC3D,OAAO,MAAMC,sBAAsB,CAAC,EAClCC,cAAc,EACdC,cAAc,EACU,GAAG,CAAC,CAAC;IAC7B,OAAO,SAASC,iBAAiBC,MAAW;QAC1C,MAAMC,iBAAiBD;QACvB,eAAeE,iBAAiB,EAC9BC,UAAU,EACVC,MAAM,EACNC,OAAO,EACPC,KAAK,EACU;YACf,IAAIC,SAAkC;YAEtC,IAAIT,gBAAgB;gBAClBS,SAAST;YACX,OAAO;gBACL,IAAIK,YAAY;oBACd,MAAMK,eAAeH,QAAQI,OAAO,CAACC,MAAM,CAACC,IAAI,CAAC,CAAC,EAAEC,IAAI,EAAE,GAAKA,SAAST;oBAExE,IAAI,CAACK,cAAc;wBACjB,MAAM,IAAId,SAAS,CAAC,qBAAqB,EAAES,WAAW,cAAc,CAAC;oBACvE;oBAEAI,SAASC,aAAaK,eAAe;gBACvC;gBACA,IAAIhB,gBAAgB;oBAClB,MAAMiB,mBAAmBT,QAAQU,WAAW,CAAClB,eAAe,EAAEa;oBAE9D,IAAI,CAACI,kBAAkB;wBACrB,MAAM,IAAIpB,SAAS,CAAC,yBAAyB,EAAES,WAAW,cAAc,CAAC;oBAC3E;oBAEAI,SAASO,iBAAiBD,eAAe;gBAC3C;YACF;YAEA,IAAIN,WAAW,MAAM;gBACnB,MAAM,IAAIb,SAAS;YACrB;YAEA,MAAMsB,SAAS,MAAMrB,YAAY;gBAC/BE;gBACAU;gBACAJ;gBACAC;gBACAa,mBAAmB;gBACnBZ;gBACAC;YACF;YAEA,OAAOU;QACT;QACAf,eAAeiB,OAAO,CAACC,UAAU,GAAGjB;IACtC;AACF,EAAC"}