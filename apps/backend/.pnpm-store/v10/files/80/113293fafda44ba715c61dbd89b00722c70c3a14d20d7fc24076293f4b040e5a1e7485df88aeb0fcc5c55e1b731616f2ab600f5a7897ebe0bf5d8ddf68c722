{"version":3,"file":"index.js","names":["c","_c","useModal","getTranslation","extractID","React","useAuth","FolderProvider","useFolder","useRouteCache","useServerFunctions","useTranslation","Button","ConfirmationModal","useDocumentDrawer","Drawer","DrawerActionHeader","DrawerContentContainer","ListCreateNewDocInFolderButton","LoadingOverlay","NoListResults","Translation","FolderBreadcrumbs","ColoredFolderIcon","baseClass","baseModalSlug","confirmModalSlug","MoveItemsToFolderDrawer","props","_jsx","gutter","Header","slug","drawerSlug","LoadFolderData","permissions","subfolders","setSubfolders","useState","documents","setDocuments","breadcrumbs","setBreadcrumbs","FolderResultsComponent","setFolderResultsComponent","hasLoaded","setHasLoaded","folderID","setFolderID","fromFolderID","hasLoadedRef","useRef","getFolderResultsComponentAndData","populateMoveToFolderDrawer","useCallback","folderIDToPopulate","result","activeCollectionSlugs","folderCollectionSlug","browseByFolder","displayAs","sort","e","current","useEffect","allCollectionFolderSlugs","allowCreateCollectionSlugs","collections","create","allowMultiSelection","folderFieldName","onItemClick","item","value","id","Content","t0","$","fromFolderName","itemsToMove","onConfirm","skipConfirmModal","clearRouteCache","closeModal","isModalOpen","openModal","t1","length","count","folderAddedToUnderlyingFolder","setFolderAddedToUnderlyingFolder","i18n","t","folderCollectionConfig","getSelectedItems","t2","collectionSlug","FolderDocumentDrawer","t3","closeDrawer","closeFolderDrawer","openDrawer","openFolderDrawer","t4","selected","lastCrumb","name","_folderOrDocumentTitle","getSelectedFolder","t5","t6","doc","folder","onCreateSuccess","onConfirmMove","t7","t8","t9","t10","t11","action","title","t12","undefined","t13","crumb","index","onClick","t14","Actions","buttonLabel","labels","singular","toLowerCase","collectionSlugs","slugPrefix","Message","children","label","plural","_jsxs","_Fragment","onCancel","onSave","saveLabel","DrawerHeading","className","map","buttonStyle","margin","initialData","redirectAfterCreate","body","ConfirmationMessage","toFolderName","confirmLabel","heading","modalSlug","fromFolder","elements","1","_temp","2","_temp2","i18nKey","variables","toFolder","_temp3","_temp4","_temp5","_temp6","children_1","children_0","children_4","children_3","children_2"],"sources":["../../../../../src/elements/FolderView/Drawers/MoveToFolder/index.tsx"],"sourcesContent":["'use client'\n\nimport type { CollectionSlug, Document } from 'payload'\nimport type { FolderBreadcrumb, FolderOrDocument } from 'payload/shared'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { getTranslation } from '@payloadcms/translations'\nimport { extractID } from 'payload/shared'\nimport React from 'react'\n\nimport { useAuth } from '../../../../providers/Auth/index.js'\nimport { FolderProvider, useFolder } from '../../../../providers/Folders/index.js'\nimport { useRouteCache } from '../../../../providers/RouteCache/index.js'\nimport { useServerFunctions } from '../../../../providers/ServerFunctions/index.js'\nimport { useTranslation } from '../../../../providers/Translation/index.js'\nimport { Button } from '../../../Button/index.js'\nimport { ConfirmationModal } from '../../../ConfirmationModal/index.js'\nimport { useDocumentDrawer } from '../../../DocumentDrawer/index.js'\nimport { Drawer } from '../../../Drawer/index.js'\nimport { DrawerActionHeader } from '../../../DrawerActionHeader/index.js'\nimport { DrawerContentContainer } from '../../../DrawerContentContainer/index.js'\nimport { ListCreateNewDocInFolderButton } from '../../../ListHeader/TitleActions/ListCreateNewDocInFolderButton.js'\nimport { LoadingOverlay } from '../../../Loading/index.js'\nimport { NoListResults } from '../../../NoListResults/index.js'\nimport { Translation } from '../../../Translation/index.js'\nimport { FolderBreadcrumbs } from '../../Breadcrumbs/index.js'\nimport { ColoredFolderIcon } from '../../ColoredFolderIcon/index.js'\nimport './index.scss'\n\nconst baseClass = 'move-folder-drawer'\nconst baseModalSlug = 'move-folder-drawer'\nconst confirmModalSlug = `${baseModalSlug}-confirm-move`\n\ntype ActionProps =\n  | {\n      readonly action: 'moveItemsToFolder'\n    }\n  | {\n      readonly action: 'moveItemToFolder'\n      readonly title: string\n    }\nexport type MoveToFolderDrawerProps = {\n  readonly drawerSlug: string\n  readonly folderCollectionSlug: string\n  readonly folderFieldName: string\n  readonly fromFolderID?: number | string\n  readonly fromFolderName?: string\n  readonly itemsToMove: FolderOrDocument[]\n  /**\n   * Callback function to be called when the user confirms the move\n   *\n   * @param folderID - The ID of the folder to move the items to\n   */\n  readonly onConfirm: (args: {\n    id: null | number | string\n    name: null | string\n  }) => Promise<void> | void\n  readonly populateMoveToFolderDrawer?: (folderID: null | number | string) => Promise<void> | void\n  /**\n   * Set to `true` to skip the confirmation modal\n   * @default false\n   */\n  readonly skipConfirmModal?: boolean\n} & ActionProps\n\nexport function MoveItemsToFolderDrawer(props: MoveToFolderDrawerProps) {\n  return (\n    <Drawer gutter={false} Header={null} slug={props.drawerSlug}>\n      <LoadFolderData {...props} />\n    </Drawer>\n  )\n}\n\nfunction LoadFolderData(props: MoveToFolderDrawerProps) {\n  const { permissions } = useAuth()\n  const [subfolders, setSubfolders] = React.useState<FolderOrDocument[]>([])\n  const [documents, setDocuments] = React.useState<FolderOrDocument[]>([])\n  const [breadcrumbs, setBreadcrumbs] = React.useState<FolderBreadcrumb[]>([])\n  const [FolderResultsComponent, setFolderResultsComponent] = React.useState<React.ReactNode>(null)\n  const [hasLoaded, setHasLoaded] = React.useState(false)\n  const [folderID, setFolderID] = React.useState<null | number | string>(props.fromFolderID || null)\n  const hasLoadedRef = React.useRef(false)\n  const { getFolderResultsComponentAndData } = useServerFunctions()\n\n  const populateMoveToFolderDrawer = React.useCallback(\n    async (folderIDToPopulate: null | number | string) => {\n      try {\n        const result = await getFolderResultsComponentAndData({\n          activeCollectionSlugs: [props.folderCollectionSlug],\n          browseByFolder: false,\n          displayAs: 'grid',\n          folderID: folderIDToPopulate,\n          sort: '_folderOrDocumentTitle',\n        })\n\n        setBreadcrumbs(result.breadcrumbs || [])\n        setSubfolders(result?.subfolders || [])\n        setDocuments(result?.documents || [])\n        setFolderResultsComponent(result.FolderResultsComponent || null)\n        setFolderID(folderIDToPopulate)\n        setHasLoaded(true)\n      } catch (e) {\n        setBreadcrumbs([])\n        setSubfolders([])\n        setDocuments([])\n      }\n\n      hasLoadedRef.current = true\n    },\n    [getFolderResultsComponentAndData, props.folderCollectionSlug],\n  )\n\n  React.useEffect(() => {\n    if (!hasLoadedRef.current) {\n      void populateMoveToFolderDrawer(props.fromFolderID)\n    }\n  }, [populateMoveToFolderDrawer, props.fromFolderID])\n\n  if (!hasLoaded) {\n    return <LoadingOverlay />\n  }\n\n  return (\n    <FolderProvider\n      allCollectionFolderSlugs={[props.folderCollectionSlug]}\n      allowCreateCollectionSlugs={\n        permissions.collections[props.folderCollectionSlug]?.create\n          ? [props.folderCollectionSlug]\n          : []\n      }\n      allowMultiSelection={false}\n      breadcrumbs={breadcrumbs}\n      documents={documents}\n      folderFieldName={props.folderFieldName}\n      folderID={folderID}\n      FolderResultsComponent={FolderResultsComponent}\n      key={folderID}\n      onItemClick={async (item) => {\n        await populateMoveToFolderDrawer(item.value.id)\n      }}\n      subfolders={subfolders}\n    >\n      <Content {...props} populateMoveToFolderDrawer={populateMoveToFolderDrawer} />\n    </FolderProvider>\n  )\n}\n\nfunction Content({\n  drawerSlug,\n  fromFolderID,\n  fromFolderName,\n  itemsToMove,\n  onConfirm,\n  populateMoveToFolderDrawer,\n  skipConfirmModal,\n  ...props\n}: MoveToFolderDrawerProps) {\n  const { clearRouteCache } = useRouteCache()\n  const { closeModal, isModalOpen, openModal } = useModal()\n  const [count] = React.useState(() => itemsToMove.length)\n  const [folderAddedToUnderlyingFolder, setFolderAddedToUnderlyingFolder] = React.useState(false)\n  const { i18n, t } = useTranslation()\n  const {\n    breadcrumbs,\n    folderCollectionConfig,\n    folderCollectionSlug,\n    folderFieldName,\n    folderID,\n    FolderResultsComponent,\n    getSelectedItems,\n    subfolders,\n  } = useFolder()\n  const [FolderDocumentDrawer, , { closeDrawer: closeFolderDrawer, openDrawer: openFolderDrawer }] =\n    useDocumentDrawer({\n      collectionSlug: folderCollectionSlug,\n    })\n\n  const getSelectedFolder = React.useCallback((): {\n    id: null | number | string\n    name: null | string\n  } => {\n    const selected = getSelectedItems()\n\n    if (selected.length === 0) {\n      const lastCrumb = breadcrumbs?.[breadcrumbs.length - 1]\n      // use the breadcrumb\n      return {\n        id: lastCrumb?.id || null,\n        name: lastCrumb?.name || null,\n      }\n    } else {\n      // use the selected item\n      return {\n        id: selected[0].value.id,\n        name: selected[0].value._folderOrDocumentTitle,\n      }\n    }\n  }, [breadcrumbs, getSelectedItems])\n\n  const onCreateSuccess = React.useCallback(\n    async ({ collectionSlug, doc }: { collectionSlug: CollectionSlug; doc: Document }) => {\n      await populateMoveToFolderDrawer(folderID)\n      if (\n        collectionSlug === folderCollectionSlug &&\n        ((doc?.folder && fromFolderID === extractID(doc?.folder)) ||\n          (!fromFolderID && !doc?.folder))\n      ) {\n        // if the folder we created is in the same folder as the one we are moving from\n        // set variable so we can clear the route cache when we close the drawer\n        setFolderAddedToUnderlyingFolder(true)\n      }\n    },\n    [populateMoveToFolderDrawer, folderID, fromFolderID, folderCollectionSlug],\n  )\n\n  const onConfirmMove = React.useCallback(() => {\n    if (typeof onConfirm === 'function') {\n      void onConfirm(getSelectedFolder())\n    }\n  }, [getSelectedFolder, onConfirm])\n\n  React.useEffect(() => {\n    if (!isModalOpen(drawerSlug) && folderAddedToUnderlyingFolder) {\n      // if we added a folder to the underlying folder, clear the route cache\n      // so that the folder view will be reloaded with the new folder\n      setFolderAddedToUnderlyingFolder(false)\n      clearRouteCache()\n    }\n  }, [drawerSlug, isModalOpen, clearRouteCache, folderAddedToUnderlyingFolder])\n\n  return (\n    <>\n      <DrawerActionHeader\n        onCancel={() => {\n          closeModal(drawerSlug)\n        }}\n        onSave={() => {\n          if (skipConfirmModal) {\n            onConfirmMove()\n          } else {\n            openModal(confirmModalSlug)\n          }\n        }}\n        saveLabel={t('general:select')}\n        title={\n          <DrawerHeading\n            action={props.action}\n            count={count}\n            fromFolderName={fromFolderID ? fromFolderName : undefined}\n            title={props.action === 'moveItemToFolder' ? props.title : undefined}\n          />\n        }\n      />\n\n      <div className={`${baseClass}__breadcrumbs-section`}>\n        <FolderBreadcrumbs\n          breadcrumbs={[\n            {\n              id: null,\n              name: (\n                <span className={`${baseClass}__folder-breadcrumbs-root`}>\n                  <ColoredFolderIcon />\n                  {t('folder:folders')}\n                </span>\n              ),\n              onClick: breadcrumbs.length\n                ? () => {\n                    void populateMoveToFolderDrawer(null)\n                  }\n                : undefined,\n            },\n            ...breadcrumbs.map((crumb, index) => ({\n              id: crumb.id,\n              name: crumb.name,\n              onClick:\n                index !== breadcrumbs.length - 1\n                  ? () => {\n                      void populateMoveToFolderDrawer(crumb.id)\n                    }\n                  : undefined,\n            })),\n          ]}\n        />\n        {subfolders.length > 0 && (\n          <>\n            <Button\n              buttonStyle=\"pill\"\n              className={`${baseClass}__add-folder-button`}\n              margin={false}\n              onClick={() => {\n                openFolderDrawer()\n              }}\n            >\n              {t('fields:addLabel', {\n                label: getTranslation(folderCollectionConfig.labels?.singular, i18n),\n              })}\n            </Button>\n            <FolderDocumentDrawer\n              initialData={{\n                [folderFieldName]: folderID,\n              }}\n              onSave={(result) => {\n                void onCreateSuccess({\n                  collectionSlug: folderCollectionConfig.slug,\n                  doc: result.doc,\n                })\n                closeFolderDrawer()\n              }}\n              redirectAfterCreate={false}\n            />\n          </>\n        )}\n      </div>\n\n      <DrawerContentContainer className={`${baseClass}__body-section`}>\n        {subfolders.length > 0 ? (\n          FolderResultsComponent\n        ) : (\n          <NoListResults\n            Actions={[\n              <ListCreateNewDocInFolderButton\n                buttonLabel={`${t('general:create')} ${getTranslation(folderCollectionConfig.labels?.singular, i18n).toLowerCase()}`}\n                collectionSlugs={[folderCollectionSlug]}\n                key=\"create-folder\"\n                onCreateSuccess={onCreateSuccess}\n                slugPrefix=\"create-new-folder-from-drawer--no-results\"\n              />,\n            ]}\n            Message={\n              <p>\n                {i18n.t('general:noResults', {\n                  label: `${getTranslation(folderCollectionConfig.labels?.plural, i18n)}`,\n                })}\n              </p>\n            }\n          />\n        )}\n      </DrawerContentContainer>\n\n      {!skipConfirmModal && (\n        <ConfirmationModal\n          body={\n            <ConfirmationMessage\n              action={props.action}\n              count={count}\n              fromFolderName={fromFolderName}\n              title={props.action === 'moveItemToFolder' ? props.title : undefined}\n              toFolderName={getSelectedFolder().name}\n            />\n          }\n          confirmingLabel={t('general:moving')}\n          confirmLabel={t('general:move')}\n          heading={t('general:confirmMove')}\n          modalSlug={confirmModalSlug}\n          onConfirm={onConfirmMove}\n        />\n      )}\n    </>\n  )\n}\n\nfunction DrawerHeading(\n  props: { count?: number } & ActionProps & Pick<MoveToFolderDrawerProps, 'fromFolderName'>,\n): string {\n  const { t } = useTranslation()\n\n  switch (props.action) {\n    case 'moveItemToFolder':\n      // moving current folder from list view actions menu\n      // or moving item from edit view\n      if (props.fromFolderName) {\n        // move from folder\n        return t('folder:movingFromFolder', {\n          fromFolder: props.fromFolderName,\n          title: props.title,\n        })\n      } else {\n        // move from root\n        return t('folder:selectFolderForItem', {\n          title: props.title,\n        })\n      }\n\n    case 'moveItemsToFolder':\n      if (props.fromFolderName) {\n        // move from folder\n        return t('folder:movingFromFolder', {\n          fromFolder: props.fromFolderName,\n          title: `${props.count} ${props.count > 1 ? t('general:items') : t('general:item')}`,\n        })\n      } else {\n        // move from root\n        return t('folder:selectFolderForItem', {\n          title: `${props.count} ${props.count > 1 ? t('general:items') : t('general:item')}`,\n        })\n      }\n  }\n}\n\nfunction ConfirmationMessage(\n  props: { count?: number; toFolderName?: string } & ActionProps &\n    Pick<MoveToFolderDrawerProps, 'fromFolderName'>,\n) {\n  const { t } = useTranslation()\n\n  switch (props.action) {\n    case 'moveItemToFolder':\n      // moving current folder from list view actions menu\n      // or moving item from edit view\n      if (props.toFolderName) {\n        // move to destination\n        // You are about to move {{title}} to {{toFolder}}. Are you sure?\n        return (\n          <Translation\n            elements={{\n              1: ({ children }) => <strong>{children}</strong>,\n              2: ({ children }) => <strong>{children}</strong>,\n            }}\n            i18nKey=\"folder:moveItemToFolderConfirmation\"\n            t={t}\n            variables={{\n              title: props.title,\n              toFolder: props.toFolderName,\n            }}\n          />\n        )\n      } else {\n        // move to root\n        // You are about to move {{title}} to the root folder. Are you sure?\n        return (\n          <Translation\n            elements={{\n              1: ({ children }) => <strong>{children}</strong>,\n            }}\n            i18nKey=\"folder:moveItemToRootConfirmation\"\n            t={t}\n            variables={{\n              title: props.title,\n            }}\n          />\n        )\n      }\n\n    case 'moveItemsToFolder':\n      // moving many (documents/folders) from list view\n      if (props.toFolderName) {\n        // move to destination\n        // You are about to move {{count}} {{label}} to {{toFolder}}. Are you sure?\n        return (\n          <Translation\n            elements={{\n              1: ({ children }) => <strong>{children}</strong>,\n              2: ({ children }) => <strong>{children}</strong>,\n            }}\n            i18nKey=\"folder:moveItemsToFolderConfirmation\"\n            t={t}\n            variables={{\n              count: props.count,\n              label: props.count > 1 ? t('general:items') : t('general:item'),\n              toFolder: props.toFolderName,\n            }}\n          />\n        )\n      } else {\n        // move to root\n        // You are about to move {{count}} {{label}} to the root folder. Are you sure?\n        return (\n          <Translation\n            elements={{\n              1: ({ children }) => <strong>{children}</strong>,\n            }}\n            i18nKey=\"folder:moveItemsToRootConfirmation\"\n            t={t}\n            variables={{\n              count: props.count,\n              label: props.count > 1 ? t('general:items') : t('general:item'),\n            }}\n          />\n        )\n      }\n  }\n}\n"],"mappings":"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","ignoreList":[]}