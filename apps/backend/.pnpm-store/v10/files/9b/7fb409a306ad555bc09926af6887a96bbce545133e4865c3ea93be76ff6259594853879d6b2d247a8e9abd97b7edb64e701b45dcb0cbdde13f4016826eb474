{"version":3,"sources":["../src/plugin.ts"],"sourcesContent":["import type { Config, Payload } from 'payload'\n\nimport type { PluginOptions } from './types.js'\n\nimport { payloadCloudEmail } from './email.js'\nimport { getAfterDeleteHook } from './hooks/afterDelete.js'\nimport { getBeforeChangeHook } from './hooks/beforeChange.js'\nimport {\n  getCacheUploadsAfterChangeHook,\n  getCacheUploadsAfterDeleteHook,\n} from './hooks/uploadCache.js'\nimport { getStaticHandler } from './staticHandler.js'\n\nexport const generateRandomString = (): string => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  return Array.from({ length: 24 }, () => chars[Math.floor(Math.random() * chars.length)]).join('')\n}\n\nconst DEFAULT_CRON = '* * * * *'\nconst DEFAULT_LIMIT = 10\nconst DEFAULT_CRON_JOB = {\n  cron: DEFAULT_CRON,\n  limit: DEFAULT_LIMIT,\n  queue: 'default',\n}\n\nexport const payloadCloudPlugin =\n  (pluginOptions?: PluginOptions) =>\n  async (incomingConfig: Config): Promise<Config> => {\n    let config = { ...incomingConfig }\n\n    if (process.env.PAYLOAD_CLOUD !== 'true') {\n      return config\n    }\n\n    const cachingEnabled =\n      pluginOptions?.uploadCaching !== false && !!process.env.PAYLOAD_CLOUD_CACHE_KEY\n\n    const apiEndpoint = pluginOptions?.endpoint || 'https://cloud-api.payloadcms.com'\n\n    // Configure cloud storage\n    if (pluginOptions?.storage !== false) {\n      config = {\n        ...config,\n        collections: (config.collections || []).map((collection) => {\n          if (collection.upload) {\n            return {\n              ...collection,\n              hooks: {\n                ...(collection.hooks || {}),\n                afterChange: [\n                  ...(collection.hooks?.afterChange || []),\n                  ...(cachingEnabled\n                    ? [getCacheUploadsAfterChangeHook({ endpoint: apiEndpoint })]\n                    : []),\n                ],\n                afterDelete: [\n                  ...(collection.hooks?.afterDelete || []),\n                  getAfterDeleteHook({ collection }),\n                  ...(cachingEnabled\n                    ? [getCacheUploadsAfterDeleteHook({ endpoint: apiEndpoint })]\n                    : []),\n                ],\n                beforeChange: [\n                  ...(collection.hooks?.beforeChange || []),\n                  getBeforeChangeHook({ collection }),\n                ],\n              },\n              upload: {\n                ...(typeof collection.upload === 'object' ? collection.upload : {}),\n                disableLocalStorage: true,\n                handlers: [\n                  ...(typeof collection.upload === 'object' &&\n                  Array.isArray(collection.upload.handlers)\n                    ? collection.upload.handlers\n                    : []),\n                  getStaticHandler({\n                    cachingOptions: pluginOptions?.uploadCaching,\n                    collection,\n                    debug: pluginOptions?.debug,\n                  }),\n                ],\n              },\n            }\n          }\n\n          return collection\n        }),\n        upload: {\n          ...(config.upload || {}),\n          useTempFiles: true,\n        },\n      }\n    }\n\n    // Configure cloud email\n    const apiKey = process.env.PAYLOAD_CLOUD_EMAIL_API_KEY\n    const defaultDomain = process.env.PAYLOAD_CLOUD_DEFAULT_DOMAIN\n    if (pluginOptions?.email !== false && apiKey && defaultDomain) {\n      config.email = await payloadCloudEmail({\n        apiKey,\n        config,\n        defaultDomain,\n        defaultFromAddress: pluginOptions?.email?.defaultFromAddress,\n        defaultFromName: pluginOptions?.email?.defaultFromName,\n        skipVerify: pluginOptions?.email?.skipVerify,\n      })\n    }\n\n    // We make sure to only run cronjobs on one instance using a instance identifier stored in a global.\n    config.globals = [\n      ...(config.globals || []),\n      {\n        slug: 'payload-cloud-instance',\n        admin: {\n          hidden: true,\n        },\n        fields: [\n          {\n            name: 'instance',\n            type: 'text',\n            required: true,\n          },\n        ],\n      },\n    ]\n\n    if (pluginOptions?.enableAutoRun === false) {\n      return config\n    }\n\n    const oldAutoRunCopy = config.jobs?.autoRun ?? []\n\n    const hasExistingAutorun = Boolean(config.jobs?.autoRun)\n\n    const newShouldAutoRun = async (payload: Payload) => {\n      if (process.env.PAYLOAD_CLOUD_JOBS_INSTANCE) {\n        const retrievedGlobal = await payload.findGlobal({\n          slug: 'payload-cloud-instance',\n        })\n\n        if (retrievedGlobal.instance === process.env.PAYLOAD_CLOUD_JOBS_INSTANCE) {\n          return true\n        } else {\n          process.env.PAYLOAD_CLOUD_JOBS_INSTANCE = ''\n        }\n      }\n\n      return false\n    }\n\n    if (!config.jobs?.shouldAutoRun) {\n      ;(config.jobs ??= {}).shouldAutoRun = newShouldAutoRun\n    }\n\n    const newAutoRun = async (payload: Payload) => {\n      const instance = generateRandomString()\n\n      process.env.PAYLOAD_CLOUD_JOBS_INSTANCE = instance\n\n      await payload.updateGlobal({\n        slug: 'payload-cloud-instance',\n        data: {\n          instance,\n        },\n      })\n\n      if (!hasExistingAutorun) {\n        return [DEFAULT_CRON_JOB]\n      }\n\n      return typeof oldAutoRunCopy === 'function' ? await oldAutoRunCopy(payload) : oldAutoRunCopy\n    }\n\n    config.jobs.autoRun = newAutoRun\n\n    return config\n  }\n"],"names":["payloadCloudEmail","getAfterDeleteHook","getBeforeChangeHook","getCacheUploadsAfterChangeHook","getCacheUploadsAfterDeleteHook","getStaticHandler","generateRandomString","chars","Array","from","length","Math","floor","random","join","DEFAULT_CRON","DEFAULT_LIMIT","DEFAULT_CRON_JOB","cron","limit","queue","payloadCloudPlugin","pluginOptions","incomingConfig","config","process","env","PAYLOAD_CLOUD","cachingEnabled","uploadCaching","PAYLOAD_CLOUD_CACHE_KEY","apiEndpoint","endpoint","storage","collections","map","collection","upload","hooks","afterChange","afterDelete","beforeChange","disableLocalStorage","handlers","isArray","cachingOptions","debug","useTempFiles","apiKey","PAYLOAD_CLOUD_EMAIL_API_KEY","defaultDomain","PAYLOAD_CLOUD_DEFAULT_DOMAIN","email","defaultFromAddress","defaultFromName","skipVerify","globals","slug","admin","hidden","fields","name","type","required","enableAutoRun","oldAutoRunCopy","jobs","autoRun","hasExistingAutorun","Boolean","newShouldAutoRun","payload","PAYLOAD_CLOUD_JOBS_INSTANCE","retrievedGlobal","findGlobal","instance","shouldAutoRun","newAutoRun","updateGlobal","data"],"mappings":"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"}