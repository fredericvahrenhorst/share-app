{"version":3,"file":"countChangedFields.js","names":["fieldShouldBeLocalized","groupHasName","fieldHasChanges","getFieldsForRowComparison","countChangedFields","comparison","config","fields","locales","parentIsLocalized","version","count","forEach","field","name","fieldType","type","locale","comparisonRows","versionRows","countChangedFieldsInRows","localized","tabs","tab","_exhaustiveCheck","Error","String","i","comparisonRow","versionRow","rowFields","baseVersionField","path","schemaPath","row"],"sources":["../../../../../src/views/Version/RenderFieldsToDiff/utilities/countChangedFields.ts"],"sourcesContent":["import type { ArrayFieldClient, BlocksFieldClient, ClientConfig, ClientField } from 'payload'\n\nimport { fieldShouldBeLocalized, groupHasName } from 'payload/shared'\n\nimport { fieldHasChanges } from './fieldHasChanges.js'\nimport { getFieldsForRowComparison } from './getFieldsForRowComparison.js'\n\ntype Args = {\n  comparison: unknown\n  config: ClientConfig\n  fields: ClientField[]\n  locales: string[] | undefined\n  parentIsLocalized: boolean\n  version: unknown\n}\n\n/**\n * Recursively counts the number of changed fields between comparison and\n * version data for a given set of fields.\n */\nexport function countChangedFields({\n  comparison,\n  config,\n  fields,\n  locales,\n  parentIsLocalized,\n  version,\n}: Args) {\n  let count = 0\n\n  fields.forEach((field) => {\n    // Don't count the id field since it is not displayed in the UI\n    if ('name' in field && field.name === 'id') {\n      return\n    }\n    const fieldType = field.type\n    switch (fieldType) {\n      // Iterable fields are arrays and blocks fields. We iterate over each row and\n      // count the number of changed fields in each.\n      case 'array':\n      case 'blocks': {\n        if (locales && fieldShouldBeLocalized({ field, parentIsLocalized })) {\n          locales.forEach((locale) => {\n            const comparisonRows = comparison?.[field.name]?.[locale] ?? []\n            const versionRows = version?.[field.name]?.[locale] ?? []\n            count += countChangedFieldsInRows({\n              comparisonRows,\n              config,\n              field,\n              locales,\n              parentIsLocalized: parentIsLocalized || field.localized,\n              versionRows,\n            })\n          })\n        } else {\n          const comparisonRows = comparison?.[field.name] ?? []\n          const versionRows = version?.[field.name] ?? []\n          count += countChangedFieldsInRows({\n            comparisonRows,\n            config,\n            field,\n            locales,\n            parentIsLocalized: parentIsLocalized || field.localized,\n            versionRows,\n          })\n        }\n        break\n      }\n\n      // Regular fields without nested fields.\n      case 'checkbox':\n      case 'code':\n      case 'date':\n      case 'email':\n      case 'join':\n      case 'json':\n      case 'number':\n      case 'point':\n      case 'radio':\n      case 'relationship':\n      case 'richText':\n      case 'select':\n      case 'text':\n      case 'textarea':\n      case 'upload': {\n        // Fields that have a name and contain data. We can just check if the data has changed.\n        if (locales && fieldShouldBeLocalized({ field, parentIsLocalized })) {\n          locales.forEach((locale) => {\n            if (\n              fieldHasChanges(version?.[field.name]?.[locale], comparison?.[field.name]?.[locale])\n            ) {\n              count++\n            }\n          })\n        } else if (fieldHasChanges(version?.[field.name], comparison?.[field.name])) {\n          count++\n        }\n        break\n      }\n      // Fields that have nested fields, but don't nest their fields' data.\n      case 'collapsible':\n      case 'row': {\n        count += countChangedFields({\n          comparison,\n          config,\n          fields: field.fields,\n          locales,\n          parentIsLocalized: parentIsLocalized || field.localized,\n          version,\n        })\n\n        break\n      }\n\n      // Fields that have nested fields and nest their fields' data.\n      case 'group': {\n        if (groupHasName(field)) {\n          if (locales && fieldShouldBeLocalized({ field, parentIsLocalized })) {\n            locales.forEach((locale) => {\n              count += countChangedFields({\n                comparison: comparison?.[field.name]?.[locale],\n                config,\n                fields: field.fields,\n                locales,\n                parentIsLocalized: parentIsLocalized || field.localized,\n                version: version?.[field.name]?.[locale],\n              })\n            })\n          } else {\n            count += countChangedFields({\n              comparison: comparison?.[field.name],\n              config,\n              fields: field.fields,\n              locales,\n              parentIsLocalized: parentIsLocalized || field.localized,\n              version: version?.[field.name],\n            })\n          }\n        } else {\n          // Unnamed group field: data is NOT nested under `field.name`\n          count += countChangedFields({\n            comparison,\n            config,\n            fields: field.fields,\n            locales,\n            parentIsLocalized: parentIsLocalized || field.localized,\n            version,\n          })\n        }\n        break\n      }\n\n      // Each tab in a tabs field has nested fields. The fields data may be\n      // nested or not depending on the existence of a name property.\n      case 'tabs': {\n        field.tabs.forEach((tab) => {\n          if ('name' in tab && locales && tab.localized) {\n            // Named localized tab\n            locales.forEach((locale) => {\n              count += countChangedFields({\n                comparison: comparison?.[tab.name]?.[locale],\n                config,\n                fields: tab.fields,\n                locales,\n                parentIsLocalized: parentIsLocalized || tab.localized,\n                version: version?.[tab.name]?.[locale],\n              })\n            })\n          } else if ('name' in tab) {\n            // Named tab\n            count += countChangedFields({\n              comparison: comparison?.[tab.name],\n              config,\n              fields: tab.fields,\n              locales,\n              parentIsLocalized: parentIsLocalized || tab.localized,\n              version: version?.[tab.name],\n            })\n          } else {\n            // Unnamed tab\n            count += countChangedFields({\n              comparison,\n              config,\n              fields: tab.fields,\n              locales,\n              parentIsLocalized: parentIsLocalized || tab.localized,\n              version,\n            })\n          }\n        })\n        break\n      }\n\n      // UI fields don't have data and are not displayed in the version view\n      // so we can ignore them.\n      case 'ui': {\n        break\n      }\n\n      default: {\n        const _exhaustiveCheck: never = fieldType\n        throw new Error(`Unexpected field.type in countChangedFields : ${String(fieldType)}`)\n      }\n    }\n  })\n\n  return count\n}\n\ntype countChangedFieldsInRowsArgs = {\n  comparisonRows: unknown[]\n  config: ClientConfig\n  field: ArrayFieldClient | BlocksFieldClient\n  locales: string[] | undefined\n  parentIsLocalized: boolean\n  versionRows: unknown[]\n}\n\nexport function countChangedFieldsInRows({\n  comparisonRows = [],\n  config,\n  field,\n  locales,\n  parentIsLocalized,\n  versionRows = [],\n}: countChangedFieldsInRowsArgs) {\n  let count = 0\n  let i = 0\n\n  while (comparisonRows[i] || versionRows[i]) {\n    const comparisonRow = comparisonRows?.[i] || {}\n    const versionRow = versionRows?.[i] || {}\n\n    const { fields: rowFields } = getFieldsForRowComparison({\n      baseVersionField: { type: 'text', fields: [], path: '', schemaPath: '' }, // Doesn't matter, as we don't need the versionFields output here\n      comparisonRow,\n      config,\n      field,\n      row: i,\n      versionRow,\n    })\n\n    count += countChangedFields({\n      comparison: comparisonRow,\n      config,\n      fields: rowFields,\n      locales,\n      parentIsLocalized: parentIsLocalized || field.localized,\n      version: versionRow,\n    })\n\n    i++\n  }\n  return count\n}\n"],"mappings":"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","ignoreList":[]}