{"version":3,"sources":["../src/types.ts"],"sourcesContent":["import type {\n  CollectionConfig,\n  Config,\n  FileData,\n  PayloadRequest,\n  TypeWithID,\n  UploadCollectionSlug,\n} from 'payload'\n\nexport interface File {\n  buffer: Buffer\n  filename: string\n  filesize: number\n  mimeType: string\n  tempFilePath?: string\n}\n\nexport type HandleUpload = (args: {\n  collection: CollectionConfig\n  data: any\n  file: File\n  req: PayloadRequest\n}) => Promise<void> | void\n\nexport interface TypeWithPrefix {\n  prefix?: string\n}\n\nexport type HandleDelete = (args: {\n  collection: CollectionConfig\n  doc: FileData & TypeWithID & TypeWithPrefix\n  filename: string\n  req: PayloadRequest\n}) => Promise<void> | void\n\nexport type GenerateURL = (args: {\n  collection: CollectionConfig\n  filename: string\n  prefix?: string\n}) => Promise<string> | string\n\nexport type StaticHandler = (\n  req: PayloadRequest,\n  args: { params: { collection: string; filename: string } },\n) => Promise<Response> | Promise<void> | Response | void\n\nexport interface PayloadCloudEmailOptions {\n  apiKey: string\n  config: Config\n  defaultDomain: string\n  defaultFromAddress?: string\n  defaultFromName?: string\n  skipVerify?: boolean\n}\n\nexport interface PluginOptions {\n  /**\n   * Enable additional debug logging\n   *\n   * @default false\n   */\n  debug?: boolean\n\n  /** Payload Cloud Email\n   * @default true\n   */\n  email?:\n    | {\n        defaultFromAddress: string\n        defaultFromName: string\n        skipVerify?: boolean\n      }\n    | false\n\n  /**\n   *\n   * Configures whether cron jobs defined in config.jobs.autoRun will be run or not\n   *\n   * @default true\n   */\n  enableAutoRun?: boolean\n\n  /**\n   * Payload Cloud API endpoint\n   *\n   * @internal Endpoint override for developement\n   */\n  endpoint?: string\n\n  /** Payload Cloud Storage\n   * @default true\n   */\n  storage?: false\n\n  /**\n   * Upload caching. Defaults to 24 hours for all collections.\n   *\n   * Optionally configure caching per collection\n   *\n   * ```ts\n   * {\n   *   collSlug1: {\n   *    maxAge: 3600 // Custom value in seconds\n   *   },\n   *   collSlug2: {\n   *     enabled: false // Disable caching for this collection\n   *   }\n   * }\n   * ```\n   *\n   * @default true\n   */\n\n  uploadCaching?:\n    | {\n        /**\n         * Caching configuration per-collection\n         */\n        collections?: Partial<Record<UploadCollectionSlug, CollectionCachingConfig>>\n        /** Caching in seconds override for all collections\n         * @default 86400 (24 hours)\n         */\n        maxAge?: number\n      }\n    | false\n}\n\nexport type CollectionCachingConfig = {\n  /**\n   * Enable/disable caching for this collection\n   *\n   * @default true\n   */\n  enabled?: boolean\n  /** Caching in seconds override for this collection\n   * @default 86400 (24 hours)\n   */\n  maxAge?: number\n}\n"],"names":[],"mappings":"AA+HA,WAWC"}