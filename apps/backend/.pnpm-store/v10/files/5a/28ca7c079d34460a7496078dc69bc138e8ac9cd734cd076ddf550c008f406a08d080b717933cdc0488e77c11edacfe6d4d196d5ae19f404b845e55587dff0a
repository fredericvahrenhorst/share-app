{"version":3,"file":"index.js","names":["c","_c","getTranslation","extractID","React","DocumentIcon","useConfig","useFolder","useTranslation","formatDate","ColoredFolderIcon","DraggableTableRow","SimpleTable","TableHeader","baseClass","FolderFileTable","t0","$","showRelationCell","t1","undefined","documents","focusedRowIndex","isDragging","onItemClick","onItemKeyPress","selectedItemKeys","subfolders","config","i18n","t","t2","map","collections","forEach","collection","slug","labels","singular","relationToMap","useState","t3","columnsToShow","name","label","push","columns","t4","t5","subfolder","rowIndex","itemKey","relationTo","value","subfolderID","_jsx","t6","index","name_0","cellValue","_folderOrDocumentTitle","pattern","admin","dateFormat","_jsxs","className","children","disabled","has","dragData","id","type","isDroppable","isFocused","isSelected","isSelecting","size","onClick","event","item","onKeyDown","event_0","length","document","unadjustedIndex","itemKey_0","relationTo_0","value_0","documentID","rowIndex_0","t7","index_0","name_1","cellValue_0","event_1","event_2","headerCells","_temp","tableRows"],"sources":["../../../../src/elements/FolderView/FolderFileTable/index.tsx"],"sourcesContent":["'use client'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { extractID } from 'payload/shared'\nimport React from 'react'\n\nimport { DocumentIcon } from '../../../icons/Document/index.js'\nimport { useConfig } from '../../../providers/Config/index.js'\nimport { useFolder } from '../../../providers/Folders/index.js'\nimport { useTranslation } from '../../../providers/Translation/index.js'\nimport { formatDate } from '../../../utilities/formatDocTitle/formatDateTitle.js'\nimport { ColoredFolderIcon } from '../ColoredFolderIcon/index.js'\nimport { DraggableTableRow } from '../DraggableTableRow/index.js'\nimport { SimpleTable, TableHeader } from '../SimpleTable/index.js'\nimport './index.scss'\n\nconst baseClass = 'folder-file-table'\n\ntype Props = {\n  showRelationCell?: boolean\n}\n\nexport function FolderFileTable({ showRelationCell = true }: Props) {\n  const {\n    documents,\n    focusedRowIndex,\n    isDragging,\n    onItemClick,\n    onItemKeyPress,\n    selectedItemKeys,\n    subfolders,\n  } = useFolder()\n  const { config } = useConfig()\n  const { i18n, t } = useTranslation()\n\n  const [relationToMap] = React.useState(() => {\n    const map: Record<string, string> = {}\n    config.collections.forEach((collection) => {\n      map[collection.slug] = getTranslation(collection.labels?.singular, i18n)\n    })\n    return map\n  })\n\n  const [columns] = React.useState(() => {\n    const columnsToShow = [\n      {\n        name: 'name',\n        label: t('general:name'),\n      },\n      {\n        name: 'createdAt',\n        label: t('general:createdAt'),\n      },\n      {\n        name: 'updatedAt',\n        label: t('general:updatedAt'),\n      },\n    ]\n\n    if (showRelationCell) {\n      columnsToShow.push({\n        name: 'type',\n        label: t('version:type'),\n      })\n    }\n\n    return columnsToShow\n  })\n\n  return (\n    <SimpleTable\n      headerCells={columns.map(({ name, label }) => (\n        <TableHeader key={name}>{label}</TableHeader>\n      ))}\n      tableRows={[\n        ...subfolders.map((subfolder, rowIndex) => {\n          const { itemKey, relationTo, value } = subfolder\n          const subfolderID = extractID(value)\n\n          return (\n            <DraggableTableRow\n              columns={columns.map(({ name }, index) => {\n                let cellValue: React.ReactNode = '—'\n                if (name === 'name' && value._folderOrDocumentTitle !== undefined) {\n                  cellValue = value._folderOrDocumentTitle\n                }\n\n                if ((name === 'createdAt' || name === 'updatedAt') && value[name]) {\n                  cellValue = formatDate({\n                    date: value[name],\n                    i18n,\n                    pattern: config.admin.dateFormat,\n                  })\n                }\n\n                if (name === 'type') {\n                  cellValue = relationToMap[relationTo] || relationTo\n                }\n\n                if (index === 0) {\n                  return (\n                    <span className={`${baseClass}__cell-with-icon`} key={`${itemKey}-${name}`}>\n                      <ColoredFolderIcon />\n                      {cellValue}\n                    </span>\n                  )\n                } else {\n                  return cellValue\n                }\n              })}\n              disabled={isDragging && selectedItemKeys?.has(itemKey)}\n              dragData={{\n                id: subfolderID,\n                type: 'folder',\n              }}\n              id={subfolderID}\n              isDroppable\n              isFocused={focusedRowIndex === rowIndex}\n              isSelected={selectedItemKeys.has(itemKey)}\n              isSelecting={selectedItemKeys.size > 0}\n              itemKey={itemKey}\n              key={`${rowIndex}-${itemKey}`}\n              onClick={(event) => {\n                void onItemClick({\n                  event,\n                  index: rowIndex,\n                  item: subfolder,\n                })\n              }}\n              onKeyDown={(event) => {\n                void onItemKeyPress({\n                  event,\n                  index: rowIndex,\n                  item: subfolder,\n                })\n              }}\n            />\n          )\n        }),\n\n        ...documents.map((document, unadjustedIndex) => {\n          const { itemKey, relationTo, value } = document\n          const documentID = extractID(value)\n          const rowIndex = unadjustedIndex + subfolders.length\n\n          return (\n            <DraggableTableRow\n              columns={columns.map(({ name }, index) => {\n                let cellValue: React.ReactNode = '—'\n                if (name === 'name' && value._folderOrDocumentTitle !== undefined) {\n                  cellValue = value._folderOrDocumentTitle\n                }\n\n                if ((name === 'createdAt' || name === 'updatedAt') && value[name]) {\n                  cellValue = formatDate({\n                    date: value[name],\n                    i18n,\n                    pattern: config.admin.dateFormat,\n                  })\n                }\n\n                if (name === 'type') {\n                  cellValue = relationToMap[relationTo] || relationTo\n                }\n\n                if (index === 0) {\n                  return (\n                    <span className={`${baseClass}__cell-with-icon`} key={`${itemKey}-${name}`}>\n                      <DocumentIcon />\n                      {cellValue}\n                    </span>\n                  )\n                } else {\n                  return cellValue\n                }\n              })}\n              disabled={isDragging || selectedItemKeys?.has(itemKey)}\n              dragData={{\n                id: documentID,\n                type: 'document',\n              }}\n              id={documentID}\n              isFocused={focusedRowIndex === rowIndex}\n              isSelected={selectedItemKeys.has(itemKey)}\n              isSelecting={selectedItemKeys.size > 0}\n              itemKey={itemKey}\n              key={`${rowIndex}-${itemKey}`}\n              onClick={(event) => {\n                void onItemClick({\n                  event,\n                  index: rowIndex,\n                  item: document,\n                })\n              }}\n              onKeyDown={(event) => {\n                void onItemKeyPress({\n                  event,\n                  index: rowIndex,\n                  item: document,\n                })\n              }}\n            />\n          )\n        }),\n      ]}\n    />\n  )\n}\n"],"mappings":"AAAA;;AAAA,SAAAA,CAAA,IAAAC,EAAA;;AAEA,SAASC,cAAc,QAAQ;AAC/B,SAASC,SAAS,QAAQ;AAC1B,OAAOC,KAAA,MAAW;AAElB,SAASC,YAAY,QAAQ;AAC7B,SAASC,SAAS,QAAQ;AAC1B,SAASC,SAAS,QAAQ;AAC1B,SAASC,cAAc,QAAQ;AAC/B,SAASC,UAAU,QAAQ;AAC3B,SAASC,iBAAiB,QAAQ;AAClC,SAASC,iBAAiB,QAAQ;AAClC,SAASC,WAAW,EAAEC,WAAW,QAAQ;AACzC,OAAO;AAEP,MAAMC,SAAA,GAAY;AAMlB,OAAO,SAAAC,gBAAAC,EAAA;EAAA,MAAAC,CAAA,GAAAhB,EAAA;EAAyB;IAAAiB,gBAAA,EAAAC;EAAA,IAAAH,EAAkC;EAAhC,MAAAE,gBAAA,GAAAC,EAAuB,KAAAC,SAAA,UAAvBD,EAAuB;EACvD;IAAAE,SAAA;IAAAC,eAAA;IAAAC,UAAA;IAAAC,WAAA;IAAAC,cAAA;IAAAC,gBAAA;IAAAC;EAAA,IAQIpB,SAAA;EACJ;IAAAqB;EAAA,IAAmBtB,SAAA;EACnB;IAAAuB,IAAA;IAAAC;EAAA,IAAoBtB,cAAA;EAAA,IAAAuB,EAAA;EAAA,IAAAd,CAAA,QAAAW,MAAA,IAAAX,CAAA,QAAAY,IAAA;IAEmBE,EAAA,GAAAA,CAAA;MACrC,MAAAC,GAAA;MACAJ,MAAA,CAAAK,WAAA,CAAAC,OAAA,CAAAC,UAAA;QACEH,GAAG,CAACG,UAAA,CAAAC,IAAA,IAAmBlC,cAAA,CAAeiC,UAAA,CAAAE,MAAA,EAAAC,QAAA,EAA6BT,IAAA;MAAA,CACrE;MAAA,OACOG,GAAA;IAAA;IACTf,CAAA,MAAAW,MAAA;IAAAX,CAAA,MAAAY,IAAA;IAAAZ,CAAA,MAAAc,EAAA;EAAA;IAAAA,EAAA,GAAAd,CAAA;EAAA;EANA,OAAAsB,aAAA,IAAwBnC,KAAA,CAAAoC,QAAA,CAAeT,EAMvC;EAAA,IAAAU,EAAA;EAAA,IAAAxB,CAAA,QAAAC,gBAAA,IAAAD,CAAA,QAAAa,CAAA;IAEiCW,EAAA,GAAAA,CAAA;MAC/B,MAAAC,aAAA;QAAAC,IAAA,EAEU;QAAAC,KAAA,EACCd,CAAA,CAAE;MAAA;QAAAa,IAAA,EAGH;QAAAC,KAAA,EACCd,CAAA,CAAE;MAAA;QAAAa,IAAA,EAGH;QAAAC,KAAA,EACCd,CAAA,CAAE;MAAA;MAEZ,IAEGZ,gBAAA;QACFwB,aAAA,CAAAG,IAAA;UAAAF,IAAA,EACQ;UAAAC,KAAA,EACCd,CAAA,CAAE;QAAA,CACX;MAAA;MAAA,OAGKY,aAAA;IAAA;IACTzB,CAAA,MAAAC,gBAAA;IAAAD,CAAA,MAAAa,CAAA;IAAAb,CAAA,MAAAwB,EAAA;EAAA;IAAAA,EAAA,GAAAxB,CAAA;EAAA;EAxBA,OAAA6B,OAAA,IAAkB1C,KAAA,CAAAoC,QAAA,CAAeC,EAwBjC;EAAA,IAAAM,EAAA;EAAA,IAAA9B,CAAA,QAAA6B,OAAA,IAAA7B,CAAA,QAAAW,MAAA,IAAAX,CAAA,QAAAI,SAAA,IAAAJ,CAAA,QAAAK,eAAA,IAAAL,CAAA,SAAAY,IAAA,IAAAZ,CAAA,SAAAM,UAAA,IAAAN,CAAA,SAAAO,WAAA,IAAAP,CAAA,SAAAQ,cAAA,IAAAR,CAAA,SAAAsB,aAAA,IAAAtB,CAAA,SAAAS,gBAAA,IAAAT,CAAA,SAAAU,UAAA;IAAA,IAAAqB,EAAA;IAAA,IAAA/B,CAAA,SAAA6B,OAAA,IAAA7B,CAAA,SAAAW,MAAA,IAAAX,CAAA,SAAAK,eAAA,IAAAL,CAAA,SAAAY,IAAA,IAAAZ,CAAA,SAAAM,UAAA,IAAAN,CAAA,SAAAO,WAAA,IAAAP,CAAA,SAAAQ,cAAA,IAAAR,CAAA,SAAAsB,aAAA,IAAAtB,CAAA,SAAAS,gBAAA;MAQwBsB,EAAA,GAAAA,CAAAC,SAAA,EAAAC,QAAA;QAChB;UAAAC,OAAA;UAAAC,UAAA;UAAAC;QAAA,IAAuCJ,SAAA;QACvC,MAAAK,WAAA,GAAoBnD,SAAA,CAAUkD,KAAA;QAAA,OAG5BE,IAAA,CAAA5C,iBAAA;UAAAmC,OAAA,EACWA,OAAA,CAAAd,GAAA,EAAAwB,EAAA,EAAAC,KAAA;YAAa;cAAAd,IAAA,EAAAe;YAAA,IAAAF,EAAQ;YAC5B,IAAAG,SAAA,GAAiC;YAAA,IAC7BhB,MAAA,KAAS,UAAUU,KAAA,CAAAO,sBAAA,KAAAxC,SAAiC;cACtDuC,SAAA,CAAAA,CAAA,CAAYN,KAAA,CAAAO,sBAAA;YAAZ;YAAA,IAGE,CAACjB,MAAA,KAAS,eAAeA,MAAA,KAAS,WAAU,KAAMU,KAAK,CAACV,MAAA,CAAK;cAC/DgB,SAAA,CAAAA,CAAA,CAAYA;gBAAAA,KAAA,CACJN,KAAK,CAACV,MAAA;gBAAAd,IAAA;gBAAAgC,OAAA,EAEHjC,MAAA,CAAAkC,KAAA,CAAAC;cAAA,CACX;YAJA;YAAA,IAOEpB,MAAA,KAAS;cACXgB,SAAA,CAAAA,CAAA,CAAYpB,aAAa,CAACa,UAAA,KAAeA,UAAA;YAAzC;YAAA,IAGEK,KAAA,MAAU;cAAA,OAEVO,KAAA,CAAC;gBAAAC,SAAA,EAAgB,GAAAnD,SAAA,kBAA8B;gBAAAoD,QAAA,GAC7CX,IAAA,CAAA7C,iBAAA,IAAC,GACAiD,SAAA;cAAA,GAFmD,GAAGR,OAAA,IAAWR,MAAA,EAAM;YAAA;cAAA,OAMrEgB,SAAA;YAAA;UAAA,CAEX;UAAAQ,QAAA,EACU5C,UAAA,IAAcG,gBAAA,EAAA0C,GAAA,CAAsBjB,OAAA;UAAAkB,QAAA;YAAAC,EAAA,EAExChB,WAAA;YAAAiB,IAAA,EACE;UAAA;UAAAD,EAAA,EAEJhB,WAAA;UAAAkB,WAAA;UAAAC,SAAA,EAEOnD,eAAA,KAAoB4B,QAAA;UAAAwB,UAAA,EACnBhD,gBAAA,CAAA0C,GAAA,CAAqBjB,OAAA;UAAAwB,WAAA,EACpBjD,gBAAA,CAAAkD,IAAA,IAAwB;UAAAzB,OAAA;UAAA0B,OAAA,EAAAC,KAAA;YAI9BtD,WAAA;cAAAsD,KAAA;cAAArB,KAAA,EAEIP,QAAA;cAAA6B,IAAA,EACD9B;YAAA,CACR;UAAA;UAAA+B,SAAA,EAAAC,OAAA;YAGKxD,cAAA;cAAAqD,KAAA,EACHA,OAAA;cAAArB,KAAA,EACOP,QAAA;cAAA6B,IAAA,EACD9B;YAAA,CACR;UAAA;QAAA,GAbG,GAAGC,QAAA,IAAYC,OAAA,EAAS;MAAA;MAiBnClC,CAAA,OAAA6B,OAAA;MAAA7B,CAAA,OAAAW,MAAA;MAAAX,CAAA,OAAAK,eAAA;MAAAL,CAAA,OAAAY,IAAA;MAAAZ,CAAA,OAAAM,UAAA;MAAAN,CAAA,OAAAO,WAAA;MAAAP,CAAA,OAAAQ,cAAA;MAAAR,CAAA,OAAAsB,aAAA;MAAAtB,CAAA,OAAAS,gBAAA;MAAAT,CAAA,OAAA+B,EAAA;IAAA;MAAAA,EAAA,GAAA/B,CAAA;IAAA;IAAA,IAAAuC,EAAA;IAAA,IAAAvC,CAAA,SAAA6B,OAAA,IAAA7B,CAAA,SAAAW,MAAA,IAAAX,CAAA,SAAAK,eAAA,IAAAL,CAAA,SAAAY,IAAA,IAAAZ,CAAA,SAAAM,UAAA,IAAAN,CAAA,SAAAO,WAAA,IAAAP,CAAA,SAAAQ,cAAA,IAAAR,CAAA,SAAAsB,aAAA,IAAAtB,CAAA,SAAAS,gBAAA,IAAAT,CAAA,SAAAU,UAAA,CAAAuD,MAAA;MAEiB1B,EAAA,GAAAA,CAAA2B,QAAA,EAAAC,eAAA;QACf;UAAAjC,OAAA,EAAAkC,SAAA;UAAAjC,UAAA,EAAAkC,YAAA;UAAAjC,KAAA,EAAAkC;QAAA,IAAuCJ,QAAA;QACvC,MAAAK,UAAA,GAAmBrF,SAAA,CAAUkD,OAAA;QAC7B,MAAAoC,UAAA,GAAiBL,eAAA,GAAkBzD,UAAA,CAAAuD,MAAiB;QAAA,OAGlD3B,IAAA,CAAA5C,iBAAA;UAAAmC,OAAA,EACWA,OAAA,CAAAd,GAAA,EAAA0D,EAAA,EAAAC,OAAA;YAAa;cAAAhD,IAAA,EAAAiD;YAAA,IAAAF,EAAQ;YAC5B,IAAAG,WAAA,GAAiC;YAAA,IAC7BlD,MAAA,KAAS,UAAUU,OAAA,CAAAO,sBAAA,KAAAxC,SAAiC;cACtDuC,WAAA,CAAAA,CAAA,CAAYN,OAAA,CAAAO,sBAAA;YAAZ;YAAA,IAGE,CAACjB,MAAA,KAAS,eAAeA,MAAA,KAAS,WAAU,KAAMU,OAAK,CAACV,MAAA,CAAK;cAC/DgB,WAAA,CAAAA,CAAA,CAAYA;gBAAAA,KAAA,CACJN,OAAK,CAACV,MAAA;gBAAAd,IAAA;gBAAAgC,OAAA,EAEHjC,MAAA,CAAAkC,KAAA,CAAAC;cAAA,CACX;YAJA;YAAA,IAOEpB,MAAA,KAAS;cACXgB,WAAA,CAAAA,CAAA,CAAYpB,aAAa,CAACa,YAAA,KAAeA,YAAA;YAAzC;YAAA,IAGEK,OAAA,MAAU;cAAA,OAEVO,KAAA,CAAC;gBAAAC,SAAA,EAAgB,GAAAnD,SAAA,kBAA8B;gBAAAoD,QAAA,GAC7CX,IAAA,CAAAlD,YAAA,IAAC,GACAsD,WAAA;cAAA,GAFmD,GAAGR,SAAA,IAAWR,MAAA,EAAM;YAAA;cAAA,OAMrEgB,WAAA;YAAA;UAAA,CAEX;UAAAQ,QAAA,EACU5C,UAAA,IAAcG,gBAAA,EAAA0C,GAAA,CAAsBjB,SAAA;UAAAkB,QAAA;YAAAC,EAAA,EAExCkB,UAAA;YAAAjB,IAAA,EACE;UAAA;UAAAD,EAAA,EAEJkB,UAAA;UAAAf,SAAA,EACOnD,eAAA,KAAoB4B,UAAA;UAAAwB,UAAA,EACnBhD,gBAAA,CAAA0C,GAAA,CAAqBjB,SAAA;UAAAwB,WAAA,EACpBjD,gBAAA,CAAAkD,IAAA,IAAwB;UAAAzB,OAAA,EAC5BA,SAAA;UAAA0B,OAAA,EAAAiB,OAAA;YAGFtE,WAAA;cAAAsD,KAAA,EACHA,OAAA;cAAArB,KAAA,EACOP,UAAA;cAAA6B,IAAA,EACDI;YAAA,CACR;UAAA;UAAAH,SAAA,EAAAe,OAAA;YAGKtE,cAAA;cAAAqD,KAAA,EACHA,OAAA;cAAArB,KAAA,EACOP,UAAA;cAAA6B,IAAA,EACDI;YAAA,CACR;UAAA;QAAA,GAbG,GAAGjC,UAAA,IAAYC,SAAA,EAAS;MAAA;MAiBnClC,CAAA,OAAA6B,OAAA;MAAA7B,CAAA,OAAAW,MAAA;MAAAX,CAAA,OAAAK,eAAA;MAAAL,CAAA,OAAAY,IAAA;MAAAZ,CAAA,OAAAM,UAAA;MAAAN,CAAA,OAAAO,WAAA;MAAAP,CAAA,OAAAQ,cAAA;MAAAR,CAAA,OAAAsB,aAAA;MAAAtB,CAAA,OAAAS,gBAAA;MAAAT,CAAA,OAAAU,UAAA,CAAAuD,MAAA;MAAAjE,CAAA,OAAAuC,EAAA;IAAA;MAAAA,EAAA,GAAAvC,CAAA;IAAA;IArIJ8B,EAAA,GAAAQ,IAAA,CAAA3C,WAAA;MAAAoF,WAAA,EACelD,OAAA,CAAAd,GAAA,CAAAiE,KACO;MAAAC,SAAA,MAGfvE,UAAA,CAAAK,GAAA,CAAegB,EA+DlB,MAEG3B,SAAA,CAAAW,GAAA,CAAcwB,EA+DjB;IAAA,C;;;;;;;;;;;;;;;;SArIJT,E;;AAhDG,SAAAkD,MAAAjF,EAAA;EAiDyB;IAAA2B,IAAA;IAAAC;EAAA,IAAA5B,EAAe;EAAA,OACvCuC,IAAA,CAAA1C,WAAA;IAAAqD,QAAA,EAAyBtB;EAAA,GAAPD,IAAA;AAAA","ignoreList":[]}