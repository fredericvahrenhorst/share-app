{"version":3,"sources":["../src/createGlobalVersion.ts"],"sourcesContent":["import { buildVersionGlobalFields, type CreateGlobalVersion } from 'payload'\n\nimport type { MongooseAdapter } from './index.js'\n\nimport { getGlobal } from './utilities/getEntity.js'\nimport { getSession } from './utilities/getSession.js'\nimport { transform } from './utilities/transform.js'\n\nexport const createGlobalVersion: CreateGlobalVersion = async function createGlobalVersion(\n  this: MongooseAdapter,\n  {\n    autosave,\n    createdAt,\n    globalSlug,\n    parent,\n    publishedLocale,\n    req,\n    returning,\n    snapshot,\n    updatedAt,\n    versionData,\n  },\n) {\n  const { globalConfig, Model } = getGlobal({ adapter: this, globalSlug, versions: true })\n\n  const options = {\n    session: await getSession(this, req),\n  }\n\n  const data = {\n    autosave,\n    createdAt,\n    latest: true,\n    parent,\n    publishedLocale,\n    snapshot,\n    updatedAt,\n    version: versionData,\n  }\n\n  const fields = buildVersionGlobalFields(this.payload.config, globalConfig)\n\n  transform({\n    adapter: this,\n    data,\n    fields,\n    operation: 'write',\n  })\n\n  let [doc] = await Model.create([data], options, req)\n\n  await Model.updateMany(\n    {\n      $and: [\n        {\n          _id: {\n            $ne: doc._id,\n          },\n        },\n        {\n          parent: {\n            $eq: parent,\n          },\n        },\n        {\n          latest: {\n            $eq: true,\n          },\n        },\n      ],\n    },\n    { $unset: { latest: 1 } },\n    options,\n  )\n\n  if (returning === false) {\n    return null\n  }\n\n  doc = doc.toObject()\n\n  transform({\n    adapter: this,\n    data: doc,\n    fields,\n    operation: 'read',\n  })\n\n  return doc\n}\n"],"names":["buildVersionGlobalFields","getGlobal","getSession","transform","createGlobalVersion","autosave","createdAt","globalSlug","parent","publishedLocale","req","returning","snapshot","updatedAt","versionData","globalConfig","Model","adapter","versions","options","session","data","latest","version","fields","payload","config","operation","doc","create","updateMany","$and","_id","$ne","$eq","$unset","toObject"],"mappings":"AAAA,SAASA,wBAAwB,QAAkC,UAAS;AAI5E,SAASC,SAAS,QAAQ,2BAA0B;AACpD,SAASC,UAAU,QAAQ,4BAA2B;AACtD,SAASC,SAAS,QAAQ,2BAA0B;AAEpD,OAAO,MAAMC,sBAA2C,eAAeA,oBAErE,EACEC,QAAQ,EACRC,SAAS,EACTC,UAAU,EACVC,MAAM,EACNC,eAAe,EACfC,GAAG,EACHC,SAAS,EACTC,QAAQ,EACRC,SAAS,EACTC,WAAW,EACZ;IAED,MAAM,EAAEC,YAAY,EAAEC,KAAK,EAAE,GAAGf,UAAU;QAAEgB,SAAS,IAAI;QAAEV;QAAYW,UAAU;IAAK;IAEtF,MAAMC,UAAU;QACdC,SAAS,MAAMlB,WAAW,IAAI,EAAEQ;IAClC;IAEA,MAAMW,OAAO;QACXhB;QACAC;QACAgB,QAAQ;QACRd;QACAC;QACAG;QACAC;QACAU,SAAST;IACX;IAEA,MAAMU,SAASxB,yBAAyB,IAAI,CAACyB,OAAO,CAACC,MAAM,EAAEX;IAE7DZ,UAAU;QACRc,SAAS,IAAI;QACbI;QACAG;QACAG,WAAW;IACb;IAEA,IAAI,CAACC,IAAI,GAAG,MAAMZ,MAAMa,MAAM,CAAC;QAACR;KAAK,EAAEF,SAAST;IAEhD,MAAMM,MAAMc,UAAU,CACpB;QACEC,MAAM;YACJ;gBACEC,KAAK;oBACHC,KAAKL,IAAII,GAAG;gBACd;YACF;YACA;gBACExB,QAAQ;oBACN0B,KAAK1B;gBACP;YACF;YACA;gBACEc,QAAQ;oBACNY,KAAK;gBACP;YACF;SACD;IACH,GACA;QAAEC,QAAQ;YAAEb,QAAQ;QAAE;IAAE,GACxBH;IAGF,IAAIR,cAAc,OAAO;QACvB,OAAO;IACT;IAEAiB,MAAMA,IAAIQ,QAAQ;IAElBjC,UAAU;QACRc,SAAS,IAAI;QACbI,MAAMO;QACNJ;QACAG,WAAW;IACb;IAEA,OAAOC;AACT,EAAC"}