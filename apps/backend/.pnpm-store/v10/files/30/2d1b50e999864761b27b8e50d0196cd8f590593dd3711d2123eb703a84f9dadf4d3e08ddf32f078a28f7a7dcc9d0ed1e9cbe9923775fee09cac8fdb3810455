{"version":3,"file":"index.js","names":["DefaultListView","HydrateAuthProvider","ListQueryProvider","RenderServerComponent","renderFilters","renderTable","upsertPreferences","notFound","formatAdminURL","isNumber","mergeListSearchAndWhere","transformColumnsToPreferences","React","Fragment","getDocumentPermissions","renderListViewSlots","resolveAllFilterOptions","renderListView","args","clientConfig","customCellProps","disableBulkDelete","disableBulkEdit","disableQueryPresets","drawerSlug","enableRowSelections","initPageResult","overrideEntityVisibility","params","query","queryFromArgs","searchParams","collectionConfig","slug","collectionSlug","locale","fullLocale","permissions","req","i18n","payload","config","queryFromReq","user","visibleEntities","collections","read","Error","columns","collectionPreferences","key","value","limit","Number","undefined","preset","sort","routes","admin","adminRoute","includes","page","pagination","defaultLimit","defaultSort","where","search","baseListFilter","and","filter","Boolean","queryPreset","queryPresetPermissions","findByID","id","collection","depth","overrideAccess","find","c","data","then","docPermissions","err","logger","error","draft","fallbackLocale","includeLockStatus","clientCollectionConfig","columnState","Table","columnPreferences","docs","orderableFieldName","orderable","useAsTitle","renderedFilters","fields","importMap","resolvedFilterOptions","staticDescription","description","t","newDocumentURL","path","hasCreatePermission","create","serverProps","listPreferences","listSearchableFields","listViewSlots","clientProps","isInDrawer","List","_jsxs","_jsx","modifySearchParams","Component","components","views","list","Fallback","ListView","RenderedList","message","console"],"sources":["../../../src/views/List/index.tsx"],"sourcesContent":["import type {\n  AdminViewServerProps,\n  CollectionPreferences,\n  ColumnPreference,\n  DefaultDocumentIDType,\n  ListQuery,\n  ListViewClientProps,\n  ListViewServerPropsOnly,\n  QueryPreset,\n  SanitizedCollectionPermission,\n  Where,\n} from 'payload'\n\nimport { DefaultListView, HydrateAuthProvider, ListQueryProvider } from '@payloadcms/ui'\nimport { RenderServerComponent } from '@payloadcms/ui/elements/RenderServerComponent'\nimport { renderFilters, renderTable, upsertPreferences } from '@payloadcms/ui/rsc'\nimport { notFound } from 'next/navigation.js'\nimport {\n  formatAdminURL,\n  isNumber,\n  mergeListSearchAndWhere,\n  transformColumnsToPreferences,\n} from 'payload/shared'\nimport React, { Fragment } from 'react'\n\nimport { getDocumentPermissions } from '../Document/getDocumentPermissions.js'\nimport { renderListViewSlots } from './renderListViewSlots.js'\nimport { resolveAllFilterOptions } from './resolveAllFilterOptions.js'\n\ntype RenderListViewArgs = {\n  customCellProps?: Record<string, any>\n  disableBulkDelete?: boolean\n  disableBulkEdit?: boolean\n  disableQueryPresets?: boolean\n  drawerSlug?: string\n  enableRowSelections: boolean\n  overrideEntityVisibility?: boolean\n  query: ListQuery\n  redirectAfterDelete?: boolean\n  redirectAfterDuplicate?: boolean\n} & AdminViewServerProps\n\n/**\n * This function is responsible for rendering\n * the list view on the server for both:\n *  - default list view\n *  - list view within drawers\n */\nexport const renderListView = async (\n  args: RenderListViewArgs,\n): Promise<{\n  List: React.ReactNode\n}> => {\n  const {\n    clientConfig,\n    customCellProps,\n    disableBulkDelete,\n    disableBulkEdit,\n    disableQueryPresets,\n    drawerSlug,\n    enableRowSelections,\n    initPageResult,\n    overrideEntityVisibility,\n    params,\n    query: queryFromArgs,\n    searchParams,\n  } = args\n\n  const {\n    collectionConfig,\n    collectionConfig: { slug: collectionSlug },\n    locale: fullLocale,\n    permissions,\n    req,\n    req: {\n      i18n,\n      locale,\n      payload,\n      payload: { config },\n      query: queryFromReq,\n      user,\n    },\n    visibleEntities,\n  } = initPageResult\n\n  if (!permissions?.collections?.[collectionSlug]?.read) {\n    throw new Error('not-found')\n  }\n\n  const query = queryFromArgs || queryFromReq\n\n  const columns: ColumnPreference[] = transformColumnsToPreferences(\n    query?.columns as ColumnPreference[] | string,\n  )\n\n  /**\n   * @todo: find a pattern to avoid setting preferences on hard navigation, i.e. direct links, page refresh, etc.\n   * This will ensure that prefs are only updated when explicitly set by the user\n   * This could potentially be done by injecting a `sessionID` into the params and comparing it against a session cookie\n   */\n  const collectionPreferences = await upsertPreferences<CollectionPreferences>({\n    key: `collection-${collectionSlug}`,\n    req,\n    value: {\n      columns,\n      limit: isNumber(query?.limit) ? Number(query.limit) : undefined,\n      preset: (query?.preset as DefaultDocumentIDType) || null,\n      sort: query?.sort as string,\n    },\n  })\n\n  const {\n    routes: { admin: adminRoute },\n  } = config\n\n  if (collectionConfig) {\n    if (!visibleEntities.collections.includes(collectionSlug) && !overrideEntityVisibility) {\n      throw new Error('not-found')\n    }\n\n    const page = isNumber(query?.page) ? Number(query.page) : 0\n\n    const limit = collectionPreferences?.limit || collectionConfig.admin.pagination.defaultLimit\n\n    const sort =\n      collectionPreferences?.sort ||\n      (typeof collectionConfig.defaultSort === 'string' ? collectionConfig.defaultSort : undefined)\n\n    let where = mergeListSearchAndWhere({\n      collectionConfig,\n      search: typeof query?.search === 'string' ? query.search : undefined,\n      where: (query?.where as Where) || undefined,\n    })\n\n    if (typeof collectionConfig.admin?.baseListFilter === 'function') {\n      const baseListFilter = await collectionConfig.admin.baseListFilter({\n        limit,\n        page,\n        req,\n        sort,\n      })\n\n      if (baseListFilter) {\n        where = {\n          and: [where, baseListFilter].filter(Boolean),\n        }\n      }\n    }\n\n    let queryPreset: QueryPreset | undefined\n    let queryPresetPermissions: SanitizedCollectionPermission | undefined\n\n    if (collectionPreferences?.preset) {\n      try {\n        queryPreset = (await payload.findByID({\n          id: collectionPreferences?.preset,\n          collection: 'payload-query-presets',\n          depth: 0,\n          overrideAccess: false,\n          user,\n        })) as QueryPreset\n\n        if (queryPreset) {\n          queryPresetPermissions = await getDocumentPermissions({\n            id: queryPreset.id,\n            collectionConfig: config.collections.find((c) => c.slug === 'payload-query-presets'),\n            data: queryPreset,\n            req,\n          })?.then(({ docPermissions }) => docPermissions)\n        }\n      } catch (err) {\n        req.payload.logger.error(`Error fetching query preset or preset permissions: ${err}`)\n      }\n    }\n\n    const data = await payload.find({\n      collection: collectionSlug,\n      depth: 0,\n      draft: true,\n      fallbackLocale: false,\n      includeLockStatus: true,\n      limit,\n      locale,\n      overrideAccess: false,\n      page,\n      req,\n      sort,\n      user,\n      where: where || {},\n    })\n\n    const clientCollectionConfig = clientConfig.collections.find((c) => c.slug === collectionSlug)\n\n    const { columnState, Table } = renderTable({\n      clientCollectionConfig,\n      collectionConfig,\n      columnPreferences: collectionPreferences?.columns,\n      columns,\n      customCellProps,\n      docs: data.docs,\n      drawerSlug,\n      enableRowSelections,\n      i18n: req.i18n,\n      orderableFieldName: collectionConfig.orderable === true ? '_order' : undefined,\n      payload,\n      useAsTitle: collectionConfig.admin.useAsTitle,\n    })\n\n    const renderedFilters = renderFilters(collectionConfig.fields, req.payload.importMap)\n\n    const resolvedFilterOptions = await resolveAllFilterOptions({\n      fields: collectionConfig.fields,\n      req,\n    })\n\n    const staticDescription =\n      typeof collectionConfig.admin.description === 'function'\n        ? collectionConfig.admin.description({ t: i18n.t })\n        : collectionConfig.admin.description\n\n    const newDocumentURL = formatAdminURL({\n      adminRoute,\n      path: `/collections/${collectionSlug}/create`,\n    })\n\n    const hasCreatePermission = permissions?.collections?.[collectionSlug]?.create\n\n    const serverProps: ListViewServerPropsOnly = {\n      collectionConfig,\n      data,\n      i18n,\n      limit,\n      listPreferences: collectionPreferences,\n      listSearchableFields: collectionConfig.admin.listSearchableFields,\n      locale: fullLocale,\n      params,\n      payload,\n      permissions,\n      searchParams,\n      user,\n    }\n\n    const listViewSlots = renderListViewSlots({\n      clientProps: {\n        collectionSlug,\n        hasCreatePermission,\n        newDocumentURL,\n      },\n      collectionConfig,\n      description: staticDescription,\n      payload,\n      serverProps,\n    })\n\n    const isInDrawer = Boolean(drawerSlug)\n\n    return {\n      List: (\n        <Fragment>\n          <HydrateAuthProvider permissions={permissions} />\n          <ListQueryProvider\n            collectionSlug={collectionSlug}\n            columns={transformColumnsToPreferences(columnState)}\n            data={data}\n            defaultLimit={limit}\n            defaultSort={sort}\n            listPreferences={collectionPreferences}\n            modifySearchParams={!isInDrawer}\n            orderableFieldName={collectionConfig.orderable === true ? '_order' : undefined}\n          >\n            {RenderServerComponent({\n              clientProps: {\n                ...listViewSlots,\n                collectionSlug,\n                columnState,\n                disableBulkDelete,\n                disableBulkEdit: collectionConfig.disableBulkEdit ?? disableBulkEdit,\n                disableQueryPresets,\n                enableRowSelections,\n                hasCreatePermission,\n                listPreferences: collectionPreferences,\n                newDocumentURL,\n                queryPreset,\n                queryPresetPermissions,\n                renderedFilters,\n                resolvedFilterOptions,\n                Table,\n              } satisfies ListViewClientProps,\n              Component: collectionConfig?.admin?.components?.views?.list?.Component,\n              Fallback: DefaultListView,\n              importMap: payload.importMap,\n              serverProps,\n            })}\n          </ListQueryProvider>\n        </Fragment>\n      ),\n    }\n  }\n\n  throw new Error('not-found')\n}\n\nexport const ListView: React.FC<RenderListViewArgs> = async (args) => {\n  try {\n    const { List: RenderedList } = await renderListView({ ...args, enableRowSelections: true })\n    return RenderedList\n  } catch (error) {\n    if (error.message === 'not-found') {\n      notFound()\n    } else {\n      console.error(error) // eslint-disable-line no-console\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]}