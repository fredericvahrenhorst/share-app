{"version":3,"file":"ListCreateNewDocInFolderButton.js","names":["c","_c","useModal","getTranslation","React","useConfig","useFolder","useTranslation","Button","DocumentDrawer","useDocumentDrawer","Popup","PopupList","baseClass","ListCreateNewDocInFolderButton","t0","$","buttonLabel","collectionSlugs","onCreateSuccess","slugPrefix","newDocInFolderDrawerSlug","i18n","closeModal","openModal","config","folderCollectionConfig","folderCollectionSlug","folderFieldName","folderID","t1","collectionSlug","FolderDocumentDrawer","t2","closeDrawer","closeFolderDrawer","openDrawer","openFolderDrawer","createCollectionSlug","setCreateCollectionSlug","useState","t3","reduce","acc","collectionConfig","collections","find","t4","slug","push","enabledCollections","length","t5","_jsx","drawerSlug","initialData","onSave","t6","doc","redirectAfterCreate","_jsxs","Fragment","children","buttonStyle","className","el","onClick","size","button","icon","ButtonGroup","map","collection","index","labels","singular","includes","result"],"sources":["../../../../src/elements/ListHeader/TitleActions/ListCreateNewDocInFolderButton.tsx"],"sourcesContent":["'use client'\n\nimport type { ClientCollectionConfig, CollectionSlug } from 'payload'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { getTranslation } from '@payloadcms/translations'\nimport React from 'react'\n\nimport { useConfig } from '../../../providers/Config/index.js'\nimport { useFolder } from '../../../providers/Folders/index.js'\nimport { useTranslation } from '../../../providers/Translation/index.js'\nimport { Button } from '../../Button/index.js'\nimport { DocumentDrawer, useDocumentDrawer } from '../../DocumentDrawer/index.js'\nimport { Popup, PopupList } from '../../Popup/index.js'\n\nconst baseClass = 'create-new-doc-in-folder'\n\nexport function ListCreateNewDocInFolderButton({\n  buttonLabel,\n  collectionSlugs,\n  onCreateSuccess,\n  slugPrefix,\n}: {\n  buttonLabel: string\n  collectionSlugs: CollectionSlug[]\n  onCreateSuccess: (args: {\n    collectionSlug: CollectionSlug\n    doc: Record<string, unknown>\n  }) => Promise<void> | void\n  slugPrefix: string\n}) {\n  const newDocInFolderDrawerSlug = `${slugPrefix}-new-doc-in-folder-drawer`\n  const { i18n } = useTranslation()\n  const { closeModal, openModal } = useModal()\n  const { config } = useConfig()\n  const { folderCollectionConfig, folderCollectionSlug, folderFieldName, folderID } = useFolder()\n  const [FolderDocumentDrawer, , { closeDrawer: closeFolderDrawer, openDrawer: openFolderDrawer }] =\n    useDocumentDrawer({\n      collectionSlug: folderCollectionSlug,\n    })\n  const [createCollectionSlug, setCreateCollectionSlug] = React.useState<string | undefined>()\n  const [enabledCollections] = React.useState<ClientCollectionConfig[]>(() =>\n    collectionSlugs.reduce((acc, collectionSlug) => {\n      const collectionConfig = config.collections.find(({ slug }) => slug === collectionSlug)\n      if (collectionConfig) {\n        acc.push(collectionConfig)\n      }\n      return acc\n    }, []),\n  )\n\n  if (enabledCollections.length === 0) {\n    return null\n  }\n\n  return (\n    <React.Fragment>\n      {enabledCollections.length === 1 ? (\n        // If there is only 1 option, do not render a popup\n        <Button\n          buttonStyle=\"pill\"\n          className={`${baseClass}__button`}\n          el=\"div\"\n          onClick={() => {\n            if (enabledCollections[0].slug === folderCollectionConfig.slug) {\n              openFolderDrawer()\n            } else {\n              setCreateCollectionSlug(enabledCollections[0].slug)\n              openModal(newDocInFolderDrawerSlug)\n            }\n          }}\n          size=\"small\"\n        >\n          {buttonLabel}\n        </Button>\n      ) : (\n        <Popup\n          button={\n            <Button\n              buttonStyle=\"pill\"\n              className={`${baseClass}__popup-button`}\n              el=\"div\"\n              icon=\"chevron\"\n              size=\"small\"\n            >\n              {buttonLabel}\n            </Button>\n          }\n          buttonType=\"default\"\n          className={`${baseClass}__action-popup`}\n        >\n          <PopupList.ButtonGroup>\n            {enabledCollections.map((collection, index) => {\n              return (\n                <PopupList.Button\n                  key={index}\n                  onClick={() => {\n                    if (collection.slug === folderCollectionConfig.slug) {\n                      openFolderDrawer()\n                    } else {\n                      setCreateCollectionSlug(collection.slug)\n                      openModal(newDocInFolderDrawerSlug)\n                    }\n                  }}\n                >\n                  {getTranslation(collection.labels.singular, i18n)}\n                </PopupList.Button>\n              )\n            })}\n          </PopupList.ButtonGroup>\n        </Popup>\n      )}\n\n      {createCollectionSlug && (\n        <DocumentDrawer\n          collectionSlug={createCollectionSlug}\n          drawerSlug={newDocInFolderDrawerSlug}\n          initialData={{\n            [folderFieldName]: folderID,\n          }}\n          onSave={async ({ doc }) => {\n            await onCreateSuccess({\n              collectionSlug: createCollectionSlug,\n              doc,\n            })\n            closeModal(newDocInFolderDrawerSlug)\n          }}\n          redirectAfterCreate={false}\n        />\n      )}\n\n      {collectionSlugs.includes(folderCollectionConfig.slug) && (\n        <FolderDocumentDrawer\n          initialData={{\n            [folderFieldName]: folderID,\n          }}\n          onSave={async (result) => {\n            await onCreateSuccess({\n              collectionSlug: folderCollectionConfig.slug,\n              doc: result.doc,\n            })\n            closeFolderDrawer()\n          }}\n          redirectAfterCreate={false}\n        />\n      )}\n    </React.Fragment>\n  )\n}\n"],"mappings":"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","ignoreList":[]}