{"version":3,"sources":["../src/find.ts"],"sourcesContent":["import type { PaginateOptions, PipelineStage } from 'mongoose'\nimport type { Find } from 'payload'\n\nimport { flattenWhereToOperators } from 'payload'\n\nimport type { MongooseAdapter } from './index.js'\n\nimport { buildQuery } from './queries/buildQuery.js'\nimport { buildSortParam } from './queries/buildSortParam.js'\nimport { aggregatePaginate } from './utilities/aggregatePaginate.js'\nimport { buildJoinAggregation } from './utilities/buildJoinAggregation.js'\nimport { buildProjectionFromSelect } from './utilities/buildProjectionFromSelect.js'\nimport { getCollection } from './utilities/getEntity.js'\nimport { getSession } from './utilities/getSession.js'\nimport { transform } from './utilities/transform.js'\n\nexport const find: Find = async function find(\n  this: MongooseAdapter,\n  {\n    collection: collectionSlug,\n    draftsEnabled,\n    joins = {},\n    limit = 0,\n    locale,\n    page,\n    pagination,\n    projection,\n    req,\n    select,\n    sort: sortArg,\n    where = {},\n  },\n) {\n  const { collectionConfig, Model } = getCollection({ adapter: this, collectionSlug })\n\n  const session = await getSession(this, req)\n\n  let hasNearConstraint = false\n\n  if (where) {\n    const constraints = flattenWhereToOperators(where)\n    hasNearConstraint = constraints.some((prop) => Object.keys(prop).some((key) => key === 'near'))\n  }\n\n  const sortAggregation: PipelineStage[] = []\n\n  let sort\n  if (!hasNearConstraint) {\n    sort = buildSortParam({\n      adapter: this,\n      config: this.payload.config,\n      fields: collectionConfig.flattenedFields,\n      locale,\n      sort: sortArg || collectionConfig.defaultSort,\n      sortAggregation,\n      timestamps: true,\n    })\n  }\n\n  const query = await buildQuery({\n    adapter: this,\n    collectionSlug,\n    fields: collectionConfig.flattenedFields,\n    locale,\n    where,\n  })\n\n  // useEstimatedCount is faster, but not accurate, as it ignores any filters. It is thus set to true if there are no filters.\n  const useEstimatedCount = hasNearConstraint || !query || Object.keys(query).length === 0\n  const paginationOptions: PaginateOptions = {\n    lean: true,\n    leanWithId: true,\n    options: {\n      session,\n    },\n    page,\n    pagination,\n    projection,\n    sort,\n    useEstimatedCount,\n  }\n\n  if (select) {\n    paginationOptions.projection = buildProjectionFromSelect({\n      adapter: this,\n      fields: collectionConfig.flattenedFields,\n      select,\n    })\n  }\n\n  if (this.collation) {\n    const defaultLocale = 'en'\n    paginationOptions.collation = {\n      locale: locale && locale !== 'all' && locale !== '*' ? locale : defaultLocale,\n      ...this.collation,\n    }\n  }\n\n  if (!useEstimatedCount && Object.keys(query).length === 0 && this.disableIndexHints !== true) {\n    // Improve the performance of the countDocuments query which is used if useEstimatedCount is set to false by adding\n    // a hint. By default, if no hint is provided, MongoDB does not use an indexed field to count the returned documents,\n    // which makes queries very slow. This only happens when no query (filter) is provided. If one is provided, it uses\n    // the correct indexed field\n    paginationOptions.useCustomCountFn = () => {\n      return Promise.resolve(\n        Model.countDocuments(query, {\n          hint: { _id: 1 },\n          session,\n        }),\n      )\n    }\n  }\n\n  if (limit >= 0) {\n    paginationOptions.limit = limit\n    // limit must also be set here, it's ignored when pagination is false\n\n    paginationOptions.options!.limit = limit\n\n    // Disable pagination if limit is 0\n    if (limit === 0) {\n      paginationOptions.pagination = false\n    }\n  }\n\n  let result\n\n  const aggregate = await buildJoinAggregation({\n    adapter: this,\n    collection: collectionSlug,\n    collectionConfig,\n    draftsEnabled,\n    joins,\n    locale,\n    query,\n  })\n\n  if (aggregate || sortAggregation.length > 0) {\n    result = await aggregatePaginate({\n      adapter: this,\n      collation: paginationOptions.collation,\n      joinAggregation: aggregate,\n      limit: paginationOptions.limit,\n      Model,\n      page: paginationOptions.page,\n      pagination: paginationOptions.pagination,\n      projection: paginationOptions.projection,\n      query,\n      session: paginationOptions.options?.session ?? undefined,\n      sort: paginationOptions.sort as object,\n      sortAggregation,\n      useEstimatedCount: paginationOptions.useEstimatedCount,\n    })\n  } else {\n    result = await Model.paginate(query, paginationOptions)\n  }\n\n  transform({\n    adapter: this,\n    data: result.docs,\n    fields: collectionConfig.fields,\n    operation: 'read',\n  })\n\n  return result\n}\n"],"names":["flattenWhereToOperators","buildQuery","buildSortParam","aggregatePaginate","buildJoinAggregation","buildProjectionFromSelect","getCollection","getSession","transform","find","collection","collectionSlug","draftsEnabled","joins","limit","locale","page","pagination","projection","req","select","sort","sortArg","where","collectionConfig","Model","adapter","session","hasNearConstraint","constraints","some","prop","Object","keys","key","sortAggregation","config","payload","fields","flattenedFields","defaultSort","timestamps","query","useEstimatedCount","length","paginationOptions","lean","leanWithId","options","collation","defaultLocale","disableIndexHints","useCustomCountFn","Promise","resolve","countDocuments","hint","_id","result","aggregate","joinAggregation","undefined","paginate","data","docs","operation"],"mappings":"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"}