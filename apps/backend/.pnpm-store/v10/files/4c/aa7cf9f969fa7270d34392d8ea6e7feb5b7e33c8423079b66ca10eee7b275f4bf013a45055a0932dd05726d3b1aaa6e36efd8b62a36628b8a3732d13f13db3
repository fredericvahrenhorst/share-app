{"version":3,"file":"index.js","names":["c","_c","useModal","validateMimeType","React","toast","useConfig","EditDepthProvider","useTranslation","UploadControlsProvider","Drawer","useDrawerDepth","AddFilesView","AddingFilesView","FormsManagerProvider","useFormsManager","drawerSlug","DrawerContent","addFiles","forms","isInitializing","closeModal","collectionSlug","useBulkUpload","getEntityConfig","t","uploadCollection","uploadConfig","upload","uploadMimeTypes","mimeTypes","onDrop","useCallback","acceptedFiles","fileTransfer","DataTransfer","candidateFile","undefined","length","type","items","add","files","error","_jsx","acceptMimeTypes","join","onCancel","BulkUploadDrawer","$","t0","gutter","Header","slug","children","Context","createContext","initialFiles","maxFiles","onSuccess","setCollectionSlug","setInitialFiles","setMaxFiles","setOnCancel","setOnSuccess","BulkUploadProvider","drawerSlugPrefix","collection","setCollection","useState","onSuccessFunction","setOnSuccessFunction","onCancelFunction","setOnCancelFunction","useBulkUploadDrawerSlug","t1","Symbol","for","t2","t3","t4","docIDs","errorCount","t5","value","_jsxs","Fragment","use","depth"],"sources":["../../../src/elements/BulkUpload/index.tsx"],"sourcesContent":["'use client'\n\nimport type { JsonObject } from 'payload'\n\nimport { useModal } from '@faceless-ui/modal'\nimport { validateMimeType } from 'payload/shared'\nimport React from 'react'\nimport { toast } from 'sonner'\n\nimport { useConfig } from '../../providers/Config/index.js'\nimport { EditDepthProvider } from '../../providers/EditDepth/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { UploadControlsProvider } from '../../providers/UploadControls/index.js'\nimport { Drawer, useDrawerDepth } from '../Drawer/index.js'\nimport { AddFilesView } from './AddFilesView/index.js'\nimport { AddingFilesView } from './AddingFilesView/index.js'\nimport { FormsManagerProvider, useFormsManager } from './FormsManager/index.js'\n\nconst drawerSlug = 'bulk-upload-drawer-slug'\n\nfunction DrawerContent() {\n  const { addFiles, forms, isInitializing } = useFormsManager()\n  const { closeModal } = useModal()\n  const { collectionSlug, drawerSlug } = useBulkUpload()\n  const { getEntityConfig } = useConfig()\n  const { t } = useTranslation()\n\n  const uploadCollection = getEntityConfig({ collectionSlug })\n  const uploadConfig = uploadCollection?.upload\n  const uploadMimeTypes = uploadConfig?.mimeTypes\n\n  const onDrop = React.useCallback(\n    (acceptedFiles: FileList) => {\n      const fileTransfer = new DataTransfer()\n      for (const candidateFile of acceptedFiles) {\n        if (\n          uploadMimeTypes === undefined ||\n          uploadMimeTypes.length === 0 ||\n          validateMimeType(candidateFile.type, uploadMimeTypes)\n        ) {\n          fileTransfer.items.add(candidateFile)\n        }\n      }\n      if (fileTransfer.files.length === 0) {\n        toast.error(t('error:invalidFileType'))\n      } else {\n        void addFiles(fileTransfer.files)\n      }\n    },\n    [addFiles, t, uploadMimeTypes],\n  )\n\n  if (!collectionSlug) {\n    return null\n  }\n\n  if (!forms.length && !isInitializing) {\n    return (\n      <AddFilesView\n        acceptMimeTypes={uploadMimeTypes?.join(', ')}\n        onCancel={() => closeModal(drawerSlug)}\n        onDrop={onDrop}\n      />\n    )\n  } else {\n    return <AddingFilesView />\n  }\n}\n\nexport type BulkUploadProps = {\n  readonly children: React.ReactNode\n}\n\nexport function BulkUploadDrawer() {\n  const { drawerSlug } = useBulkUpload()\n\n  return (\n    <Drawer gutter={false} Header={null} slug={drawerSlug}>\n      <FormsManagerProvider>\n        <UploadControlsProvider>\n          <EditDepthProvider>\n            <DrawerContent />\n          </EditDepthProvider>\n        </UploadControlsProvider>\n      </FormsManagerProvider>\n    </Drawer>\n  )\n}\n\ntype BulkUploadContext = {\n  collectionSlug: string\n  drawerSlug: string\n  initialFiles: FileList\n  maxFiles: number\n  onCancel: () => void\n  onSuccess: (newDocs: JsonObject[], errorCount: number) => void\n  setCollectionSlug: (slug: string) => void\n  setInitialFiles: (files: FileList) => void\n  setMaxFiles: (maxFiles: number) => void\n  setOnCancel: (onCancel: BulkUploadContext['onCancel']) => void\n  setOnSuccess: (onSuccess: BulkUploadContext['onSuccess']) => void\n}\n\nconst Context = React.createContext<BulkUploadContext>({\n  collectionSlug: '',\n  drawerSlug: '',\n  initialFiles: undefined,\n  maxFiles: undefined,\n  onCancel: () => null,\n  onSuccess: () => null,\n  setCollectionSlug: () => null,\n  setInitialFiles: () => null,\n  setMaxFiles: () => null,\n  setOnCancel: () => null,\n  setOnSuccess: () => null,\n})\nexport function BulkUploadProvider({\n  children,\n  drawerSlugPrefix,\n}: {\n  readonly children: React.ReactNode\n  readonly drawerSlugPrefix?: string\n}) {\n  const [collection, setCollection] = React.useState<string>()\n  const [onSuccessFunction, setOnSuccessFunction] = React.useState<BulkUploadContext['onSuccess']>()\n  const [onCancelFunction, setOnCancelFunction] = React.useState<BulkUploadContext['onCancel']>()\n  const [initialFiles, setInitialFiles] = React.useState<FileList>(undefined)\n  const [maxFiles, setMaxFiles] = React.useState<number>(undefined)\n  const drawerSlug = `${drawerSlugPrefix ? `${drawerSlugPrefix}-` : ''}${useBulkUploadDrawerSlug()}`\n\n  const setCollectionSlug: BulkUploadContext['setCollectionSlug'] = (slug) => {\n    setCollection(slug)\n  }\n\n  const setOnSuccess: BulkUploadContext['setOnSuccess'] = (onSuccess) => {\n    setOnSuccessFunction(() => onSuccess)\n  }\n\n  return (\n    <Context\n      value={{\n        collectionSlug: collection,\n        drawerSlug,\n        initialFiles,\n        maxFiles,\n        onCancel: () => {\n          if (typeof onCancelFunction === 'function') {\n            onCancelFunction()\n          }\n        },\n        onSuccess: (docIDs, errorCount) => {\n          if (typeof onSuccessFunction === 'function') {\n            onSuccessFunction(docIDs, errorCount)\n          }\n        },\n        setCollectionSlug,\n        setInitialFiles,\n        setMaxFiles,\n        setOnCancel: setOnCancelFunction,\n        setOnSuccess,\n      }}\n    >\n      <React.Fragment>\n        {children}\n        <BulkUploadDrawer />\n      </React.Fragment>\n    </Context>\n  )\n}\n\nexport const useBulkUpload = () => React.use(Context)\n\nexport function useBulkUploadDrawerSlug() {\n  const depth = useDrawerDepth()\n\n  return `${drawerSlug}-${depth || 1}`\n}\n"],"mappings":"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","ignoreList":[]}