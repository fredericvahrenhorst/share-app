{"version":3,"file":"DrawerContent.js","names":["getTranslation","useRouter","useSearchParams","combineWhereConstraints","mergeListSearchAndWhere","qs","React","useCallback","toast","useConfig","useLocale","useRouteCache","useTranslation","requests","parseSearchParams","ConfirmationModal","PublishManyDrawerContent","props","collection","slug","labels","plural","singular","drawerSlug","ids","onSuccess","selectAll","clearRouteCache","config","routes","api","serverURL","code","locale","router","searchParams","i18n","t","addDefaultError","error","queryString","useMemo","whereConstraints","_status","not_equals","queryWithSearch","collectionConfig","search","get","push","where","id","exists","in","stringify","addQueryPrefix","handlePublish","patch","body","JSON","headers","language","then","res","json","deletedDocs","docs","length","successLabel","status","success","count","label","errors","message","description","map","join","replace","page","undefined","forEach","_err","_jsx","cancelLabel","confirmingLabel","confirmLabel","heading","modalSlug","onConfirm"],"sources":["../../../src/elements/PublishMany/DrawerContent.tsx"],"sourcesContent":["import type { Where } from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport { useRouter, useSearchParams } from 'next/navigation.js'\nimport { combineWhereConstraints, mergeListSearchAndWhere } from 'payload/shared'\nimport * as qs from 'qs-esm'\nimport React, { useCallback } from 'react'\nimport { toast } from 'sonner'\n\nimport type { PublishManyProps } from './index.js'\n\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useRouteCache } from '../../providers/RouteCache/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { requests } from '../../utilities/api.js'\nimport { parseSearchParams } from '../../utilities/parseSearchParams.js'\nimport { ConfirmationModal } from '../ConfirmationModal/index.js'\n\ntype PublishManyDrawerContentProps = {\n  drawerSlug: string\n  ids: (number | string)[]\n  onSuccess?: () => void\n  selectAll: boolean\n} & PublishManyProps\nexport function PublishManyDrawerContent(props: PublishManyDrawerContentProps) {\n  const {\n    collection,\n    collection: { slug, labels: { plural, singular } } = {},\n    drawerSlug,\n    ids,\n    onSuccess,\n    selectAll,\n  } = props\n\n  const { clearRouteCache } = useRouteCache()\n  const {\n    config: {\n      routes: { api },\n      serverURL,\n    },\n  } = useConfig()\n  const { code: locale } = useLocale()\n\n  const router = useRouter()\n  const searchParams = useSearchParams()\n  const { i18n, t } = useTranslation()\n\n  const addDefaultError = useCallback(() => {\n    toast.error(t('error:unknown'))\n  }, [t])\n\n  const queryString = React.useMemo((): string => {\n    const whereConstraints: Where[] = [\n      {\n        _status: {\n          not_equals: 'published',\n        },\n      },\n    ]\n\n    const queryWithSearch = mergeListSearchAndWhere({\n      collectionConfig: collection,\n      search: searchParams.get('search'),\n    })\n\n    if (queryWithSearch) {\n      whereConstraints.push(queryWithSearch)\n    }\n\n    if (selectAll) {\n      // Match the current filter/search, or default to all docs\n      whereConstraints.push(\n        (parseSearchParams(searchParams)?.where as Where) || {\n          id: {\n            exists: true,\n          },\n        },\n      )\n    } else {\n      // If we're not selecting all, we need to select specific docs\n      whereConstraints.push({\n        id: {\n          in: ids || [],\n        },\n      })\n    }\n\n    return qs.stringify(\n      {\n        locale,\n        where: combineWhereConstraints(whereConstraints),\n      },\n      { addQueryPrefix: true },\n    )\n  }, [collection, searchParams, selectAll, ids, locale])\n\n  const handlePublish = useCallback(async () => {\n    await requests\n      .patch(`${serverURL}${api}/${slug}${queryString}&draft=true`, {\n        body: JSON.stringify({\n          _status: 'published',\n        }),\n        headers: {\n          'Accept-Language': i18n.language,\n          'Content-Type': 'application/json',\n        },\n      })\n      .then(async (res) => {\n        try {\n          const json = await res.json()\n\n          const deletedDocs = json?.docs.length || 0\n          const successLabel = deletedDocs > 1 ? plural : singular\n\n          if (res.status < 400 || deletedDocs > 0) {\n            toast.success(\n              t('general:updatedCountSuccessfully', {\n                count: deletedDocs,\n                label: getTranslation(successLabel, i18n),\n              }),\n            )\n\n            if (json?.errors.length > 0) {\n              toast.error(json.message, {\n                description: json.errors.map((error) => error.message).join('\\n'),\n              })\n            }\n\n            router.replace(\n              qs.stringify(\n                {\n                  ...parseSearchParams(searchParams),\n                  page: selectAll ? '1' : undefined,\n                },\n                { addQueryPrefix: true },\n              ),\n            )\n\n            clearRouteCache()\n\n            if (typeof onSuccess === 'function') {\n              onSuccess()\n            }\n\n            return null\n          }\n\n          if (json.errors) {\n            json.errors.forEach((error) => toast.error(error.message))\n          } else {\n            addDefaultError()\n          }\n          return false\n        } catch (_err) {\n          return addDefaultError()\n        }\n      })\n  }, [\n    serverURL,\n    api,\n    slug,\n    queryString,\n    i18n,\n    plural,\n    singular,\n    t,\n    router,\n    searchParams,\n    selectAll,\n    clearRouteCache,\n    addDefaultError,\n    onSuccess,\n  ])\n\n  return (\n    <ConfirmationModal\n      body={t('version:aboutToPublishSelection', { label: getTranslation(plural, i18n) })}\n      cancelLabel={t('general:cancel')}\n      confirmingLabel={t('version:publishing')}\n      confirmLabel={t('general:confirm')}\n      heading={t('version:confirmPublish')}\n      modalSlug={drawerSlug}\n      onConfirm={handlePublish}\n    />\n  )\n}\n"],"mappings":"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","ignoreList":[]}