{"version":3,"file":"index.js","names":["c","_c","getTranslation","React","useCallback","Banner","Button","DraggableSortableItem","DraggableSortable","ErrorPill","RenderCustomComponent","FieldDescription","FieldError","FieldLabel","useForm","useFormSubmitted","extractRowsAndCollapsedIDs","toggleAllRows","NullifyLocaleField","useField","withCondition","useConfig","useDocumentInfo","useLocale","useTranslation","scrollToID","fieldBaseClass","ArrayRow","baseClass","ArrayFieldComponent","props","$","field","t0","forceRender","t1","path","pathFromProps","permissions","readOnly","schemaPath","schemaPathFromProps","validate","name","admin","t2","fields","label","localized","maxRows","minRows","minRowsProp","required","t3","undefined","className","description","isSortable","t4","setDocFieldPreferences","addFieldRow","dispatchFields","moveFieldRow","removeFieldRow","setModified","submitted","code","locale","i18n","t","config","t5","localization","t6","bb0","fallback","defaultLocale","editingDefaultLocale","t7","p","labels","plural","singular","getLabels","t8","value","options","memoizedValidate","t9","hasRows","potentiallyStalePath","customComponents","t10","disabled","errorPaths","rows","t11","showError","valid","value_0","t12","AfterInput","BeforeInput","Description","Error","Label","t13","t14","rowIndex","setTimeout","addRow","t15","rowIndex_0","type","duplicateRow","t16","rowIndex_1","removeRow","t17","moveFromIndex","moveToIndex","moveRow","t18","collapsed","collapsedIDs","updatedRows","toggleCollapseAll","t19","rowID","collapsed_0","collapsedIDs_0","updatedRows_0","setCollapse","hasMaxRows","length","fieldErrorCount","fieldHasErrors","showRequired","showMinRows","t20","t21","filter","Boolean","t22","_jsx","CustomComponent","Fallback","t23","count","withMessage","_jsxs","join","id","replace","children","as","onClick","fieldValue","ids","map","_temp","onDragEnd","t24","moveFromIndex_0","moveToIndex_0","rowData","i","rowID_0","isLoading","rowPath","rowErrorCount","errorPath","startsWith","draggableSortableItemProps","CustomRowLabel","RowLabel","errorCount","parentPath","row","rowCount","Fragment","buttonStyle","icon","iconPosition","iconStyle","ArrayField"],"sources":["../../../src/fields/Array/index.tsx"],"sourcesContent":["'use client'\nimport type {\n  ArrayFieldClientComponent,\n  ArrayFieldClientProps,\n  ArrayField as ArrayFieldType,\n} from 'payload'\n\nimport { getTranslation } from '@payloadcms/translations'\nimport React, { useCallback } from 'react'\n\nimport { Banner } from '../../elements/Banner/index.js'\nimport { Button } from '../../elements/Button/index.js'\nimport { DraggableSortableItem } from '../../elements/DraggableSortable/DraggableSortableItem/index.js'\nimport { DraggableSortable } from '../../elements/DraggableSortable/index.js'\nimport { ErrorPill } from '../../elements/ErrorPill/index.js'\nimport { RenderCustomComponent } from '../../elements/RenderCustomComponent/index.js'\nimport { FieldDescription } from '../../fields/FieldDescription/index.js'\nimport { FieldError } from '../../fields/FieldError/index.js'\nimport { FieldLabel } from '../../fields/FieldLabel/index.js'\nimport { useForm, useFormSubmitted } from '../../forms/Form/context.js'\nimport { extractRowsAndCollapsedIDs, toggleAllRows } from '../../forms/Form/rowHelpers.js'\nimport { NullifyLocaleField } from '../../forms/NullifyField/index.js'\nimport { useField } from '../../forms/useField/index.js'\nimport { withCondition } from '../../forms/withCondition/index.js'\nimport { useConfig } from '../../providers/Config/index.js'\nimport { useDocumentInfo } from '../../providers/DocumentInfo/index.js'\nimport { useLocale } from '../../providers/Locale/index.js'\nimport { useTranslation } from '../../providers/Translation/index.js'\nimport { scrollToID } from '../../utilities/scrollToID.js'\nimport { fieldBaseClass } from '../shared/index.js'\nimport { ArrayRow } from './ArrayRow.js'\nimport './index.scss'\n\nconst baseClass = 'array-field'\n\nexport const ArrayFieldComponent: ArrayFieldClientComponent = (props) => {\n  const {\n    field: {\n      name,\n      admin: { className, description, isSortable = true } = {},\n      fields,\n      label,\n      localized,\n      maxRows,\n      minRows: minRowsProp,\n      required,\n    },\n    forceRender = false,\n    path: pathFromProps,\n    permissions,\n    readOnly,\n    schemaPath: schemaPathFromProps,\n    validate,\n  } = props\n\n  const schemaPath = schemaPathFromProps ?? name\n\n  const minRows = (minRowsProp ?? required) ? 1 : 0\n\n  const { setDocFieldPreferences } = useDocumentInfo()\n  const { addFieldRow, dispatchFields, moveFieldRow, removeFieldRow, setModified } = useForm()\n  const submitted = useFormSubmitted()\n  const { code: locale } = useLocale()\n  const { i18n, t } = useTranslation()\n\n  const {\n    config: { localization },\n  } = useConfig()\n\n  const editingDefaultLocale = (() => {\n    if (localization && localization.fallback) {\n      const defaultLocale = localization.defaultLocale\n      return locale === defaultLocale\n    }\n\n    return true\n  })()\n\n  // Handle labeling for Arrays, Global Arrays, and Blocks\n  const getLabels = (p: ArrayFieldClientProps): Partial<ArrayFieldType['labels']> => {\n    if ('labels' in p && p?.labels) {\n      return p.labels\n    }\n\n    if ('labels' in p.field && p.field.labels) {\n      return { plural: p.field.labels?.plural, singular: p.field.labels?.singular }\n    }\n\n    if ('label' in p.field && p.field.label) {\n      return { plural: undefined, singular: p.field.label }\n    }\n\n    return { plural: t('general:rows'), singular: t('general:row') }\n  }\n\n  const labels = getLabels(props)\n\n  const memoizedValidate = useCallback(\n    (value, options) => {\n      // alternative locales can be null\n      if (!editingDefaultLocale && value === null) {\n        return true\n      }\n\n      if (typeof validate === 'function') {\n        return validate(value, { ...options, maxRows, minRows, required })\n      }\n    },\n    [maxRows, minRows, required, validate, editingDefaultLocale],\n  )\n\n  const {\n    customComponents: { AfterInput, BeforeInput, Description, Error, Label } = {},\n    disabled,\n    errorPaths,\n    path,\n    rows = [],\n    showError,\n    valid,\n    value,\n  } = useField<number>({\n    hasRows: true,\n    potentiallyStalePath: pathFromProps,\n    validate: memoizedValidate,\n  })\n\n  const addRow = useCallback(\n    (rowIndex: number) => {\n      addFieldRow({\n        path,\n        rowIndex,\n        schemaPath,\n      })\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex}`)\n      }, 0)\n    },\n    [addFieldRow, path, schemaPath],\n  )\n\n  const duplicateRow = useCallback(\n    (rowIndex: number) => {\n      dispatchFields({ type: 'DUPLICATE_ROW', path, rowIndex })\n\n      setModified(true)\n\n      setTimeout(() => {\n        scrollToID(`${path}-row-${rowIndex}`)\n      }, 0)\n    },\n    [dispatchFields, path, setModified],\n  )\n\n  const removeRow = useCallback(\n    (rowIndex: number) => {\n      removeFieldRow({ path, rowIndex })\n    },\n    [removeFieldRow, path],\n  )\n\n  const moveRow = useCallback(\n    (moveFromIndex: number, moveToIndex: number) => {\n      moveFieldRow({\n        moveFromIndex,\n        moveToIndex,\n        path,\n      })\n    },\n    [path, moveFieldRow],\n  )\n\n  const toggleCollapseAll = useCallback(\n    (collapsed: boolean) => {\n      const { collapsedIDs, updatedRows } = toggleAllRows({\n        collapsed,\n        rows,\n      })\n      setDocFieldPreferences(path, { collapsed: collapsedIDs })\n      dispatchFields({ type: 'SET_ALL_ROWS_COLLAPSED', path, updatedRows })\n    },\n    [dispatchFields, path, rows, setDocFieldPreferences],\n  )\n\n  const setCollapse = useCallback(\n    (rowID: string, collapsed: boolean) => {\n      const { collapsedIDs, updatedRows } = extractRowsAndCollapsedIDs({\n        collapsed,\n        rowID,\n        rows,\n      })\n\n      dispatchFields({ type: 'SET_ROW_COLLAPSED', path, updatedRows })\n      setDocFieldPreferences(path, { collapsed: collapsedIDs })\n    },\n    [dispatchFields, path, rows, setDocFieldPreferences],\n  )\n\n  const hasMaxRows = maxRows && rows.length >= maxRows\n\n  const fieldErrorCount = errorPaths.length\n  const fieldHasErrors = submitted && errorPaths.length > 0\n\n  const showRequired = (readOnly || disabled) && rows.length === 0\n  const showMinRows = (rows.length && rows.length < minRows) || (required && rows.length === 0)\n\n  return (\n    <div\n      className={[\n        fieldBaseClass,\n        baseClass,\n        className,\n        fieldHasErrors ? `${baseClass}--has-error` : `${baseClass}--has-no-error`,\n      ]\n        .filter(Boolean)\n        .join(' ')}\n      id={`field-${path.replace(/\\./g, '__')}`}\n    >\n      {showError && (\n        <RenderCustomComponent\n          CustomComponent={Error}\n          Fallback={<FieldError path={path} showError={showError} />}\n        />\n      )}\n      <header className={`${baseClass}__header`}>\n        <div className={`${baseClass}__header-wrap`}>\n          <div className={`${baseClass}__header-content`}>\n            <h3 className={`${baseClass}__title`}>\n              <RenderCustomComponent\n                CustomComponent={Label}\n                Fallback={\n                  <FieldLabel\n                    as=\"span\"\n                    label={label}\n                    localized={localized}\n                    path={path}\n                    required={required}\n                  />\n                }\n              />\n            </h3>\n            {fieldHasErrors && fieldErrorCount > 0 && (\n              <ErrorPill count={fieldErrorCount} i18n={i18n} withMessage />\n            )}\n          </div>\n          {rows?.length > 0 && (\n            <ul className={`${baseClass}__header-actions`}>\n              <li>\n                <button\n                  className={`${baseClass}__header-action`}\n                  onClick={() => toggleCollapseAll(true)}\n                  type=\"button\"\n                >\n                  {t('fields:collapseAll')}\n                </button>\n              </li>\n              <li>\n                <button\n                  className={`${baseClass}__header-action`}\n                  onClick={() => toggleCollapseAll(false)}\n                  type=\"button\"\n                >\n                  {t('fields:showAll')}\n                </button>\n              </li>\n            </ul>\n          )}\n        </div>\n        <RenderCustomComponent\n          CustomComponent={Description}\n          Fallback={<FieldDescription description={description} path={path} />}\n        />\n      </header>\n      <NullifyLocaleField fieldValue={value} localized={localized} path={path} />\n      {BeforeInput}\n      {(rows?.length > 0 || (!valid && (showRequired || showMinRows))) && (\n        <DraggableSortable\n          className={`${baseClass}__draggable-rows`}\n          ids={rows.map((row) => row.id)}\n          onDragEnd={({ moveFromIndex, moveToIndex }) => moveRow(moveFromIndex, moveToIndex)}\n        >\n          {rows.map((rowData, i) => {\n            const { id: rowID, isLoading } = rowData\n\n            const rowPath = `${path}.${i}`\n\n            const rowErrorCount = errorPaths?.filter((errorPath) =>\n              errorPath.startsWith(rowPath + '.'),\n            ).length\n\n            return (\n              <DraggableSortableItem\n                disabled={readOnly || disabled || !isSortable}\n                id={rowID}\n                key={rowID}\n              >\n                {(draggableSortableItemProps) => (\n                  <ArrayRow\n                    {...draggableSortableItemProps}\n                    addRow={addRow}\n                    CustomRowLabel={rows?.[i]?.customComponents?.RowLabel}\n                    duplicateRow={duplicateRow}\n                    errorCount={rowErrorCount}\n                    fields={fields}\n                    forceRender={forceRender}\n                    hasMaxRows={hasMaxRows}\n                    isLoading={isLoading}\n                    isSortable={isSortable}\n                    labels={labels}\n                    moveRow={moveRow}\n                    parentPath={path}\n                    path={rowPath}\n                    permissions={permissions}\n                    readOnly={readOnly || disabled}\n                    removeRow={removeRow}\n                    row={rowData}\n                    rowCount={rows?.length}\n                    rowIndex={i}\n                    schemaPath={schemaPath}\n                    setCollapse={setCollapse}\n                  />\n                )}\n              </DraggableSortableItem>\n            )\n          })}\n          {!valid && (\n            <React.Fragment>\n              {showRequired && (\n                <Banner>\n                  {t('validation:fieldHasNo', { label: getTranslation(labels.plural, i18n) })}\n                </Banner>\n              )}\n              {showMinRows && (\n                <Banner type=\"error\">\n                  {t('validation:requiresAtLeast', {\n                    count: minRows,\n                    label:\n                      getTranslation(minRows > 1 ? labels.plural : labels.singular, i18n) ||\n                      t(minRows > 1 ? 'general:rows' : 'general:row'),\n                  })}\n                </Banner>\n              )}\n            </React.Fragment>\n          )}\n        </DraggableSortable>\n      )}\n      {!hasMaxRows && !readOnly && (\n        <Button\n          buttonStyle=\"icon-label\"\n          className={`${baseClass}__add-row`}\n          icon=\"plus\"\n          iconPosition=\"left\"\n          iconStyle=\"with-border\"\n          onClick={() => {\n            void addRow(value || 0)\n          }}\n        >\n          {t('fields:addLabel', { label: getTranslation(labels.singular, i18n) })}\n        </Button>\n      )}\n      {AfterInput}\n    </div>\n  )\n}\n\nexport const ArrayField = withCondition(ArrayFieldComponent)\n"],"mappings":"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","ignoreList":[]}